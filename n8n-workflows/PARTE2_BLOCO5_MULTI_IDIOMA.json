{
  "name": "ELEVEA PARTE 2 - Bloco 5: Multi-idioma (3 endpoints VIP)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/multi-language/settings",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-language-settings",
      "name": "üåç Webhook - Language Settings",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 14100],
      "webhookId": "elevea-language-settings"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: multi_language_get_settings + multi_language_update_settings (do GAS linha 6787 + 6831)\nconst out = [];\nfor (const { json } of items) {\n  const { site, siteSlug, action = 'get', settings } = json.body || {};\n  const normalizedSite = (site || siteSlug || '').toUpperCase();\n  \n  if (!normalizedSite) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Site √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  if (action === 'update' && !settings) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Settings s√£o obrigat√≥rios para update',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      siteSlug: normalizedSite,\n      action: action,\n      settings: settings || {},\n      searchFormula: `{site}='${normalizedSite}'`,\n      needsVipCheck: true,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-language-settings-prep",
      "name": "üìù Code - Prepare Language Settings",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 14100]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {"value1": "={{ $json.action }}", "operation": "equals", "value2": "get"}
          ]
        }
      },
      "id": "if-language-action-get",
      "name": "üîÄ IF - Action Get?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [660, 14100]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "language_settings", "mode": "list"},
        "filterByFormula": "={{ $json.searchFormula }}",
        "options": {}
      },
      "id": "airtable-search-language-settings",
      "name": "üóÑÔ∏è Airtable - Search Language",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [860, 14000]
    },
    {
      "parameters": {
        "jsCode": "// Parse e retornar language settings com defaults\nconst out = [];\n\nif (items.length === 0) {\n  // Retornar defaults se n√£o encontrou\n  out.push({\n    json: {\n      success: true,\n      data: {\n        defaultLanguage: 'pt',\n        enabledLanguages: ['pt'],\n        autoDetect: true,\n        fallbackLanguage: 'pt',\n        updatedAt: null\n      },\n      timestamp: new Date().toISOString()\n    }\n  });\n} else {\n  for (const { json } of items) {\n    const fields = json.fields || {};\n    \n    let enabledLanguages = ['pt'];\n    try {\n      enabledLanguages = typeof fields.enabledLanguages === 'string' \n        ? JSON.parse(fields.enabledLanguages) \n        : (fields.enabledLanguages || ['pt']);\n    } catch (e) {}\n    \n    out.push({\n      json: {\n        success: true,\n        data: {\n          defaultLanguage: fields.defaultLanguage || 'pt',\n          enabledLanguages: enabledLanguages,\n          autoDetect: fields.autoDetect !== false,\n          fallbackLanguage: fields.fallbackLanguage || 'pt',\n          updatedAt: fields.updatedAt\n        },\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n}\nreturn out;"
      },
      "id": "code-parse-language-settings",
      "name": "üìä Code - Parse Language Settings",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, 14000]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "language_settings", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "site", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "defaultLanguage", "fieldValue": "={{ $json.settings.defaultLanguage || 'pt' }}"},
            {"fieldName": "enabledLanguages", "fieldValue": "={{ JSON.stringify($json.settings.enabledLanguages || ['pt']) }}"},
            {"fieldName": "autoDetect", "fieldValue": "={{ $json.settings.autoDetect !== false }}"},
            {"fieldName": "fallbackLanguage", "fieldValue": "={{ $json.settings.fallbackLanguage || 'pt' }}"},
            {"fieldName": "updatedAt", "fieldValue": "={{ new Date().toISOString() }}"}
          ]
        }
      },
      "id": "airtable-save-language-settings",
      "name": "üóÑÔ∏è Airtable - Save Language",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1060, 14200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.success ? $json : { success: true, message: 'Configura√ß√µes de idioma salvas', timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-language-settings",
      "name": "üì§ Respond - Language Settings",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1260, 14100]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/multi-language/translate",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-translate",
      "name": "üåç Webhook - Translate Content",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 14400],
      "webhookId": "elevea-translate"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: multi_language_translate_content (do GAS linha 6859)\nconst out = [];\nfor (const { json } of items) {\n  const { content, sourceLanguage = 'pt', targetLanguage } = json.body || {};\n  \n  if (!content || !targetLanguage) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Content e targetLanguage s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  // Validar idioma suportado\n  const supported = ['pt', 'en', 'es', 'fr', 'it', 'de'];\n  if (!supported.includes(targetLanguage)) {\n    out.push({\n      json: {\n        success: false,\n        error: `Idioma ${targetLanguage} n√£o suportado. Use: ${supported.join(', ')}`,\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      content: content,\n      sourceLanguage: sourceLanguage,\n      targetLanguage: targetLanguage,\n      contentLength: content.length,\n      needsVipCheck: true,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-translate-prep",
      "name": "üìù Code - Prepare Translation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 14400]
    },
    {
      "parameters": {
        "jsCode": "// TRADU√á√ÉO MOCK (sem API key)\n// Em produ√ß√£o, substituir por HTTP Request para Google Translate API ou DeepL\nconst out = [];\nfor (const { json } of items) {\n  // Mock: retorna o conte√∫do original com prefixo do idioma\n  const translatedContent = `[${json.targetLanguage.toUpperCase()}] ${json.content}`;\n  \n  out.push({\n    json: {\n      success: true,\n      data: {\n        translatedContent: translatedContent,\n        sourceLanguage: json.sourceLanguage,\n        targetLanguage: json.targetLanguage,\n        charactersTranslated: json.content.length,\n        method: 'mock' // trocar para 'google_translate' ou 'deepl' quando integrar\n      },\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;\n\n/* \nPARA INTEGRA√á√ÉO REAL, substituir este node por:\n\nHTTP Request - Google Translate API:\nURL: https://translation.googleapis.com/language/translate/v2\nMethod: POST\nBody:\n{\n  \"q\": \"{{ $json.content }}\",\n  \"source\": \"{{ $json.sourceLanguage }}\",\n  \"target\": \"{{ $json.targetLanguage }}\",\n  \"format\": \"text\",\n  \"key\": \"{{ $env.GOOGLE_TRANSLATE_API_KEY }}\"\n}\n*/"
      },
      "id": "code-translate-mock",
      "name": "üåê Code - Translate (Mock)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [660, 14400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-translate",
      "name": "üì§ Respond - Translate",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [860, 14400]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/multi-language/languages",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-languages-list",
      "name": "üåç Webhook - Languages List",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 14600],
      "webhookId": "elevea-languages-list"
    },
    {
      "parameters": {
        "jsCode": "// Retornar lista de idiomas suportados (baseado no GAS linha 12 NEW_FEATURES_CONFIG)\nconst languages = [\n  { code: 'pt', name: 'Portugu√™s', nativeName: 'Portugu√™s', flag: 'üáßüá∑' },\n  { code: 'en', name: 'English', nativeName: 'English', flag: 'üá∫üá∏' },\n  { code: 'es', name: 'Spanish', nativeName: 'Espa√±ol', flag: 'üá™üá∏' },\n  { code: 'fr', name: 'French', nativeName: 'Fran√ßais', flag: 'üá´üá∑' },\n  { code: 'it', name: 'Italian', nativeName: 'Italiano', flag: 'üáÆüáπ' },\n  { code: 'de', name: 'German', nativeName: 'Deutsch', flag: 'üá©üá™' }\n];\n\nconst out = [{\n  json: {\n    success: true,\n    data: {\n      languages: languages,\n      total: languages.length,\n      default: 'pt'\n    },\n    timestamp: new Date().toISOString()\n  }\n}];\nreturn out;"
      },
      "id": "code-languages-list",
      "name": "üìù Code - Languages List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 14600]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-languages-list",
      "name": "üì§ Respond - Languages",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [660, 14600]
    }
  ],
  "connections": {
    "webhook-language-settings": {
      "main": [[{"node": "code-language-settings-prep", "type": "main", "index": 0}]]
    },
    "code-language-settings-prep": {
      "main": [[{"node": "if-language-action-get", "type": "main", "index": 0}]]
    },
    "if-language-action-get": {
      "main": [
        [{"node": "airtable-search-language-settings", "type": "main", "index": 0}],
        [{"node": "airtable-save-language-settings", "type": "main", "index": 0}]
      ]
    },
    "airtable-search-language-settings": {
      "main": [[{"node": "code-parse-language-settings", "type": "main", "index": 0}]]
    },
    "code-parse-language-settings": {
      "main": [[{"node": "respond-language-settings", "type": "main", "index": 0}]]
    },
    "airtable-save-language-settings": {
      "main": [[{"node": "respond-language-settings", "type": "main", "index": 0}]]
    },
    "webhook-translate": {
      "main": [[{"node": "code-translate-prep", "type": "main", "index": 0}]]
    },
    "code-translate-prep": {
      "main": [[{"node": "code-translate-mock", "type": "main", "index": 0}]]
    },
    "code-translate-mock": {
      "main": [[{"node": "respond-translate", "type": "main", "index": 0}]]
    },
    "webhook-languages-list": {
      "main": [[{"node": "code-languages-list", "type": "main", "index": 0}]]
    },
    "code-languages-list": {
      "main": [[{"node": "respond-languages-list", "type": "main", "index": 0}]]
    }
  }
}

