{
  "name": "ELEVEA - Sistema Completo de Produ√ß√£o",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "google_client_id",
              "name": "GOOGLE_CLIENT_ID",
              "value": "SEU_GOOGLE_CLIENT_ID.apps.googleusercontent.com",
              "type": "string"
            },
            {
              "id": "google_client_secret",
              "name": "GOOGLE_CLIENT_SECRET",
              "value": "GOCSPX-SEU_GOOGLE_CLIENT_SECRET",
              "type": "string"
            },
            {
              "id": "telegram_bot_token",
              "name": "TELEGRAM_BOT_TOKEN",
              "value": "123456789:ABC-DEF1234ghIkl-zyx57W2v1u123ew11",
              "type": "string"
            },
            {
              "id": "telegram_chat_id",
              "name": "TELEGRAM_CHAT_ID",
              "value": "123456789",
              "type": "string"
            },
            {
              "id": "whatsapp_business_token",
              "name": "WHATSAPP_BUSINESS_TOKEN",
              "value": "SEU_WHATSAPP_BUSINESS_API_TOKEN",
              "type": "string"
            },
            {
              "id": "whatsapp_phone_id",
              "name": "WHATSAPP_PHONE_ID",
              "value": "SEU_PHONE_NUMBER_ID",
              "type": "string"
            },
            {
              "id": "evolution_api_url",
              "name": "EVOLUTION_API_URL",
              "value": "https://sua-evolution-api.com",
              "type": "string"
            },
            {
              "id": "evolution_api_key",
              "name": "EVOLUTION_API_KEY",
              "value": "SEU_EVOLUTION_API_KEY",
              "type": "string"
            },
            {
              "id": "evolution_instance_name",
              "name": "EVOLUTION_INSTANCE_NAME",
              "value": "elevea-instance",
              "type": "string"
            },
            {
              "id": "mercadopago_token",
              "name": "MERCADOPAGO_ACCESS_TOKEN",
              "value": "APP_USR-SEU_ACCESS_TOKEN",
              "type": "string"
            },
            {
              "id": "netlify_token",
              "name": "NETLIFY_BUILD_TOKEN",
              "value": "nfp_SEU_NETLIFY_TOKEN",
              "type": "string"
            },
            {
              "id": "google_sheets_id",
              "name": "GOOGLE_SHEETS_ID",
              "value": "SEU_GOOGLE_SHEETS_ID",
              "type": "string"
            },
            {
              "id": "openai_api_key",
              "name": "OPENAI_API_KEY",
              "value": "sk-proj-SEU_OPENAI_KEY",
              "type": "string"
            }
          ]
        }
      },
      "id": "globals-config",
      "name": "üåê Globals Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [240, 100],
      "notesInFlow": true,
      "notes": "Configure TODOS os valores aqui antes de usar!"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/auth/login",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-auth-login",
      "name": "üîê Webhook - Login",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 300],
      "webhookId": "elevea-auth-login"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/auth/reset-password",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-reset-password",
      "name": "üîë Webhook - Reset Password",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 500],
      "webhookId": "elevea-reset-password"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/client/plan",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-client-plan",
      "name": "üìä Webhook - Client Plan",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 700],
      "webhookId": "elevea-client-plan"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/whatsapp/send-bulk",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-whatsapp-bulk",
      "name": "üì± Webhook - WhatsApp Bulk (Oficial)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 900],
      "webhookId": "elevea-whatsapp-bulk"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/whatsapp/send-ai",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-whatsapp-ai",
      "name": "ü§ñ Webhook - WhatsApp AI (Evolution)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 1100],
      "webhookId": "elevea-whatsapp-ai"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/whatsapp/webhook/evolution",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-evolution-incoming",
      "name": "üì® Webhook - Evolution Incoming Messages",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 1300],
      "webhookId": "elevea-evolution-incoming"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/feedback/submit",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-feedback-submit",
      "name": "üí¨ Webhook - Feedback Submit",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 1500],
      "webhookId": "elevea-feedback-submit"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/admin/toggle-block",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-admin-toggle",
      "name": "üîß Webhook - Admin Toggle",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 1700],
      "webhookId": "elevea-admin-toggle"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/mercadopago/webhook",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-mercadopago",
      "name": "üí∞ Webhook - Mercado Pago",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 1900],
      "webhookId": "elevea-mercadopago"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/onboarding/save",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-onboarding",
      "name": "üìù Webhook - Onboarding",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 2100],
      "webhookId": "elevea-onboarding"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/google/reviews/list",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-reviews-list",
      "name": "‚≠ê Webhook - Google Reviews List",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 2300],
      "webhookId": "elevea-reviews-list"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/leads/capture",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-leads-capture",
      "name": "üéØ Webhook - Lead Capture",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 2500],
      "webhookId": "elevea-leads-capture"
    },
    {
      "parameters": {
        "jsCode": "// üîê Validar Login\nconst out = [];\nfor (const { json } of items) {\n  const { email, password } = json.body || {};\n  \n  if (!email || !password) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Email e senha s√£o obrigat√≥rios'\n      }\n    });\n    continue;\n  }\n  \n  // TODO: Implementar valida√ß√£o real com hash de senha\n  // Por enquanto, aceita qualquer senha para demonstra√ß√£o\n  \n  const role = email.includes('admin') ? 'admin' : 'client';\n  const siteSlug = email.split('@')[0].replace(/[^a-z0-9]/gi, '-').toLowerCase();\n  \n  out.push({\n    json: {\n      success: true,\n      user: {\n        email: email,\n        role: role,\n        siteSlug: siteSlug\n      },\n      token: 'jwt_' + Buffer.from(email + ':' + Date.now()).toString('base64'),\n      expiresIn: 86400 // 24 horas\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-validate-login",
      "name": "üîê Code - Validate Login",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// üîë Generate Reset Link\nconst out = [];\nfor (const { json } of items) {\n  const email = json.body?.email || '';\n  \n  if (!email) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Email √© obrigat√≥rio'\n      }\n    });\n    continue;\n  }\n  \n  const resetToken = require('crypto').randomBytes(32).toString('hex');\n  const resetLink = `https://agenciaelevea.netlify.app/reset?token=${resetToken}`;\n  const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(); // 24h\n  \n  out.push({ \n    json: { \n      success: true,\n      email: email, \n      resetToken: resetToken, \n      resetLink: resetLink,\n      expiresAt: expiresAt\n    } \n  });\n}\nreturn out;"
      },
      "id": "code-generate-reset-link",
      "name": "üîë Code - Generate Reset Link",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 500]
    },
    {
      "parameters": {
        "jsCode": "// üì± Send WhatsApp Bulk (API Oficial)\nconst out = [];\nconst globals = $('üåê Globals Config').first().json;\n\nfor (const { json } of items) {\n  const { siteSlug, recipients, message, mediaUrl } = json.body || {};\n  \n  if (!recipients || !Array.isArray(recipients) || recipients.length === 0) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Lista de destinat√°rios √© obrigat√≥ria'\n      }\n    });\n    continue;\n  }\n  \n  if (!message) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Mensagem √© obrigat√≥ria'\n      }\n    });\n    continue;\n  }\n  \n  // Prepara os dados para envio em massa\n  out.push({\n    json: {\n      siteSlug: siteSlug,\n      recipients: recipients,\n      message: message,\n      mediaUrl: mediaUrl,\n      phoneId: globals.WHATSAPP_PHONE_ID,\n      accessToken: globals.WHATSAPP_BUSINESS_TOKEN,\n      type: mediaUrl ? 'media' : 'text',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-prepare-whatsapp-bulk",
      "name": "üì± Code - Prepare WhatsApp Bulk",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 900]
    },
    {
      "parameters": {
        "jsCode": "// ü§ñ Send WhatsApp with AI (Evolution API)\nconst out = [];\nconst globals = $('üåê Globals Config').first().json;\n\nfor (const { json } of items) {\n  const { siteSlug, phone, message, useAI, context } = json.body || {};\n  \n  if (!phone) {\n    out.push({\n      json: {\n        success: false,\n        error: 'N√∫mero de telefone √© obrigat√≥rio'\n      }\n    });\n    continue;\n  }\n  \n  let finalMessage = message;\n  \n  // Se useAI = true, prepara para processar com OpenAI antes de enviar\n  if (useAI && context) {\n    out.push({\n      json: {\n        siteSlug: siteSlug,\n        phone: phone,\n        originalMessage: message,\n        context: context,\n        needsAI: true,\n        evolutionUrl: globals.EVOLUTION_API_URL,\n        evolutionKey: globals.EVOLUTION_API_KEY,\n        instanceName: globals.EVOLUTION_INSTANCE_NAME\n      }\n    });\n  } else {\n    // Envia direto sem IA\n    out.push({\n      json: {\n        siteSlug: siteSlug,\n        phone: phone,\n        message: finalMessage,\n        needsAI: false,\n        evolutionUrl: globals.EVOLUTION_API_URL,\n        evolutionKey: globals.EVOLUTION_API_KEY,\n        instanceName: globals.EVOLUTION_INSTANCE_NAME\n      }\n    });\n  }\n}\nreturn out;"
      },
      "id": "code-prepare-whatsapp-ai",
      "name": "ü§ñ Code - Prepare WhatsApp AI",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 1100]
    },
    {
      "parameters": {
        "jsCode": "// üì® Process Incoming WhatsApp Message (Evolution)\nconst out = [];\n\nfor (const { json } of items) {\n  const body = json.body || json;\n  const { event, data } = body;\n  \n  // Evolution API envia eventos de mensagens recebidas\n  if (event === 'messages.upsert') {\n    const message = data?.messages?.[0] || {};\n    const from = message.key?.remoteJid || '';\n    const text = message.message?.conversation || \n                 message.message?.extendedTextMessage?.text || '';\n    \n    if (text && from) {\n      out.push({\n        json: {\n          event: 'message_received',\n          from: from.replace('@s.whatsapp.net', ''),\n          message: text,\n          messageId: message.key?.id,\n          timestamp: message.messageTimestamp,\n          needsAIResponse: true // Flag para processar com IA\n        }\n      });\n    }\n  }\n}\nreturn out;"
      },
      "id": "code-process-evolution-incoming",
      "name": "üì® Code - Process Evolution Incoming",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 1300]
    },
    {
      "parameters": {
        "jsCode": "// üí∞ Process Mercado Pago Webhook\nconst out = [];\n\nfor (const { json } of items) {\n  const body = json.body || {};\n  const { type, action, data } = body;\n  \n  const eventType = type || action;\n  \n  if (eventType === 'subscription_authorized' || eventType === 'authorized') {\n    out.push({ \n      json: {\n        siteSlug: data?.external_reference || 'unknown',\n        status: 'active',\n        plan: 'vip',\n        preapproval_id: data?.id || data?.preapproval_id,\n        action: 'subscription_activated',\n        amount: data?.auto_recurring?.transaction_amount,\n        timestamp: new Date().toISOString()\n      }\n    });\n  } else if (eventType === 'subscription_paused' || eventType === 'paused') {\n    out.push({ \n      json: {\n        siteSlug: data?.external_reference || 'unknown',\n        status: 'paused',\n        plan: 'essential',\n        action: 'subscription_paused',\n        timestamp: new Date().toISOString()\n      }\n    });\n  } else if (eventType === 'subscription_cancelled' || eventType === 'cancelled') {\n    out.push({ \n      json: {\n        siteSlug: data?.external_reference || 'unknown',\n        status: 'blocked',\n        plan: 'essential',\n        action: 'subscription_blocked',\n        timestamp: new Date().toISOString()\n      }\n    });\n  } else {\n    out.push({ \n      json: {\n        action: 'unknown_event',\n        event_type: eventType,\n        data: data\n      }\n    });\n  }\n}\nreturn out;"
      },
      "id": "code-process-mercadopago",
      "name": "üí∞ Code - Process Mercado Pago",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 1900]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.body.action }}",
              "value2": "block"
            }
          ]
        }
      },
      "id": "if-block-action",
      "name": "‚ùì IF - Block Action",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 1700]
    },
    {
      "parameters": {
        "jsCode": "// üö´ Block Client\nconst out = [];\nfor (const { json } of items) {\n  const siteSlug = json.body?.siteSlug || json.siteSlug || 'unknown';\n  \n  out.push({ \n    json: {\n      siteSlug: siteSlug,\n      status: 'blocked',\n      manualBlock: true,\n      blockedAt: new Date().toISOString(),\n      reason: 'Bloqueio manual via admin',\n      action: 'block_client'\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-block-client",
      "name": "üö´ Code - Block Client",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 1650]
    },
    {
      "parameters": {
        "jsCode": "// ‚úÖ Unblock Client\nconst out = [];\nfor (const { json } of items) {\n  const siteSlug = json.body?.siteSlug || json.siteSlug || 'unknown';\n  \n  out.push({ \n    json: {\n      siteSlug: siteSlug,\n      status: 'active',\n      manualBlock: false,\n      unblockedAt: new Date().toISOString(),\n      reason: 'Desbloqueio manual via admin',\n      action: 'unblock_client'\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-unblock-client",
      "name": "‚úÖ Code - Unblock Client",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 1750]
    },
    {
      "parameters": {
        "url": "=https://graph.facebook.com/v18.0/{{ $json.phoneId }}/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "whatsAppBusinessApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"messaging_product\": \"whatsapp\",\n  \"to\": \"{{ $json.phone }}\",\n  \"type\": \"{{ $json.type }}\",\n  {{ $json.type === 'text' ? '\"text\": { \"body\": \"' + $json.message + '\" }' : '\"image\": { \"link\": \"' + $json.mediaUrl + '\" }' }}\n}",
        "options": {}
      },
      "id": "http-whatsapp-business-send",
      "name": "üì± HTTP - WhatsApp Business Send",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 900]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.needsAI }}",
              "value2": true
            }
          ]
        }
      },
      "id": "if-needs-ai",
      "name": "‚ùì IF - Needs AI",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 1100]
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "modelId": {
          "__rl": true,
          "value": "gpt-4",
          "mode": "list",
          "cachedResultName": "gpt-4"
        },
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "=Voc√™ √© um assistente virtual da ELEVEA, uma ag√™ncia de marketing digital. Seja educado, profissional e √∫til. Contexto do cliente: {{ $json.context }}"
            },
            {
              "role": "user",
              "content": "={{ $json.originalMessage || 'Ol√°!' }}"
            }
          ]
        },
        "options": {}
      },
      "id": "openai-generate-response",
      "name": "ü§ñ OpenAI - Generate Response",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [900, 1050]
    },
    {
      "parameters": {
        "url": "={{ $json.evolutionUrl }}/message/sendText/{{ $json.instanceName }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ $json.phone }}\",\n  \"text\": \"{{ $json.message }}\"\n}",
        "options": {
          "headers": {
            "entries": [
              {
                "name": "apikey",
                "value": "={{ $json.evolutionKey }}"
              }
            ]
          }
        }
      },
      "id": "http-evolution-send-direct",
      "name": "ü§ñ HTTP - Evolution Send Direct",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 1150]
    },
    {
      "parameters": {
        "jsCode": "// Prepara mensagem com resposta da IA\nconst out = [];\nfor (const { json } of items) {\n  const aiResponse = json.choices?.[0]?.message?.content || json.message?.content || '';\n  const previousData = $input.first().json;\n  \n  out.push({\n    json: {\n      phone: previousData.phone,\n      message: aiResponse,\n      evolutionUrl: previousData.evolutionUrl,\n      evolutionKey: previousData.evolutionKey,\n      instanceName: previousData.instanceName\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-format-ai-response",
      "name": "ü§ñ Code - Format AI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1100, 1050]
    },
    {
      "parameters": {
        "url": "={{ $json.evolutionUrl }}/message/sendText/{{ $json.instanceName }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ $json.phone }}\",\n  \"text\": \"{{ $json.message }}\"\n}",
        "options": {
          "headers": {
            "entries": [
              {
                "name": "apikey",
                "value": "={{ $json.evolutionKey }}"
              }
            ]
          }
        }
      },
      "id": "http-evolution-send-ai",
      "name": "ü§ñ HTTP - Evolution Send AI Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1300, 1050]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "messageEmail",
        "operation": "send",
        "toList": "={{ $json.email }}",
        "subject": "üîë Reset de Senha - ELEVEA",
        "message": "=Ol√°!\\n\\nRecebemos uma solicita√ß√£o para resetar sua senha.\\n\\nClique no link abaixo para criar uma nova senha:\\n{{ $json.resetLink }}\\n\\nEste link expira em 24 horas.\\n\\nSe voc√™ n√£o solicitou esta altera√ß√£o, ignore este email.\\n\\nEquipe ELEVEA",
        "options": {}
      },
      "id": "gmail-send-reset",
      "name": "üìß Gmail - Send Reset",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [680, 500]
    },
    {
      "parameters": {
        "url": "=https://api.telegram.org/bot{{ $('üåê Globals Config').first().json.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chat_id\": \"{{ $('üåê Globals Config').first().json.TELEGRAM_CHAT_ID }}\",\n  \"text\": \"üö® *Alerta ELEVEA*\\n\\n*Cliente:* {{ $json.siteSlug }}\\n*A√ß√£o:* {{ $json.action }}\\n*Status:* {{ $json.status }}\\n*Timestamp:* {{ $json.timestamp }}\",\n  \"parse_mode\": \"Markdown\"\n}",
        "options": {}
      },
      "id": "http-telegram-alert",
      "name": "üîî HTTP - Telegram Alert",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 1900]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success",
              "name": "success",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "data",
              "name": "data",
              "value": "={{ $json }}",
              "type": "object"
            },
            {
              "id": "timestamp",
              "name": "timestamp",
              "value": "={{ new Date().toISOString() }}",
              "type": "string"
            }
          ]
        }
      },
      "id": "set-response-success",
      "name": "‚úÖ Set - Response Success",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [680, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "respond-to-webhook",
      "name": "üì§ Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "clients",
          "mode": "list"
        },
        "filterByFormula": "=AND({siteSlug}='{{ $json.body.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-search-client",
      "name": "üóÑÔ∏è Airtable - Search Client",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [460, 700]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {
          "__rl": true,
          "value": "feedbacks",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "feedbacks",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "siteSlug": "={{ $json.body.siteSlug }}",
            "name": "={{ $json.body.name }}",
            "email": "={{ $json.body.email }}",
            "rating": "={{ $json.body.rating }}",
            "comment": "={{ $json.body.comment }}",
            "status": "pending",
            "createdAt": "={{ new Date().toISOString() }}"
          }
        },
        "options": {}
      },
      "id": "airtable-insert-feedback",
      "name": "üí¨ Airtable - Insert Feedback",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [460, 1500]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {
          "__rl": true,
          "value": "leads",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "leads",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "siteSlug": "={{ $json.body.siteSlug }}",
            "name": "={{ $json.body.name }}",
            "email": "={{ $json.body.email }}",
            "phone": "={{ $json.body.phone }}",
            "source": "={{ $json.body.source || 'website' }}",
            "status": "new",
            "score": "={{ $json.body.score || 0 }}",
            "createdAt": "={{ new Date().toISOString() }}"
          }
        },
        "options": {}
      },
      "id": "airtable-insert-lead",
      "name": "üéØ Airtable - Insert Lead",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [460, 2500]
    },
    {
      "parameters": {
        "schedule": "*/10 * * * *"
      },
      "id": "cron-token-refresh",
      "name": "‚è∞ Cron - Token Refresh (10min)",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 2700]
    },
    {
      "parameters": {
        "schedule": "0 6 * * *"
      },
      "id": "cron-billing-check",
      "name": "‚è∞ Cron - Billing Check (Daily 6AM)",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 2900]
    },
    {
      "parameters": {
        "schedule": "0 8 * * *"
      },
      "id": "cron-reviews-sync",
      "name": "‚è∞ Cron - Reviews Sync (Daily 8AM)",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 3100]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "tokens",
          "mode": "list"
        },
        "options": {}
      },
      "id": "airtable-get-tokens",
      "name": "üîë Airtable - Get All Tokens",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [460, 2700]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "clients",
          "mode": "list"
        },
        "filterByFormula": "=AND({status}='active')",
        "options": {}
      },
      "id": "airtable-get-active-clients",
      "name": "üí≥ Airtable - Get Active Clients",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [460, 2900]
    },
    {
      "parameters": {
        "jsCode": "// Filter tokens expiring in 24h\nconst out = [];\nfor (const { json: token } of items) {\n  try {\n    const expiresAt = new Date(token.fields?.expires_at || 0);\n    const now = new Date();\n    const hoursLeft = (expiresAt - now) / (1000 * 60 * 60);\n    \n    if (hoursLeft > 0 && hoursLeft < 24) {\n      out.push({ json: token });\n    }\n  } catch (error) {\n    // Skip invalid tokens\n  }\n}\nreturn out;"
      },
      "id": "code-filter-expiring-tokens",
      "name": "üîë Code - Filter Expiring Tokens",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 2700]
    },
    {
      "parameters": {
        "url": "https://oauth2.googleapis.com/token",
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "grant_type",
              "value": "refresh_token"
            },
            {
              "name": "refresh_token",
              "value": "={{ $json.fields.refresh_token }}"
            },
            {
              "name": "client_id",
              "value": "={{ $('üåê Globals Config').first().json.GOOGLE_CLIENT_ID }}"
            },
            {
              "name": "client_secret",
              "value": "={{ $('üåê Globals Config').first().json.GOOGLE_CLIENT_SECRET }}"
            }
          ]
        },
        "options": {}
      },
      "id": "http-refresh-google-token",
      "name": "üîÑ HTTP - Refresh Google Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 2700]
    }
  ],
  "connections": {
    "webhook-auth-login": {
      "main": [
        [
          {
            "node": "code-validate-login",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "code-validate-login": {
      "main": [
        [
          {
            "node": "set-response-success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set-response-success": {
      "main": [
        [
          {
            "node": "respond-to-webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "webhook-reset-password": {
      "main": [
        [
          {
            "node": "code-generate-reset-link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "code-generate-reset-link": {
      "main": [
        [
          {
            "node": "gmail-send-reset",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "webhook-client-plan": {
      "main": [
        [
          {
            "node": "airtable-search-client",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "webhook-whatsapp-bulk": {
      "main": [
        [
          {
            "node": "code-prepare-whatsapp-bulk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "code-prepare-whatsapp-bulk": {
      "main": [
        [
          {
            "node": "http-whatsapp-business-send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "webhook-whatsapp-ai": {
      "main": [
        [
          {
            "node": "code-prepare-whatsapp-ai",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "code-prepare-whatsapp-ai": {
      "main": [
        [
          {
            "node": "if-needs-ai",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if-needs-ai": {
      "main": [
        [
          {
            "node": "openai-generate-response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "http-evolution-send-direct",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "openai-generate-response": {
      "main": [
        [
          {
            "node": "code-format-ai-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "code-format-ai-response": {
      "main": [
        [
          {
            "node": "http-evolution-send-ai",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "webhook-evolution-incoming": {
      "main": [
        [
          {
            "node": "code-process-evolution-incoming",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "webhook-feedback-submit": {
      "main": [
        [
          {
            "node": "airtable-insert-feedback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "webhook-admin-toggle": {
      "main": [
        [
          {
            "node": "if-block-action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if-block-action": {
      "main": [
        [
          {
            "node": "code-block-client",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "code-unblock-client",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "webhook-mercadopago": {
      "main": [
        [
          {
            "node": "code-process-mercadopago",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "code-process-mercadopago": {
      "main": [
        [
          {
            "node": "http-telegram-alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "webhook-leads-capture": {
      "main": [
        [
          {
            "node": "airtable-insert-lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cron-token-refresh": {
      "main": [
        [
          {
            "node": "airtable-get-tokens",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "airtable-get-tokens": {
      "main": [
        [
          {
            "node": "code-filter-expiring-tokens",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "code-filter-expiring-tokens": {
      "main": [
        [
          {
            "node": "http-refresh-google-token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-01-07T00:00:00.000Z",
  "versionId": "3.0-PRODUCTION"
}
