{
  "name": "ELEVEA PARTE 2 - Bloco 4: Audit & Security (3 endpoints)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/audit/security-alerts",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-security-alerts",
      "name": "üîí Webhook - Security Alerts",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 13400],
      "webhookId": "elevea-security-alerts"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: audit_get_security_alerts (do GAS linha 1427)\nconst out = [];\nfor (const { json } of items) {\n  const { site, siteSlug, severity, resolved = false } = json.body || {};\n  const normalizedSite = (site || siteSlug || '').toUpperCase();\n  \n  let searchFormula = normalizedSite ? `{site}='${normalizedSite}'` : '1=1';\n  \n  if (severity) {\n    searchFormula = `AND(${searchFormula}, {severity}='${severity}')`;  \n  }\n  \n  if (typeof resolved === 'boolean') {\n    searchFormula = `AND(${searchFormula}, {resolved}=${resolved ? 'TRUE()' : 'FALSE()'})`;\n  }\n  \n  out.push({\n    json: {\n      siteSlug: normalizedSite || 'ALL',\n      searchFormula: searchFormula,\n      needsAdminCheck: true,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-security-alerts-prep",
      "name": "üìù Code - Prepare Alerts Query",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 13400]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "security_alerts", "mode": "list"},
        "returnAll": false,
        "limit": 100,
        "options": {
          "filterByFormula": "={{ $json.searchFormula }}"
        }
      },
      "id": "airtable-list-security-alerts",
      "name": "üóÑÔ∏è Airtable - List Alerts",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 13400]
    },
    {
      "parameters": {
        "jsCode": "// Formatar e ordenar alertas por severity\nconst out = [];\nconst alerts = items.map(i => i.json.fields || i.json);\n\n// Ordem de severity\nconst severityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n\nalerts.sort((a, b) => {\n  const severityA = severityOrder[a.severity] || 0;\n  const severityB = severityOrder[b.severity] || 0;\n  if (severityA !== severityB) return severityB - severityA;\n  return new Date(b.createdAt) - new Date(a.createdAt);\n});\n\nconst criticalCount = alerts.filter(a => a.severity === 'critical').length;\nconst highCount = alerts.filter(a => a.severity === 'high').length;\nconst unresolvedCount = alerts.filter(a => !a.resolved).length;\n\nout.push({\n  json: {\n    success: true,\n    data: {\n      alerts: alerts,\n      total: alerts.length,\n      criticalCount: criticalCount,\n      highCount: highCount,\n      unresolvedCount: unresolvedCount\n    },\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-format-security-alerts",
      "name": "üìä Code - Format Alerts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 13400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-security-alerts",
      "name": "üì§ Respond - Security Alerts",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 13400]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/audit/alerts/resolve",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-resolve-alert",
      "name": "üîí Webhook - Resolve Alert",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 13600],
      "webhookId": "elevea-resolve-alert"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: audit_resolve_alert (do GAS linha 1429)\nconst out = [];\nfor (const { json } of items) {\n  const { alertId, resolvedBy, notes } = json.body || {};\n  \n  if (!alertId) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Alert ID √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      alertId: alertId,\n      searchFormula: `{id}='${alertId}'`,\n      resolvedBy: resolvedBy || 'admin',\n      notes: notes || '',\n      needsAdminCheck: true,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-resolve-alert-prep",
      "name": "üìù Code - Prepare Resolve",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 13600]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "security_alerts", "mode": "list"},
        "filterByFormula": "={{ $json.searchFormula }}",
        "options": {}
      },
      "id": "airtable-search-alert",
      "name": "üóÑÔ∏è Airtable - Search Alert",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 13600]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "security_alerts", "mode": "list"},
        "id": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "resolved", "fieldValue": "true"},
            {"fieldName": "resolvedAt", "fieldValue": "={{ new Date().toISOString() }}"},
            {"fieldName": "resolvedBy", "fieldValue": "={{ $json.resolvedBy }}"},
            {"fieldName": "resolutionNotes", "fieldValue": "={{ $json.notes }}"}
          ]
        }
      },
      "id": "airtable-resolve-alert",
      "name": "üóÑÔ∏è Airtable - Resolve Alert",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [860, 13600]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "audit_logs", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "site", "fieldValue": "={{ $json.fields.site }}"},
            {"fieldName": "action", "fieldValue": "alert_resolved"},
            {"fieldName": "category", "fieldValue": "security"},
            {"fieldName": "severity", "fieldValue": "info"},
            {"fieldName": "details", "fieldValue": "={{ 'Alert ' + $json.alertId + ' resolved by ' + $json.resolvedBy }}"},
            {"fieldName": "userId", "fieldValue": "={{ $json.resolvedBy }}"},
            {"fieldName": "timestamp", "fieldValue": "={{ new Date().toISOString() }}"}
          ]
        }
      },
      "id": "airtable-log-alert-resolution",
      "name": "üóÑÔ∏è Airtable - Log Resolution",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1060, 13600]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Alerta resolvido com sucesso', alertId: $json.alertId, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-resolve-alert",
      "name": "üì§ Respond - Resolve Alert",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1260, 13600]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/audit/statistics",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-audit-statistics",
      "name": "üîí Webhook - Audit Statistics",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 13800],
      "webhookId": "elevea-audit-statistics"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: audit_get_statistics (do GAS linha 1430)\nconst out = [];\nfor (const { json } of items) {\n  const { site, siteSlug, range = '30d' } = json.body || {};\n  const normalizedSite = (site || siteSlug || '').toUpperCase();\n  \n  // Calcular cutoff date\n  const days = range === '7d' ? 7 : range === '30d' ? 30 : 90;\n  const cutoffDate = new Date();\n  cutoffDate.setDate(cutoffDate.getDate() - days);\n  \n  let searchFormula = `{timestamp}>='${cutoffDate.toISOString()}'`;\n  if (normalizedSite) {\n    searchFormula = `AND({site}='${normalizedSite}', ${searchFormula})`;\n  }\n  \n  out.push({\n    json: {\n      siteSlug: normalizedSite || 'ALL',\n      range: range,\n      cutoffDate: cutoffDate.toISOString(),\n      searchFormula: searchFormula,\n      needsAdminCheck: true,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-audit-stats-prep",
      "name": "üìù Code - Prepare Stats Query",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 13800]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "audit_logs", "mode": "list"},
        "returnAll": false,
        "limit": 10000,
        "options": {
          "filterByFormula": "={{ $json.searchFormula }}"
        }
      },
      "id": "airtable-list-audit-for-stats",
      "name": "üóÑÔ∏è Airtable - List Audit Logs",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 13800]
    },
    {
      "parameters": {
        "jsCode": "// Agregar estat√≠sticas de audit (baseado no GAS)\nconst logs = items.map(i => i.json.fields || i.json);\n\n// Total eventos\nconst total = logs.length;\n\n// Por categoria\nconst byCategory = {};\nlogs.forEach(log => {\n  const cat = log.category || 'other';\n  byCategory[cat] = (byCategory[cat] || 0) + 1;\n});\n\n// Por severity\nconst bySeverity = {};\nlogs.forEach(log => {\n  const sev = log.severity || 'info';\n  bySeverity[sev] = (bySeverity[sev] || 0) + 1;\n});\n\n// Por usu√°rio\nconst byUser = {};\nlogs.forEach(log => {\n  const user = log.userId || 'system';\n  byUser[user] = (byUser[user] || 0) + 1;\n});\n\n// Por site\nconst bySite = {};\nlogs.forEach(log => {\n  const site = log.site || 'unknown';\n  bySite[site] = (bySite[site] || 0) + 1;\n});\n\n// Top a√ß√µes\nconst actionCounts = {};\nlogs.forEach(log => {\n  const action = log.action || 'unknown';\n  actionCounts[action] = (actionCounts[action] || 0) + 1;\n});\nconst topActions = Object.entries(actionCounts)\n  .map(([action, count]) => ({ action, count }))\n  .sort((a, b) => b.count - a.count)\n  .slice(0, 10);\n\n// Timeline di√°ria\nconst dailyStats = {};\nlogs.forEach(log => {\n  const date = new Date(log.timestamp).toISOString().split('T')[0];\n  if (!dailyStats[date]) dailyStats[date] = 0;\n  dailyStats[date]++;\n});\n\nconst dailyArray = Object.entries(dailyStats)\n  .map(([date, count]) => ({ date, count }))\n  .sort((a, b) => new Date(a.date) - new Date(b.date));\n\nconst out = [{\n  json: {\n    success: true,\n    data: {\n      total: total,\n      byCategory: byCategory,\n      bySeverity: bySeverity,\n      byUser: byUser,\n      bySite: bySite,\n      topActions: topActions,\n      dailyStats: dailyArray\n    },\n    timestamp: new Date().toISOString()\n  }\n}];\nreturn out;"
      },
      "id": "code-aggregate-audit-stats",
      "name": "üìä Code - Aggregate Stats",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 13800]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-audit-statistics",
      "name": "üì§ Respond - Audit Stats",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 13800]
    }
  ],
  "connections": {
    "webhook-security-alerts": {
      "main": [[{"node": "code-security-alerts-prep", "type": "main", "index": 0}]]
    },
    "code-security-alerts-prep": {
      "main": [[{"node": "airtable-list-security-alerts", "type": "main", "index": 0}]]
    },
    "airtable-list-security-alerts": {
      "main": [[{"node": "code-format-security-alerts", "type": "main", "index": 0}]]
    },
    "code-format-security-alerts": {
      "main": [[{"node": "respond-security-alerts", "type": "main", "index": 0}]]
    },
    "webhook-resolve-alert": {
      "main": [[{"node": "code-resolve-alert-prep", "type": "main", "index": 0}]]
    },
    "code-resolve-alert-prep": {
      "main": [[{"node": "airtable-search-alert", "type": "main", "index": 0}]]
    },
    "airtable-search-alert": {
      "main": [[{"node": "airtable-resolve-alert", "type": "main", "index": 0}]]
    },
    "airtable-resolve-alert": {
      "main": [[{"node": "airtable-log-alert-resolution", "type": "main", "index": 0}]]
    },
    "airtable-log-alert-resolution": {
      "main": [[{"node": "respond-resolve-alert", "type": "main", "index": 0}]]
    },
    "webhook-audit-statistics": {
      "main": [[{"node": "code-audit-stats-prep", "type": "main", "index": 0}]]
    },
    "code-audit-stats-prep": {
      "main": [[{"node": "airtable-list-audit-for-stats", "type": "main", "index": 0}]]
    },
    "airtable-list-audit-for-stats": {
      "main": [[{"node": "code-aggregate-audit-stats", "type": "main", "index": 0}]]
    },
    "code-aggregate-audit-stats": {
      "main": [[{"node": "respond-audit-statistics", "type": "main", "index": 0}]]
    }
  }
}

