{
  "name": "ELEVEA - 24 Funções VIP Adicionais",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/whatsapp/contacts",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-wa-contacts",
      "name": "📱 Webhook - WhatsApp Contacts List",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 2800],
      "webhookId": "elevea-wa-contacts"
    },
    {
      "parameters": {
        "jsCode": "// FUNÇÃO: wa_list_contacts (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { site, siteSlug, page = 1, pageSize = 20, filters = {} } = json.body || {};\n  const normalizedSite = (site || siteSlug || '').toUpperCase();\n  \n  if (!normalizedSite) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Site é obrigatório',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      siteSlug: normalizedSite,\n      page: Math.max(1, parseInt(page)),\n      pageSize: Math.min(100, Math.max(1, parseInt(pageSize))),\n      filters: filters || {},\n      searchFormula: `AND({siteSlug}='${normalizedSite}', {ativo}=TRUE())`,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-wa-contacts-prepare",
      "name": "📝 Code - Prepare Contacts Query",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 2800]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {
          "__rl": true,
          "value": "appELEVEA",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "whatsapp_contacts",
          "mode": "list"
        },
        "returnAll": false,
        "limit": 1000,
        "options": {
          "filterByFormula": "={{ $json.searchFormula }}"
        }
      },
      "id": "airtable-list-wa-contacts",
      "name": "🗄️ Airtable - List Contacts",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 2800]
    },
    {
      "parameters": {
        "jsCode": "// Paginar e formatar contatos\nconst out = [];\nconst allContacts = items.map(i => i.json.fields || i.json);\nconst page = $node['Code - Prepare Contacts Query'].json.page || 1;\nconst pageSize = $node['Code - Prepare Contacts Query'].json.pageSize || 20;\nconst filters = $node['Code - Prepare Contacts Query'].json.filters || {};\n\n// Aplicar filtros adicionais\nlet filtered = allContacts;\nif (filters.nome) {\n  filtered = filtered.filter(c => (c.nome || '').toLowerCase().includes(filters.nome.toLowerCase()));\n}\nif (filters.empresa) {\n  filtered = filtered.filter(c => (c.empresa || '').toLowerCase().includes(filters.empresa.toLowerCase()));\n}\nif (filters.tags) {\n  filtered = filtered.filter(c => (c.tags || '').includes(filters.tags));\n}\n\n// Ordenar por data de criação (mais recente primeiro)\nfiltered.sort((a, b) => new Date(b.criado_em || 0) - new Date(a.criado_em || 0));\n\n// Paginar\nconst total = filtered.length;\nconst start = (page - 1) * pageSize;\nconst items = filtered.slice(start, start + pageSize);\n\nout.push({\n  json: {\n    success: true,\n    data: {\n      contacts: items,\n      total: total,\n      page: page,\n      pageSize: pageSize,\n      hasMore: start + pageSize < total\n    },\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-wa-contacts-paginate",
      "name": "📊 Code - Paginate & Format Contacts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 2800]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [
              {"name": "Access-Control-Allow-Origin", "value": "*"}
            ]
          }
        }
      },
      "id": "respond-wa-contacts",
      "name": "📤 Respond - WA Contacts",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 2800]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/whatsapp/contacts/import",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-wa-import",
      "name": "📱 Webhook - WhatsApp Import Contacts",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 3000],
      "webhookId": "elevea-wa-import"
    },
    {
      "parameters": {
        "jsCode": "// FUNÇÃO: wa_import_contacts (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { site, siteSlug, contacts = [] } = json.body || {};\n  const normalizedSite = (site || siteSlug || '').toUpperCase();\n  \n  if (!normalizedSite) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Site é obrigatório',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  if (!Array.isArray(contacts) || contacts.length === 0) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Lista de contatos é obrigatória',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  // Validar e normalizar cada contato\n  const validContacts = [];\n  const errors = [];\n  \n  contacts.forEach((contact, index) => {\n    const phone = (contact.phone || contact.telefone || '').replace(/\\D/g, '');\n    const nome = (contact.nome || contact.name || '').trim();\n    \n    if (!phone) {\n      errors.push({ index, error: 'Telefone obrigatório' });\n      return;\n    }\n    \n    if (!nome) {\n      errors.push({ index, error: 'Nome obrigatório' });\n      return;\n    }\n    \n    // Normalizar telefone para E.164 BR\n    let normalized = phone;\n    if (phone.length === 11 && !phone.startsWith('55')) {\n      normalized = '55' + phone;\n    } else if (phone.length === 10) {\n      normalized = '55' + phone.substring(0, 2) + '9' + phone.substring(2);\n    } else if (phone.length === 9) {\n      normalized = '5596' + phone; // DDD padrão 96\n    }\n    \n    validContacts.push({\n      siteSlug: normalizedSite,\n      nome: nome,\n      telefone_normalizado: normalized,\n      empresa: contact.empresa || '',\n      email: contact.email || '',\n      tags: contact.tags || '',\n      profilePicUrl: contact.profilePicUrl || '',\n      ativo: true,\n      criado_em: new Date().toISOString(),\n      atualizado_em: new Date().toISOString()\n    });\n  });\n  \n  out.push({\n    json: {\n      siteSlug: normalizedSite,\n      validContacts: validContacts,\n      total: contacts.length,\n      valid: validContacts.length,\n      errors: errors,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-wa-import-validate",
      "name": "✅ Code - Validate Import Contacts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 3000]
    },
    {
      "parameters": {
        "batchSize": 10,
        "options": {}
      },
      "id": "split-contacts-batch",
      "name": "🔀 Split - Contacts Batch",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [660, 3000]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {
          "__rl": true,
          "value": "appELEVEA",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "whatsapp_contacts",
          "mode": "list"
        },
        "options": {
          "bulkSize": 10,
          "ignoreErrors": true
        },
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "siteSlug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "nome", "fieldValue": "={{ $json.nome }}"},
            {"fieldName": "telefone_normalizado", "fieldValue": "={{ $json.telefone_normalizado }}"},
            {"fieldName": "empresa", "fieldValue": "={{ $json.empresa }}"},
            {"fieldName": "email", "fieldValue": "={{ $json.email }}"},
            {"fieldName": "tags", "fieldValue": "={{ $json.tags }}"},
            {"fieldName": "ativo", "fieldValue": "={{ $json.ativo }}"},
            {"fieldName": "criado_em", "fieldValue": "={{ $json.criado_em }}"}
          ]
        }
      },
      "id": "airtable-append-contacts",
      "name": "🗄️ Airtable - Append Contacts",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [860, 3000]
    },
    {
      "parameters": {
        "jsCode": "// Consolidar resultados da importação\nconst totalImported = items.filter(i => i.json.id).length;\nconst totalErrors = items.filter(i => !i.json.id).length;\n\nconst out = [{\n  json: {\n    success: true,\n    data: {\n      imported: totalImported,\n      errors: totalErrors,\n      total: items.length,\n      message: `${totalImported} contatos importados com sucesso`\n    },\n    timestamp: new Date().toISOString()\n  }\n}];\nreturn out;"
      },
      "id": "code-wa-import-result",
      "name": "📊 Code - Import Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, 3000]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [
              {"name": "Access-Control-Allow-Origin", "value": "*"}
            ]
          }
        }
      },
      "id": "respond-wa-import",
      "name": "📤 Respond - WA Import",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1260, 3000]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/whatsapp/contacts/update",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-wa-contact-update",
      "name": "📱 Webhook - WhatsApp Update Contact",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 3200],
      "webhookId": "elevea-wa-contact-update"
    },
    {
      "parameters": {
        "jsCode": "// FUNÇÃO: wa_update_contact (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { site, siteSlug, id, telefone, nome, email, empresa, tags, ativo, profilePicUrl } = json.body || {};\n  const normalizedSite = (site || siteSlug || '').toUpperCase();\n  \n  if (!normalizedSite) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Site é obrigatório',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  if (!id && !telefone) {\n    out.push({\n      json: {\n        success: false,\n        error: 'ID ou telefone é obrigatório',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  // Normalizar telefone se fornecido\n  let normalizedPhone = null;\n  if (telefone) {\n    const digits = telefone.replace(/\\D/g, '');\n    normalizedPhone = digits.length === 11 && !digits.startsWith('55') ? '55' + digits : digits;\n  }\n  \n  const searchFormula = id \n    ? `AND({id}='${id}', {siteSlug}='${normalizedSite}')`\n    : `AND({telefone_normalizado}='${normalizedPhone}', {siteSlug}='${normalizedSite}')`;\n  \n  out.push({\n    json: {\n      siteSlug: normalizedSite,\n      searchFormula: searchFormula,\n      updates: {\n        nome: nome || undefined,\n        email: email || undefined,\n        empresa: empresa || undefined,\n        tags: tags || undefined,\n        ativo: typeof ativo === 'boolean' ? ativo : undefined,\n        profilePicUrl: profilePicUrl || undefined,\n        atualizado_em: new Date().toISOString()\n      },\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-wa-contact-update-prepare",
      "name": "📝 Code - Prepare Contact Update",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 3200]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appELEVEA",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "whatsapp_contacts",
          "mode": "list"
        },
        "filterByFormula": "={{ $json.searchFormula }}",
        "options": {}
      },
      "id": "airtable-search-wa-contact",
      "name": "🗄️ Airtable - Search Contact",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 3200]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "appELEVEA",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "whatsapp_contacts",
          "mode": "list"
        },
        "id": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "nome", "fieldValue": "={{ $json.updates.nome }}"},
            {"fieldName": "email", "fieldValue": "={{ $json.updates.email }}"},
            {"fieldName": "empresa", "fieldValue": "={{ $json.updates.empresa }}"},
            {"fieldName": "tags", "fieldValue": "={{ $json.updates.tags }}"},
            {"fieldName": "ativo", "fieldValue": "={{ $json.updates.ativo }}"},
            {"fieldName": "profilePicUrl", "fieldValue": "={{ $json.updates.profilePicUrl }}"},
            {"fieldName": "atualizado_em", "fieldValue": "={{ $json.updates.atualizado_em }}"}
          ]
        }
      },
      "id": "airtable-update-wa-contact",
      "name": "🗄️ Airtable - Update Contact",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [860, 3200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Contato atualizado com sucesso', data: $json, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [
              {"name": "Access-Control-Allow-Origin", "value": "*"}
            ]
          }
        }
      },
      "id": "respond-wa-contact-update",
      "name": "📤 Respond - WA Contact Update",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 3200]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/whatsapp/templates/upsert",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-wa-template-upsert",
      "name": "📱 Webhook - WhatsApp Template Upsert",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 3400],
      "webhookId": "elevea-wa-template-upsert"
    },
    {
      "parameters": {
        "jsCode": "// FUNÇÃO: wa_upsert_template (do GAS)\nconst crypto = require('crypto');\nconst out = [];\n\nfor (const { json } of items) {\n  const { site, siteSlug, template } = json.body || {};\n  const normalizedSite = (site || siteSlug || '').toUpperCase();\n  \n  if (!normalizedSite || !template) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Site e template são obrigatórios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  const templateData = {\n    id: template.id || crypto.randomUUID(),\n    siteSlug: normalizedSite,\n    name: template.name || '',\n    displayName: template.displayName || '',\n    lang: template.lang || 'pt_BR',\n    description: template.description || '',\n    category: template.category || '',\n    status: template.status || 'APPROVED',\n    content: template.content || '',\n    variables: JSON.stringify(template.variables || []),\n    createdAt: template.createdAt || new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  \n  // Se tem ID, é update; senão é insert\n  const isUpdate = !!template.id;\n  const searchFormula = isUpdate ? `AND({id}='${templateData.id}', {siteSlug}='${normalizedSite}')` : null;\n  \n  out.push({\n    json: {\n      ...templateData,\n      isUpdate: isUpdate,\n      searchFormula: searchFormula,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-wa-template-upsert-prepare",
      "name": "📝 Code - Prepare Template Upsert",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 3400]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.isUpdate }}",
              "value2": true
            }
          ]
        }
      },
      "id": "if-template-update",
      "name": "❓ IF - Is Update?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [660, 3400]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appELEVEA",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "whatsapp_templates",
          "mode": "list"
        },
        "filterByFormula": "={{ $json.searchFormula }}",
        "options": {}
      },
      "id": "airtable-search-template",
      "name": "🗄️ Airtable - Search Template",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [860, 3300]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "appELEVEA",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "whatsapp_templates",
          "mode": "list"
        },
        "id": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "name", "fieldValue": "={{ $json.name }}"},
            {"fieldName": "displayName", "fieldValue": "={{ $json.displayName }}"},
            {"fieldName": "lang", "fieldValue": "={{ $json.lang }}"},
            {"fieldName": "description", "fieldValue": "={{ $json.description }}"},
            {"fieldName": "category", "fieldValue": "={{ $json.category }}"},
            {"fieldName": "status", "fieldValue": "={{ $json.status }}"},
            {"fieldName": "content", "fieldValue": "={{ $json.content }}"},
            {"fieldName": "variables", "fieldValue": "={{ $json.variables }}"},
            {"fieldName": "updatedAt", "fieldValue": "={{ $json.updatedAt }}"}
          ]
        }
      },
      "id": "airtable-update-template",
      "name": "🗄️ Airtable - Update Template",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1060, 3300]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {
          "__rl": true,
          "value": "appELEVEA",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "whatsapp_templates",
          "mode": "list"
        },
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "id", "fieldValue": "={{ $json.id }}"},
            {"fieldName": "siteSlug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "name", "fieldValue": "={{ $json.name }}"},
            {"fieldName": "displayName", "fieldValue": "={{ $json.displayName }}"},
            {"fieldName": "lang", "fieldValue": "={{ $json.lang }}"},
            {"fieldName": "description", "fieldValue": "={{ $json.description }}"},
            {"fieldName": "category", "fieldValue": "={{ $json.category }}"},
            {"fieldName": "status", "fieldValue": "={{ $json.status }}"},
            {"fieldName": "content", "fieldValue": "={{ $json.content }}"},
            {"fieldName": "variables", "fieldValue": "={{ $json.variables }}"},
            {"fieldName": "createdAt", "fieldValue": "={{ $json.createdAt }}"},
            {"fieldName": "updatedAt", "fieldValue": "={{ $json.updatedAt }}"}
          ]
        }
      },
      "id": "airtable-append-template",
      "name": "🗄️ Airtable - Append Template",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1060, 3500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Template salvo com sucesso', data: { id: $json.id }, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [
              {"name": "Access-Control-Allow-Origin", "value": "*"}
            ]
          }
        }
      },
      "id": "respond-wa-template",
      "name": "📤 Respond - WA Template",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1260, 3400]
    }
  ],
  "connections": {
    "Webhook - WhatsApp Contacts List": {
      "main": [[{ "node": "Code - Prepare Contacts Query", "type": "main", "index": 0 }]]
    },
    "Code - Prepare Contacts Query": {
      "main": [[{ "node": "Airtable - List Contacts", "type": "main", "index": 0 }]]
    },
    "Airtable - List Contacts": {
      "main": [[{ "node": "Code - Paginate & Format Contacts", "type": "main", "index": 0 }]]
    },
    "Code - Paginate & Format Contacts": {
      "main": [[{ "node": "Respond - WA Contacts", "type": "main", "index": 0 }]]
    },
    "Webhook - WhatsApp Import Contacts": {
      "main": [[{ "node": "Code - Validate Import Contacts", "type": "main", "index": 0 }]]
    },
    "Code - Validate Import Contacts": {
      "main": [[{ "node": "Split - Contacts Batch", "type": "main", "index": 0 }]]
    },
    "Split - Contacts Batch": {
      "main": [
        [{ "node": "Airtable - Append Contacts", "type": "main", "index": 0 }],
        [{ "node": "Code - Import Result", "type": "main", "index": 0 }]
      ]
    },
    "Airtable - Append Contacts": {
      "main": [[{ "node": "Split - Contacts Batch", "type": "main", "index": 0 }]]
    },
    "Code - Import Result": {
      "main": [[{ "node": "Respond - WA Import", "type": "main", "index": 0 }]]
    },
    "Webhook - WhatsApp Update Contact": {
      "main": [[{ "node": "Code - Prepare Contact Update", "type": "main", "index": 0 }]]
    },
    "Code - Prepare Contact Update": {
      "main": [[{ "node": "Airtable - Search Contact", "type": "main", "index": 0 }]]
    },
    "Airtable - Search Contact": {
      "main": [[{ "node": "Airtable - Update Contact", "type": "main", "index": 0 }]]
    },
    "Airtable - Update Contact": {
      "main": [[{ "node": "Respond - WA Contact Update", "type": "main", "index": 0 }]]
    },
    "Webhook - WhatsApp Template Upsert": {
      "main": [[{ "node": "Code - Prepare Template Upsert", "type": "main", "index": 0 }]]
    },
    "Code - Prepare Template Upsert": {
      "main": [[{ "node": "IF - Is Update?", "type": "main", "index": 0 }]]
    },
    "IF - Is Update?": {
      "main": [
        [{ "node": "Airtable - Search Template", "type": "main", "index": 0 }],
        [{ "node": "Airtable - Append Template", "type": "main", "index": 0 }]
      ]
    },
    "Airtable - Search Template": {
      "main": [[{ "node": "Airtable - Update Template", "type": "main", "index": 0 }]]
    },
    "Airtable - Update Template": {
      "main": [[{ "node": "Respond - WA Template", "type": "main", "index": 0 }]]
    },
    "Airtable - Append Template": {
      "main": [[{ "node": "Respond - WA Template", "type": "main", "index": 0 }]]
    }
  }
}

