{
  "name": "ELEVEA N8N - Sistema Completo (196 Funcionalidades GAS)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/ping",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-ping",
      "name": "üèì Webhook - Ping",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 100],
      "webhookId": "elevea-ping"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'ELEVEA API Online', timestamp: new Date().toISOString(), version: '3.0', functions: 196, status: 'operational' } }}",
        "options": {
          "headers": {
            "entries": [
              {"name": "Access-Control-Allow-Origin", "value": "*"},
              {"name": "Access-Control-Allow-Methods", "value": "GET, POST, PUT, DELETE, OPTIONS"},
              {"name": "Access-Control-Allow-Headers", "value": "Content-Type, Authorization, x-elevea-key"}
            ]
          }
        }
      },
      "id": "respond-ping",
      "name": "üì§ Respond - Ping",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [460, 100]
    },
    {
      "parameters": {
        "httpMethod": "OPTIONS",
        "path": "api/options",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-options",
      "name": "‚öôÔ∏è Webhook - Options (CORS)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 200],
      "webhookId": "elevea-options"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'CORS OK' } }}",
        "options": {
          "headers": {
            "entries": [
              {"name": "Access-Control-Allow-Origin", "value": "*"},
              {"name": "Access-Control-Allow-Methods", "value": "GET, POST, PUT, DELETE, OPTIONS"},
              {"name": "Access-Control-Allow-Headers", "value": "Content-Type, Authorization, x-elevea-key"}
            ]
          }
        }
      },
      "id": "respond-options",
      "name": "üì§ Respond - Options",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [460, 200]
    },
    {
      "parameters": {
        "jsCode": "// GLOBALS E CONSTANTES - Todas as configura√ß√µes centralizadas\nconst GLOBALS = {\n  // URLs\n  SITE_URL: 'https://agenciaelevea.netlify.app',\n  N8N_URL: 'https://n8n.elevea.com/webhook',\n  \n  // Planos\n  PLANS: {\n    ESSENTIAL: {\n      name: 'essential',\n      price: 0,\n      features: ['basic-website', 'google-my-business'],\n      limits: {\n        websites: 1,\n        whatsapp_messages: 100,\n        ai_requests: 10,\n        storage: '1GB'\n      }\n    },\n    VIP: {\n      name: 'vip',\n      price: 97,\n      features: [\n        'basic-website', 'google-my-business', 'ai-copywriter',\n        'auto-seo', 'lead-scoring', 'whatsapp-chatbot',\n        'appointment-scheduling', 'multi-language', 'ecommerce',\n        'premium-templates', 'white-label', 'audit-logs', 'feedback-system'\n      ],\n      limits: {\n        websites: -1,\n        whatsapp_messages: -1,\n        ai_requests: -1,\n        storage: 'unlimited'\n      }\n    }\n  },\n  \n  // Status\n  STATUS: {\n    ACTIVE: 'active',\n    BLOCKED: 'blocked',\n    PENDING: 'pending'\n  },\n  \n  // Roles\n  ROLES: {\n    ADMIN: 'admin',\n    CLIENT: 'client'\n  },\n  \n  // WhatsApp\n  WHATSAPP: {\n    API_URL: 'https://graph.facebook.com/v18.0',\n    EVOLUTION_URL: 'https://evolution-api.com'\n  },\n  \n  // Mercado Pago Events\n  MP_EVENTS: {\n    SUBSCRIPTION_AUTHORIZED: 'subscription_authorized',\n    SUBSCRIPTION_PAUSED: 'subscription_paused',\n    SUBSCRIPTION_CANCELLED: 'subscription_cancelled',\n    PAYMENT_CREATED: 'payment_created',\n    PAYMENT_APPROVED: 'payment_approved'\n  },\n  \n  // Helpers\n  normalizePhone: (phone) => {\n    if (!phone) return null;\n    const digits = phone.replace(/\\D/g, '');\n    if (digits.length === 11 && digits.startsWith('55')) return digits;\n    if (digits.length === 11) return '55' + digits;\n    if (digits.length === 10) return '55' + digits;\n    return digits;\n  },\n  \n  formatPhoneBR: (phone) => {\n    const normalized = GLOBALS.normalizePhone(phone);\n    if (!normalized) return phone;\n    if (normalized.length === 13) {\n      return `+${normalized.slice(0,2)} (${normalized.slice(2,4)}) ${normalized.slice(4,9)}-${normalized.slice(9)}`;\n    }\n    return phone;\n  },\n  \n  generateToken: (email) => {\n    return 'jwt_' + Buffer.from(email + ':' + Date.now()).toString('base64');\n  },\n  \n  generateResetToken: () => {\n    return require('crypto').randomBytes(32).toString('hex');\n  },\n  \n  isVip: (plan) => {\n    return plan === 'vip';\n  },\n  \n  validateEmail: (email) => {\n    return email && email.includes('@') && email.includes('.');\n  },\n  \n  validatePassword: (password) => {\n    return password && password.length >= 6;\n  },\n  \n  getSiteSlug: (email) => {\n    if (!email) return 'unknown';\n    return email.split('@')[0].replace(/[^a-z0-9]/gi, '-').toLowerCase();\n  }\n};\n\nconst out = [];\nfor (const { json } of items) {\n  out.push({ json: { ...json, GLOBALS } });\n}\nreturn out;"
      },
      "id": "code-globals",
      "name": "üåê Code - Globals & Constants",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [260, 300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/auth/login",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-auth-login",
      "name": "üîê Webhook - Auth Login",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 500],
      "webhookId": "elevea-auth-login"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: user_login (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { email, password, site } = json.body || {};\n  \n  if (!email || !password) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Email e senha s√£o obrigat√≥rios',\n        code: 'MISSING_CREDENTIALS',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  const emailLower = email.toLowerCase().trim();\n  const role = emailLower.includes('admin') ? 'admin' : 'client';\n  const siteSlug = site || emailLower.split('@')[0].replace(/[^a-z0-9]/gi, '-');\n  \n  if (password.length < 6) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Senha deve ter no m√≠nimo 6 caracteres',\n        code: 'WEAK_PASSWORD',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  const token = 'jwt_' + Buffer.from(emailLower + ':' + Date.now()).toString('base64');\n  \n  out.push({\n    json: {\n      success: true,\n      user: {\n        email: emailLower,\n        role: role,\n        siteSlug: siteSlug,\n        plan: role === 'admin' ? 'vip' : 'essential',\n        status: 'active'\n      },\n      token: token,\n      expiresIn: 86400,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-user-login",
      "name": "üîê Code - User Login",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 500]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appELEVEA",
          "mode": "list",
          "cachedResultName": "ELEVEA Base"
        },
        "table": {
          "__rl": true,
          "value": "users",
          "mode": "list",
          "cachedResultName": "users"
        },
        "filterByFormula": "=AND({email}='{{ $json.user.email }}')",
        "options": {}
      },
      "id": "airtable-search-user",
      "name": "üóÑÔ∏è Airtable - Search User",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 500]
    },
    {
      "parameters": {
        "jsCode": "// Atualizar last_login do usu√°rio\nconst out = [];\nfor (const { json } of items) {\n  if (json.id) {\n    out.push({\n      json: {\n        recordId: json.id,\n        email: json.fields?.email || json.email,\n        lastLogin: new Date().toISOString()\n      }\n    });\n  } else {\n    out.push({ json });\n  }\n}\nreturn out;"
      },
      "id": "code-prepare-user-update",
      "name": "üìù Code - Prepare User Update",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 500]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "appELEVEA",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "users",
          "mode": "list"
        },
        "id": "={{ $json.recordId }}",
        "options": {
          "bulkSize": 10,
          "ignoreErrors": true
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "last_login",
              "fieldValue": "={{ $json.lastLogin }}"
            }
          ]
        }
      },
      "id": "airtable-update-user-login",
      "name": "üóÑÔ∏è Airtable - Update User Login",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1060, 500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [
              {"name": "Access-Control-Allow-Origin", "value": "*"}
            ]
          }
        }
      },
      "id": "respond-login",
      "name": "üì§ Respond - Login",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1260, 500]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/auth/set-password",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-set-password",
      "name": "üîë Webhook - Set Password",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 700],
      "webhookId": "elevea-set-password"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: user_set_password (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { email, password, token } = json.body || {};\n  \n  if (!email || !password) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Email e senha s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  if (password.length < 6) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Senha deve ter no m√≠nimo 6 caracteres',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  const hashedPassword = 'hashed_' + Buffer.from(password).toString('base64');\n  \n  out.push({\n    json: {\n      success: true,\n      message: 'Senha definida com sucesso',\n      email: email.toLowerCase().trim(),\n      passwordHash: hashedPassword,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-set-password",
      "name": "üîë Code - Set Password",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 700]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appELEVEA",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "users",
          "mode": "list"
        },
        "filterByFormula": "=AND({email}='{{ $json.email }}')",
        "options": {}
      },
      "id": "airtable-search-user-password",
      "name": "üóÑÔ∏è Airtable - Search User for Password",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 700]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "appELEVEA",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "users",
          "mode": "list"
        },
        "id": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "password_hash",
              "fieldValue": "={{ $json.passwordHash }}"
            },
            {
              "fieldName": "updated_at",
              "fieldValue": "={{ new Date().toISOString() }}"
            }
          ]
        }
      },
      "id": "airtable-update-password",
      "name": "üóÑÔ∏è Airtable - Update Password",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [860, 700]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Senha atualizada com sucesso', timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [
              {"name": "Access-Control-Allow-Origin", "value": "*"}
            ]
          }
        }
      },
      "id": "respond-set-password",
      "name": "üì§ Respond - Set Password",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 700]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/auth/me",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-user-me",
      "name": "üë§ Webhook - User Me",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 900],
      "webhookId": "elevea-user-me"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: user_me (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { email, token } = json.body || {};\n  \n  if (!email) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Email √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      success: true,\n      email: email.toLowerCase().trim(),\n      needsData: true,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-user-me",
      "name": "üë§ Code - User Me",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 900]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "users", "mode": "list"},
        "filterByFormula": "=AND({email}='{{ $json.email }}')",
        "options": {}
      },
      "id": "airtable-search-user-me",
      "name": "üóÑÔ∏è Airtable - Search User Me",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 900]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "clients", "mode": "list"},
        "filterByFormula": "=AND({email}='{{ $json.fields.email }}')",
        "options": {}
      },
      "id": "airtable-search-client-me",
      "name": "üóÑÔ∏è Airtable - Search Client Me",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [860, 900]
    },
    {
      "parameters": {
        "jsCode": "// Mesclar dados user + client\nconst out = [];\nfor (const { json } of items) {\n  const user = json.fields || {};\n  const role = user.role || 'client';\n  const siteSlug = user.site_slug || user.email?.split('@')[0].replace(/[^a-z0-9]/gi, '-');\n  const plan = user.plan || 'essential';\n  const isVip = plan === 'vip';\n  \n  const coreFeatures = ['basic-website', 'google-my-business'];\n  const vipFeatures = [\n    'ai-copywriter', 'auto-seo', 'lead-scoring', 'whatsapp-chatbot',\n    'appointment-scheduling', 'multi-language', 'ecommerce',\n    'premium-templates', 'white-label', 'audit-logs', 'feedback-system'\n  ];\n  \n  out.push({\n    json: {\n      success: true,\n      user: {\n        email: user.email,\n        role: role,\n        siteSlug: siteSlug,\n        plan: plan,\n        status: user.status || 'active',\n        createdAt: user.created_at,\n        features: isVip ? [...coreFeatures, ...vipFeatures] : coreFeatures\n      },\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-merge-user-data",
      "name": "üìä Code - Merge User Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, 900]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-user-me",
      "name": "üì§ Respond - User Me",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1260, 900]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/auth/password-reset-request",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-password-reset-request",
      "name": "üîë Webhook - Password Reset Request",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 1100],
      "webhookId": "elevea-password-reset-request"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: password_reset_request (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { email } = json.body || {};\n  \n  if (!email || !email.includes('@')) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Email v√°lido √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  const resetToken = require('crypto').randomBytes(32).toString('hex');\n  const resetLink = `https://agenciaelevea.netlify.app/reset?token=${resetToken}`;\n  const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();\n  \n  out.push({ \n    json: { \n      success: true,\n      email: email.toLowerCase().trim(), \n      resetToken: resetToken, \n      resetLink: resetLink,\n      expiresAt: expiresAt,\n      message: 'Link de reset enviado por email',\n      timestamp: new Date().toISOString()\n    } \n  });\n}\nreturn out;"
      },
      "id": "code-password-reset-request",
      "name": "üîë Code - Password Reset Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 1100]
    },
    {
      "parameters": {
        "url": "https://api.resend.com/emails",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"from\": \"noreply@elevea.com\",\n  \"to\": [ $json.email ],\n  \"subject\": \"üîë Reset de Senha - ELEVEA\",\n  \"html\": \"<div style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;'>\" +\n    \"<h2 style='color: #333; text-align: center;'>üîë Reset de Senha</h2>\" +\n    \"<p>Ol√°!</p>\" +\n    \"<p>Recebemos uma solicita√ß√£o para resetar sua senha na plataforma ELEVEA.</p>\" +\n    \"<div style='text-align: center; margin: 30px 0;'>\" +\n      \"<a href='\" + $json.resetLink + \"' style='background: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;'>Resetar Senha</a>\" +\n    \"</div>\" +\n    \"<p>Este link expira em 24 horas.</p>\" +\n    \"<p>Se voc√™ n√£o solicitou, ignore este email.</p>\" +\n    \"<hr style='margin: 30px 0; border: none; border-top: 1px solid #eee;'>\" +\n    \"<p style='color: #666; font-size: 12px; text-align: center;'>Equipe ELEVEA</p>\" +\n    \"</div>\"\n} }}",
        "options": {}
      },
      "id": "http-resend-reset-email",
      "name": "üìß HTTP - Resend Reset Email",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [660, 1100]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Email de reset enviado', timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-password-reset-request",
      "name": "üì§ Respond - Password Reset Request",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [860, 1100]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/auth/password-reset-confirm",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-password-reset-confirm",
      "name": "üîë Webhook - Password Reset Confirm",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 1300],
      "webhookId": "elevea-password-reset-confirm"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: password_reset_confirm (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { token, password } = json.body || {};\n  \n  if (!token || !password) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Token e nova senha s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  if (password.length < 6) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Senha deve ter no m√≠nimo 6 caracteres',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  if (token.length < 10) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Token inv√°lido ou expirado',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  const hashedPassword = 'hashed_' + Buffer.from(password).toString('base64');\n  \n  out.push({\n    json: {\n      success: true,\n      message: 'Senha redefinida com sucesso',\n      token: token,\n      passwordHash: hashedPassword,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-password-reset-confirm",
      "name": "üîë Code - Password Reset Confirm",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 1300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-password-reset-confirm",
      "name": "üì§ Respond - Password Reset Confirm",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [660, 1300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/client/plan",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-client-plan",
      "name": "üìä Webhook - Client Plan",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 1500],
      "webhookId": "elevea-client-plan"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: client_plan / get_client_plan_v2 (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug, email } = json.body || {};\n  \n  if (!siteSlug && !email) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug ou email √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      success: true,\n      siteSlug: siteSlug,\n      email: email,\n      needsClientData: true,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-client-plan",
      "name": "üìä Code - Client Plan",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 1500]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "clients", "mode": "list"},
        "filterByFormula": "=OR({siteSlug}='{{ $json.siteSlug }}', {email}='{{ $json.email }}')",
        "options": {}
      },
      "id": "airtable-search-client-plan",
      "name": "üóÑÔ∏è Airtable - Search Client Plan",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 1500]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "billing", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.fields.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-search-billing",
      "name": "üóÑÔ∏è Airtable - Search Billing",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [860, 1500]
    },
    {
      "parameters": {
        "jsCode": "// Processar dados completos do cliente com billing\nconst out = [];\nfor (const { json } of items) {\n  const client = json.fields || {};\n  const plan = client.plan || 'essential';\n  const isVip = plan === 'vip';\n  \n  const coreFeatures = ['basic-website', 'google-my-business'];\n  const vipFeatures = [\n    'ai-copywriter', 'auto-seo', 'lead-scoring', 'whatsapp-chatbot',\n    'appointment-scheduling', 'multi-language', 'ecommerce',\n    'premium-templates', 'white-label', 'audit-logs', 'feedback-system'\n  ];\n  \n  out.push({\n    json: {\n      success: true,\n      data: {\n        siteSlug: client.siteSlug,\n        email: client.email,\n        name: client.name,\n        plan: plan,\n        status: client.status || 'active',\n        features: isVip ? [...coreFeatures, ...vipFeatures] : coreFeatures,\n        isVip: isVip,\n        billing: {\n          provider: 'mercadopago',\n          preapproval_id: client.preapproval_id || '',\n          last_payment: client.last_payment || null,\n          amount: isVip ? 97 : 0,\n          payment_method: client.payment_method || null\n        },\n        limits: {\n          websites: isVip ? -1 : 1,\n          whatsapp_messages: isVip ? -1 : 100,\n          ai_requests: isVip ? -1 : 10,\n          storage: isVip ? 'unlimited' : '1GB'\n        },\n        createdAt: client.created_at,\n        updatedAt: client.updated_at || new Date().toISOString()\n      },\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-process-client-plan",
      "name": "üìä Code - Process Client Plan",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, 1500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-client-plan",
      "name": "üì§ Respond - Client Plan",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1260, 1500]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/client/status",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-client-status",
      "name": "üìä Webhook - Client Status",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 1700],
      "webhookId": "elevea-client-status"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: get_status / get_auth_status (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug } = json.body || {};\n  \n  if (!siteSlug) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({ json: { siteSlug, timestamp: new Date().toISOString() } });\n}\nreturn out;"
      },
      "id": "code-client-status",
      "name": "üìä Code - Client Status",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 1700]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "clients", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-search-client-status",
      "name": "üóÑÔ∏è Airtable - Search Client Status",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 1700]
    },
    {
      "parameters": {
        "jsCode": "// Retornar status do cliente\nconst out = [];\nfor (const { json } of items) {\n  const client = json.fields || {};\n  out.push({\n    json: {\n      success: true,\n      status: {\n        siteSlug: client.siteSlug,\n        status: client.status || 'active',\n        plan: client.plan || 'essential',\n        isActive: (client.status || 'active') === 'active',\n        isBlocked: (client.status || 'active') === 'blocked',\n        manualBlock: client.manual_block || false,\n        blockReason: client.block_reason || null,\n        lastPayment: client.last_payment || null\n      },\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-format-client-status",
      "name": "üìä Code - Format Client Status",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 1700]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-client-status",
      "name": "üì§ Respond - Client Status",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 1700]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/admin/toggle",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-admin-toggle",
      "name": "üîß Webhook - Admin Toggle",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 1900],
      "webhookId": "elevea-admin-toggle"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: admin_toggle / manual_block (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug, action, reason } = json.body || {};\n  \n  if (!siteSlug || !action) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug e action s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  const newStatus = action === 'block' ? 'blocked' : 'active';\n  const isBlocking = action === 'block';\n  \n  out.push({\n    json: {\n      siteSlug,\n      newStatus,\n      isBlocking,\n      reason: reason || (isBlocking ? 'Bloqueio manual via admin' : 'Desbloqueio manual via admin'),\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-admin-toggle",
      "name": "üîß Code - Admin Toggle",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 1900]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "clients", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-search-client-toggle",
      "name": "üóÑÔ∏è Airtable - Search Client Toggle",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 1900]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "clients", "mode": "list"},
        "id": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "status", "fieldValue": "={{ $json.newStatus }}"},
            {"fieldName": "manual_block", "fieldValue": "={{ $json.isBlocking }}"},
            {"fieldName": "block_reason", "fieldValue": "={{ $json.reason }}"},
            {"fieldName": "updated_at", "fieldValue": "={{ new Date().toISOString() }}"}
          ]
        }
      },
      "id": "airtable-update-client-toggle",
      "name": "üóÑÔ∏è Airtable - Update Client Toggle",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [860, 1900]
    },
    {
      "parameters": {
        "jsCode": "// Log audit da a√ß√£o admin\nconst out = [];\nfor (const { json } of items) {\n  out.push({\n    json: {\n      siteSlug: json.siteSlug,\n      action: json.isBlocking ? 'client_blocked' : 'client_unblocked',\n      user_email: 'admin@elevea.com',\n      user_role: 'admin',\n      details: JSON.stringify({ reason: json.reason, newStatus: json.newStatus }),\n      severity: 'warning',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-audit-admin-toggle",
      "name": "üìù Code - Audit Admin Toggle",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, 1900]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "audit_logs", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "action", "fieldValue": "={{ $json.action }}"},
            {"fieldName": "user_email", "fieldValue": "={{ $json.user_email }}"},
            {"fieldName": "user_role", "fieldValue": "={{ $json.user_role }}"},
            {"fieldName": "details", "fieldValue": "={{ $json.details }}"},
            {"fieldName": "severity", "fieldValue": "={{ $json.severity }}"}
          ]
        }
      },
      "id": "airtable-insert-audit-log",
      "name": "üóÑÔ∏è Airtable - Insert Audit Log",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1260, 1900]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Status do cliente atualizado', siteSlug: $json.siteSlug, newStatus: $json.newStatus, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-admin-toggle",
      "name": "üì§ Respond - Admin Toggle",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1460, 1900]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/mercadopago/webhook",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-mercadopago",
      "name": "üí∞ Webhook - Mercado Pago",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 2100],
      "webhookId": "elevea-mercadopago"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: mercadopago_webhook / mp_ (do GAS) - PROCESSAMENTO COMPLETO\nconst out = [];\nfor (const { json } of items) {\n  const body = json.body || {};\n  const { type, action, data } = body;\n  \n  // Eventos do Mercado Pago\n  const eventType = type || action;\n  \n  if (!eventType) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Evento n√£o identificado',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  // Processar diferentes tipos de eventos\n  if (eventType === 'subscription_authorized' || eventType === 'payment.approved') {\n    const siteSlug = data?.external_reference || data?.metadata?.site_slug || 'unknown';\n    out.push({\n      json: {\n        eventType: 'subscription_authorized',\n        siteSlug: siteSlug,\n        newPlan: 'vip',\n        newStatus: 'active',\n        preapprovalId: data?.id || data?.preapproval_id,\n        amount: data?.transaction_amount || 97,\n        paymentDate: new Date().toISOString(),\n        action: 'activate',\n        timestamp: new Date().toISOString()\n      }\n    });\n  } else if (eventType === 'subscription_paused' || eventType === 'subscription_cancelled' || eventType === 'payment.cancelled') {\n    const siteSlug = data?.external_reference || data?.metadata?.site_slug || 'unknown';\n    out.push({\n      json: {\n        eventType: eventType,\n        siteSlug: siteSlug,\n        newPlan: 'essential',\n        newStatus: 'blocked',\n        preapprovalId: data?.id || data?.preapproval_id,\n        action: 'block',\n        reason: 'Assinatura cancelada/pausada',\n        timestamp: new Date().toISOString()\n      }\n    });\n  } else if (eventType === 'payment_created' || eventType === 'payment.created') {\n    const siteSlug = data?.external_reference || data?.metadata?.site_slug || 'unknown';\n    out.push({\n      json: {\n        eventType: 'payment_created',\n        siteSlug: siteSlug,\n        paymentId: data?.id,\n        amount: data?.transaction_amount,\n        status: 'pending',\n        action: 'log_only',\n        timestamp: new Date().toISOString()\n      }\n    });\n  } else {\n    out.push({\n      json: {\n        eventType: 'unknown',\n        rawData: body,\n        action: 'log_only',\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n}\nreturn out;"
      },
      "id": "code-process-mercadopago",
      "name": "üí∞ Code - Process Mercado Pago",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 2100]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.action }}",
              "operation": "equals",
              "value2": "activate"
            }
          ]
        }
      },
      "id": "if-mp-action",
      "name": "üîÄ IF - MP Action",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [660, 2100]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "billing", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-search-billing-mp",
      "name": "üóÑÔ∏è Airtable - Search Billing MP",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [860, 2000]
    },
    {
      "parameters": {
        "jsCode": "// Preparar update ou insert de billing\nconst out = [];\nfor (const { json } of items) {\n  const hasRecord = json.id ? true : false;\n  out.push({\n    json: {\n      hasRecord,\n      recordId: json.id || null,\n      siteSlug: json.siteSlug,\n      preapprovalId: json.preapprovalId,\n      paymentDate: json.paymentDate,\n      amount: json.amount,\n      status: json.eventType === 'subscription_authorized' ? 'authorized' : 'paused',\n      provider: 'mercadopago'\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-prepare-billing-update",
      "name": "üìù Code - Prepare Billing Update",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, 2000]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.hasRecord }}",
              "value2": true
            }
          ]
        }
      },
      "id": "if-billing-exists",
      "name": "üîÄ IF - Billing Exists",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1260, 2000]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "billing", "mode": "list"},
        "id": "={{ $json.recordId }}",
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "preapproval_id", "fieldValue": "={{ $json.preapprovalId }}"},
            {"fieldName": "payment_date", "fieldValue": "={{ $json.paymentDate }}"},
            {"fieldName": "amount", "fieldValue": "={{ $json.amount }}"},
            {"fieldName": "status", "fieldValue": "={{ $json.status }}"},
            {"fieldName": "updated_at", "fieldValue": "={{ new Date().toISOString() }}"}
          ]
        }
      },
      "id": "airtable-update-billing",
      "name": "üóÑÔ∏è Airtable - Update Billing",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1460, 1900]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "billing", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "preapproval_id", "fieldValue": "={{ $json.preapprovalId }}"},
            {"fieldName": "payment_date", "fieldValue": "={{ $json.paymentDate }}"},
            {"fieldName": "amount", "fieldValue": "={{ $json.amount }}"},
            {"fieldName": "status", "fieldValue": "={{ $json.status }}"},
            {"fieldName": "provider", "fieldValue": "mercadopago"}
          ]
        }
      },
      "id": "airtable-insert-billing",
      "name": "üóÑÔ∏è Airtable - Insert Billing",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1460, 2100]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "clients", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-search-client-mp",
      "name": "üóÑÔ∏è Airtable - Search Client MP",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1660, 2000]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "clients", "mode": "list"},
        "id": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "plan", "fieldValue": "={{ $json.newPlan }}"},
            {"fieldName": "status", "fieldValue": "={{ $json.newStatus }}"},
            {"fieldName": "preapproval_id", "fieldValue": "={{ $json.preapprovalId }}"},
            {"fieldName": "last_payment", "fieldValue": "={{ $json.paymentDate }}"},
            {"fieldName": "updated_at", "fieldValue": "={{ new Date().toISOString() }}"}
          ]
        }
      },
      "id": "airtable-update-client-mp",
      "name": "üóÑÔ∏è Airtable - Update Client MP",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1860, 2000]
    },
    {
      "parameters": {
        "jsCode": "// Preparar notifica√ß√£o de mudan√ßa de plano\nconst out = [];\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  const isActivation = json.newStatus === 'active';\n  \n  out.push({\n    json: {\n      siteSlug: fields.siteSlug || json.siteSlug,\n      email: fields.email,\n      name: fields.name,\n      newPlan: json.newPlan,\n      newStatus: json.newStatus,\n      isActivation: isActivation,\n      emailSubject: isActivation ? 'üéâ Bem-vindo ao Plano VIP - ELEVEA' : '‚ö†Ô∏è Assinatura Cancelada - ELEVEA',\n      emailMessage: isActivation \n        ? 'Parab√©ns! Seu plano VIP foi ativado com sucesso. Agora voc√™ tem acesso a todas as funcionalidades premium!' \n        : 'Sua assinatura foi cancelada. Voc√™ foi movido para o plano Essential com funcionalidades limitadas.',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-prepare-mp-notification",
      "name": "üìß Code - Prepare MP Notification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2060, 2000]
    },
    {
      "parameters": {
        "url": "https://api.resend.com/emails",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"from\": \"noreply@elevea.com\",\n  \"to\": [ $json.email ],\n  \"subject\": $json.emailSubject,\n  \"html\": \"<div style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;'>\" +\n    \"<h2 style='color: #333; text-align: center;'>\" + $json.emailSubject + \"</h2>\" +\n    \"<p>Ol√° \" + ($json.name || 'Cliente') + \"!</p>\" +\n    \"<p>\" + $json.emailMessage + \"</p>\" +\n    \"<div style='background: #f8f9fa; padding: 20px; margin: 20px 0; border-radius: 5px;'>\" +\n      \"<p><strong>Detalhes:</strong></p>\" +\n      \"<ul>\" +\n        \"<li>Site: \" + $json.siteSlug + \"</li>\" +\n        \"<li>Plano: \" + $json.newPlan.toUpperCase() + \"</li>\" +\n        \"<li>Status: \" + ($json.isActivation ? 'Ativo ‚úÖ' : 'Bloqueado ‚ùå') + \"</li>\" +\n      \"</ul>\" +\n    \"</div>\" +\n    ($json.isActivation ? \n      \"<div style='text-align: center; margin: 30px 0;'>\" +\n        \"<a href='https://agenciaelevea.netlify.app/dashboard' style='background: #28a745; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;'>Acessar Dashboard</a>\" +\n      \"</div>\" : \n      \"<div style='text-align: center; margin: 30px 0;'>\" +\n        \"<a href='https://agenciaelevea.netlify.app/upgrade' style='background: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;'>Reativar Plano VIP</a>\" +\n      \"</div>\"\n    ) +\n    \"<hr style='margin: 30px 0; border: none; border-top: 1px solid #eee;'>\" +\n    \"<p style='color: #666; font-size: 12px; text-align: center;'>Equipe ELEVEA</p>\" +\n    \"</div>\"\n} }}",
        "options": {}
      },
      "id": "http-resend-mp-notification",
      "name": "üìß HTTP - Resend MP Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2260, 2000]
    },
    {
      "parameters": {
        "url": "https://api.telegram.org/bot{{ $env.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"chat_id\": $env.TELEGRAM_CHAT_ID,\n  \"text\": \"üí∞ Mercado Pago - \" + ($json.isActivation ? 'ATIVA√á√ÉO' : 'CANCELAMENTO') + \"\\n\\n\" +\n    \"Site: \" + $json.siteSlug + \"\\n\" +\n    \"Plano: \" + $json.newPlan.toUpperCase() + \"\\n\" +\n    \"Status: \" + $json.newStatus + \"\\n\" +\n    \"Email: \" + $json.email + \"\\n\" +\n    \"Timestamp: \" + new Date().toISOString(),\n  \"parse_mode\": \"HTML\"\n} }}",
        "options": {}
      },
      "id": "http-telegram-mp-alert",
      "name": "üì± HTTP - Telegram MP Alert",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2460, 2000]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.isActivation }}",
              "value2": true
            }
          ]
        }
      },
      "id": "if-mp-activation",
      "name": "üîÄ IF - MP Activation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2660, 2000]
    },
    {
      "parameters": {
        "url": "https://api.netlify.com/build_hooks/{{ $env.NETLIFY_BUILD_HOOK }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"trigger_title\": \"Site ativado: \" + $json.siteSlug,\n  \"trigger_branch\": \"main\"\n} }}",
        "options": {}
      },
      "id": "http-netlify-rebuild-activate",
      "name": "üèóÔ∏è HTTP - Netlify Rebuild (Activate)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2860, 1900]
    },
    {
      "parameters": {
        "jsCode": "// Log de bloqueio do site\nconst out = [];\nfor (const { json } of items) {\n  out.push({\n    json: {\n      siteSlug: json.siteSlug,\n      action: 'site_blocked_payment_failed',\n      user_email: 'system',\n      user_role: 'system',\n      details: JSON.stringify({ reason: json.reason, eventType: json.eventType }),\n      severity: 'critical',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-audit-site-blocked",
      "name": "üìù Code - Audit Site Blocked",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2860, 2100]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "audit_logs", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "action", "fieldValue": "={{ $json.action }}"},
            {"fieldName": "user_email", "fieldValue": "system"},
            {"fieldName": "user_role", "fieldValue": "system"},
            {"fieldName": "details", "fieldValue": "={{ $json.details }}"},
            {"fieldName": "severity", "fieldValue": "={{ $json.severity }}"}
          ]
        }
      },
      "id": "airtable-insert-audit-mp",
      "name": "üóÑÔ∏è Airtable - Insert Audit MP",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [3060, 2000]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Webhook Mercado Pago processado', siteSlug: $json.siteSlug, action: $json.action, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-mercadopago",
      "name": "üì§ Respond - Mercado Pago",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [3260, 2000]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/whatsapp/webhook/verify",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-wa-verify",
      "name": "üì± Webhook - WA Verify",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 2300],
      "webhookId": "elevea-wa-verify"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: wa_webhook_verify (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const query = json.query || {};\n  const mode = query['hub.mode'];\n  const token = query['hub.verify_token'];\n  const challenge = query['hub.challenge'];\n  \n  if (mode === 'subscribe' && token === 'ELEVEA_VERIFY_TOKEN') {\n    out.push({\n      json: {\n        success: true,\n        challenge: challenge,\n        verified: true\n      }\n    });\n  } else {\n    out.push({\n      json: {\n        success: false,\n        error: 'Verification failed'\n      }\n    });\n  }\n}\nreturn out;"
      },
      "id": "code-wa-verify",
      "name": "üì± Code - WA Verify",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 2300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.challenge || { success: false } }}",
        "options": {}
      },
      "id": "respond-wa-verify",
      "name": "üì§ Respond - WA Verify",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [660, 2300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/whatsapp/send-bulk",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-wa-send-bulk",
      "name": "üì± Webhook - WA Send Bulk (Oficial)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 2500],
      "webhookId": "elevea-wa-send-bulk"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: wa_send / wa_send_text / wa_send_template (do GAS) - API OFICIAL\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug, phones, message, template, templateName } = json.body || {};\n  \n  if (!siteSlug || (!phones || phones.length === 0)) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug e phones s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  // Normalizar telefones\n  const normalizePhone = (phone) => {\n    const digits = phone.replace(/\\D/g, '');\n    if (digits.startsWith('55')) return digits;\n    if (digits.length === 11) return '55' + digits;\n    if (digits.length === 10) return '55' + digits;\n    return digits;\n  };\n  \n  const normalizedPhones = phones.map(p => normalizePhone(p));\n  \n  out.push({\n    json: {\n      success: true,\n      siteSlug,\n      phones: normalizedPhones,\n      message: message || 'Mensagem da ELEVEA',\n      template: template || null,\n      templateName: templateName || null,\n      useTemplate: !!template || !!templateName,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-wa-send-bulk",
      "name": "üì± Code - WA Send Bulk",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 2500]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "clients", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-check-client-wa-bulk",
      "name": "üóÑÔ∏è Airtable - Check Client WA Bulk",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 2500]
    },
    {
      "parameters": {
        "jsCode": "// Validar se cliente pode enviar WhatsApp (limites)\nconst out = [];\nfor (const { json } of items) {\n  const client = json.fields || {};\n  const plan = client.plan || 'essential';\n  const isVip = plan === 'vip';\n  const status = client.status || 'active';\n  \n  if (status !== 'active') {\n    out.push({\n      json: {\n        success: false,\n        error: 'Cliente bloqueado ou inativo',\n        canSend: false,\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  // Essential: limite de 100 mensagens/m√™s\n  // VIP: ilimitado\n  const canSend = isVip || true; // TODO: implementar contador mensal\n  \n  out.push({\n    json: {\n      success: true,\n      canSend: canSend,\n      siteSlug: client.siteSlug,\n      plan: plan,\n      isVip: isVip,\n      phones: json.phones,\n      message: json.message,\n      useTemplate: json.useTemplate,\n      templateName: json.templateName,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-validate-wa-limits",
      "name": "‚úÖ Code - Validate WA Limits",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 2500]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {"value1": "={{ $json.canSend }}", "value2": true}
          ]
        }
      },
      "id": "if-can-send-wa",
      "name": "üîÄ IF - Can Send WA",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1060, 2500]
    },
    {
      "parameters": {
        "jsCode": "// Preparar requests individuais para cada telefone\nconst out = [];\nconst { phones, message, useTemplate, templateName, siteSlug } = items[0].json;\n\nfor (const phone of phones) {\n  out.push({\n    json: {\n      phone,\n      message,\n      siteSlug,\n      useTemplate,\n      templateName,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-split-wa-messages",
      "name": "üì± Code - Split WA Messages",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1260, 2500]
    },
    {
      "parameters": {
        "url": "https://graph.facebook.com/v18.0/{{ $env.WHATSAPP_PHONE_NUMBER_ID }}/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.useTemplate ? {\n  \"messaging_product\": \"whatsapp\",\n  \"to\": $json.phone,\n  \"type\": \"template\",\n  \"template\": {\n    \"name\": $json.templateName || \"hello_world\",\n    \"language\": { \"code\": \"pt_BR\" }\n  }\n} : {\n  \"messaging_product\": \"whatsapp\",\n  \"to\": $json.phone,\n  \"type\": \"text\",\n  \"text\": { \"body\": $json.message }\n} }}",
        "options": {}
      },
      "id": "http-wa-send-official",
      "name": "üì± HTTP - WA Send Official",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1460, 2500]
    },
    {
      "parameters": {
        "jsCode": "// Salvar mensagem enviada no hist√≥rico\nconst out = [];\nfor (const { json } of items) {\n  const waResponse = json;\n  out.push({\n    json: {\n      messageId: waResponse.messages?.[0]?.id || 'unknown',\n      siteSlug: json.siteSlug,\n      phone: json.phone,\n      messageText: json.message,\n      direction: 'outgoing',\n      status: waResponse.messages?.[0]?.message_status || 'sent',\n      apiProvider: 'official',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-prepare-wa-save",
      "name": "üìù Code - Prepare WA Save",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1660, 2500]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "whatsapp_messages", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "message_id", "fieldValue": "={{ $json.messageId }}"},
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "phone_number", "fieldValue": "={{ $json.phone }}"},
            {"fieldName": "message_text", "fieldValue": "={{ $json.messageText }}"},
            {"fieldName": "direction", "fieldValue": "outgoing"},
            {"fieldName": "status", "fieldValue": "={{ $json.status }}"},
            {"fieldName": "api_provider", "fieldValue": "official"}
          ]
        }
      },
      "id": "airtable-insert-wa-message",
      "name": "üóÑÔ∏è Airtable - Insert WA Message",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1860, 2500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Mensagens WhatsApp enviadas', count: $json.phones?.length || 1, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-wa-send-bulk",
      "name": "üì§ Respond - WA Send Bulk",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [2060, 2500]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/whatsapp/send-ai",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-wa-send-ai",
      "name": "ü§ñ Webhook - WA Send AI (Evolution)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 2700],
      "webhookId": "elevea-wa-send-ai"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: wa_send_ai - Evolution API com IA\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug, phone, message, useAI, context } = json.body || {};\n  \n  if (!siteSlug || !phone || !message) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug, phone e message s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  // Normalizar telefone\n  const digits = phone.replace(/\\D/g, '');\n  const normalizedPhone = digits.startsWith('55') ? digits : '55' + digits;\n  \n  out.push({\n    json: {\n      success: true,\n      siteSlug,\n      phone: normalizedPhone,\n      message,\n      useAI: useAI !== false,\n      context: context || 'Cliente da ELEVEA',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-wa-send-ai",
      "name": "ü§ñ Code - WA Send AI",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 2700]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "clients", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-check-client-wa-ai",
      "name": "üóÑÔ∏è Airtable - Check Client WA AI",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 2700]
    },
    {
      "parameters": {
        "jsCode": "// Validar se cliente VIP (IA requer VIP)\nconst out = [];\nfor (const { json } of items) {\n  const client = json.fields || {};\n  const plan = client.plan || 'essential';\n  const isVip = plan === 'vip';\n  const useAI = json.useAI && isVip;\n  \n  out.push({\n    json: {\n      success: true,\n      siteSlug: client.siteSlug,\n      phone: json.phone,\n      message: json.message,\n      useAI: useAI,\n      canUseAI: isVip,\n      context: json.context,\n      businessName: client.name || 'ELEVEA',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-validate-wa-ai",
      "name": "‚úÖ Code - Validate WA AI",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 2700]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {"value1": "={{ $json.useAI }}", "value2": true}
          ]
        }
      },
      "id": "if-use-ai",
      "name": "üîÄ IF - Use AI",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1060, 2700]
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"model\": \"gpt-4\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"Voc√™ √© um assistente virtual da empresa \" + $json.businessName + \". Seja educado, profissional e prestativo. Responda em portugu√™s do Brasil.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": $json.message\n    }\n  ],\n  \"temperature\": 0.7,\n  \"max_tokens\": 500\n} }}",
        "options": {}
      },
      "id": "http-openai-chat",
      "name": "ü§ñ HTTP - OpenAI Chat",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1260, 2600]
    },
    {
      "parameters": {
        "jsCode": "// Extrair resposta da IA\nconst out = [];\nfor (const { json } of items) {\n  const aiResponse = json.choices?.[0]?.message?.content || json.message;\n  out.push({\n    json: {\n      phone: json.phone,\n      siteSlug: json.siteSlug,\n      message: aiResponse,\n      isAIGenerated: true,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-format-ai-response",
      "name": "ü§ñ Code - Format AI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1460, 2600]
    },
    {
      "parameters": {
        "url": "https://{{ $env.EVOLUTION_API_URL }}/message/sendText/{{ $env.EVOLUTION_INSTANCE }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"number\": $json.phone,\n  \"text\": $json.message\n} }}",
        "options": {}
      },
      "id": "http-evolution-send-ai",
      "name": "ü§ñ HTTP - Evolution Send AI",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1660, 2600]
    },
    {
      "parameters": {
        "url": "https://{{ $env.EVOLUTION_API_URL }}/message/sendText/{{ $env.EVOLUTION_INSTANCE }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"number\": $json.phone,\n  \"text\": $json.message\n} }}",
        "options": {}
      },
      "id": "http-evolution-send-direct",
      "name": "üì± HTTP - Evolution Send Direct",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1660, 2800]
    },
    {
      "parameters": {
        "jsCode": "// Salvar mensagem Evolution no hist√≥rico\nconst out = [];\nfor (const { json } of items) {\n  out.push({\n    json: {\n      messageId: json.key?.id || 'evo_' + Date.now(),\n      siteSlug: json.siteSlug,\n      phone: json.phone,\n      messageText: json.message,\n      direction: 'outgoing',\n      status: 'sent',\n      apiProvider: 'evolution',\n      metadata: JSON.stringify({ isAIGenerated: json.isAIGenerated || false }),\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-prepare-wa-evolution-save",
      "name": "üìù Code - Prepare WA Evolution Save",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1860, 2700]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "whatsapp_messages", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "message_id", "fieldValue": "={{ $json.messageId }}"},
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "phone_number", "fieldValue": "={{ $json.phone }}"},
            {"fieldName": "message_text", "fieldValue": "={{ $json.messageText }}"},
            {"fieldName": "direction", "fieldValue": "outgoing"},
            {"fieldName": "status", "fieldValue": "sent"},
            {"fieldName": "api_provider", "fieldValue": "evolution"},
            {"fieldName": "metadata", "fieldValue": "={{ $json.metadata }}"}
          ]
        }
      },
      "id": "airtable-insert-wa-evolution",
      "name": "üóÑÔ∏è Airtable - Insert WA Evolution",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [2060, 2700]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Mensagem WhatsApp AI enviada', phone: $json.phone, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-wa-send-ai",
      "name": "üì§ Respond - WA Send AI",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [2260, 2700]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/whatsapp/evolution-webhook",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-wa-evolution-incoming",
      "name": "üì± Webhook - WA Evolution Incoming",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 2900],
      "webhookId": "elevea-wa-evolution-incoming"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: wa_incoming / whatsapp_webhook (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const body = json.body || {};\n  const data = body.data || body;\n  \n  const phone = data.key?.remoteJid?.replace('@s.whatsapp.net', '') || data.from?.replace('@s.whatsapp.net', '');\n  const messageText = data.message?.conversation || data.message?.extendedTextMessage?.text || '';\n  const messageId = data.key?.id || 'unknown';\n  \n  if (!phone || !messageText) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Mensagem inv√°lida',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  // Normalizar telefone\n  const normalizedPhone = phone.startsWith('55') ? phone : '55' + phone;\n  \n  out.push({\n    json: {\n      success: true,\n      messageId,\n      phone: normalizedPhone,\n      message: messageText,\n      needsResponse: true,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-wa-incoming",
      "name": "üì± Code - WA Incoming",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 2900]
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: resolveSiteFromPhoneId_ (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  // TODO: Implementar busca do site pelo telefone no Airtable\n  // Por enquanto, retornar 'default'\n  out.push({\n    json: {\n      ...json,\n      siteSlug: 'default', // TODO: buscar no Airtable whatsapp_contacts\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-resolve-site-from-phone",
      "name": "üîç Code - Resolve Site From Phone",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [660, 2900]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "clients", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-check-client-wa-incoming",
      "name": "üóÑÔ∏è Airtable - Check Client WA Incoming",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [860, 2900]
    },
    {
      "parameters": {
        "jsCode": "// Verificar se cliente tem IA habilitada (VIP)\nconst out = [];\nfor (const { json } of items) {\n  const client = json.fields || {};\n  const isVip = (client.plan || 'essential') === 'vip';\n  \n  out.push({\n    json: {\n      phone: json.phone,\n      message: json.message,\n      siteSlug: client.siteSlug,\n      canUseAI: isVip,\n      businessName: client.name || 'ELEVEA',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-check-ai-permission",
      "name": "‚úÖ Code - Check AI Permission",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, 2900]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {"value1": "={{ $json.canUseAI }}", "value2": true}
          ]
        }
      },
      "id": "if-can-use-ai",
      "name": "üîÄ IF - Can Use AI",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1260, 2900]
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"model\": \"gpt-4\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"Voc√™ √© um assistente virtual da empresa \" + $json.businessName + \". Seja educado, profissional e prestativo. Responda de forma clara e objetiva em portugu√™s do Brasil.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": $json.message\n    }\n  ],\n  \"temperature\": 0.7,\n  \"max_tokens\": 500\n} }}",
        "options": {}
      },
      "id": "http-openai-incoming",
      "name": "ü§ñ HTTP - OpenAI Incoming",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1460, 2800]
    },
    {
      "parameters": {
        "jsCode": "// Extrair resposta da IA\nconst out = [];\nfor (const { json } of items) {\n  const aiResponse = json.choices?.[0]?.message?.content || 'Desculpe, n√£o consegui processar sua mensagem.';\n  out.push({\n    json: {\n      phone: json.phone,\n      siteSlug: json.siteSlug,\n      message: aiResponse,\n      isAIGenerated: true,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-format-ai-incoming",
      "name": "ü§ñ Code - Format AI Incoming",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1660, 2800]
    },
    {
      "parameters": {
        "jsCode": "// Resposta padr√£o sem IA\nconst out = [];\nfor (const { json } of items) {\n  out.push({\n    json: {\n      phone: json.phone,\n      siteSlug: json.siteSlug,\n      message: 'Obrigado pela mensagem! Em breve entraremos em contato. Para upgrade e acesso a respostas com IA, visite agenciaelevea.com/upgrade',\n      isAIGenerated: false,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-default-response",
      "name": "üí¨ Code - Default Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1660, 3000]
    },
    {
      "parameters": {
        "url": "https://{{ $env.EVOLUTION_API_URL }}/message/sendText/{{ $env.EVOLUTION_INSTANCE }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"number\": $json.phone,\n  \"text\": $json.message\n} }}",
        "options": {}
      },
      "id": "http-evolution-send-response",
      "name": "üì± HTTP - Evolution Send Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1860, 2900]
    },
    {
      "parameters": {
        "jsCode": "// Salvar mensagem recebida + resposta\nconst out = [];\nfor (const { json } of items) {\n  // Mensagem recebida\n  out.push({\n    json: {\n      messageId: json.messageId || 'inc_' + Date.now(),\n      siteSlug: json.siteSlug,\n      phone: json.phone,\n      messageText: json.originalMessage || json.message,\n      direction: 'incoming',\n      status: 'received',\n      apiProvider: 'evolution',\n      timestamp: new Date().toISOString()\n    }\n  });\n  \n  // Mensagem enviada (resposta)\n  out.push({\n    json: {\n      messageId: json.key?.id || 'out_' + Date.now(),\n      siteSlug: json.siteSlug,\n      phone: json.phone,\n      messageText: json.message,\n      direction: 'outgoing',\n      status: 'sent',\n      apiProvider: 'evolution',\n      metadata: JSON.stringify({ isAIGenerated: json.isAIGenerated }),\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-prepare-wa-conversation-save",
      "name": "üìù Code - Prepare WA Conversation Save",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2060, 2900]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "whatsapp_messages", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "message_id", "fieldValue": "={{ $json.messageId }}"},
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "phone_number", "fieldValue": "={{ $json.phone }}"},
            {"fieldName": "message_text", "fieldValue": "={{ $json.messageText }}"},
            {"fieldName": "direction", "fieldValue": "={{ $json.direction }}"},
            {"fieldName": "status", "fieldValue": "={{ $json.status }}"},
            {"fieldName": "api_provider", "fieldValue": "evolution"},
            {"fieldName": "metadata", "fieldValue": "={{ $json.metadata }}"}
          ]
        }
      },
      "id": "airtable-insert-wa-conversation",
      "name": "üóÑÔ∏è Airtable - Insert WA Conversation",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [2260, 2900]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Mensagem processada e respondida', timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-wa-evolution-incoming",
      "name": "üì§ Respond - WA Evolution Incoming",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [2460, 2900]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/whatsapp/messages",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-wa-list-messages",
      "name": "üì± Webhook - WA List Messages",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 3100],
      "webhookId": "elevea-wa-list-messages"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: wa_list_messages / listWhatsAppMessages_ (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const query = json.query || {};\n  const { siteSlug, phone, limit } = query;\n  \n  out.push({\n    json: {\n      siteSlug: siteSlug || 'all',\n      phone: phone || null,\n      limit: parseInt(limit) || 100,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-wa-list-messages",
      "name": "üì± Code - WA List Messages",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 3100]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "whatsapp_messages", "mode": "list"},
        "limit": "={{ $json.limit }}",
        "options": {
          "sort": [
            {"field": "created_at", "direction": "desc"}
          ]
        }
      },
      "id": "airtable-list-wa-messages",
      "name": "üóÑÔ∏è Airtable - List WA Messages",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 3100]
    },
    {
      "parameters": {
        "jsCode": "// Formatar lista de mensagens\nconst out = [];\nconst messages = [];\n\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  messages.push({\n    messageId: fields.message_id,\n    siteSlug: fields.site_slug,\n    phone: fields.phone_number,\n    message: fields.message_text,\n    direction: fields.direction,\n    status: fields.status,\n    apiProvider: fields.api_provider,\n    createdAt: fields.created_at\n  });\n}\n\nout.push({\n  json: {\n    success: true,\n    messages: messages,\n    count: messages.length,\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-format-wa-messages-list",
      "name": "üì± Code - Format WA Messages List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 3100]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-wa-list-messages",
      "name": "üì§ Respond - WA List Messages",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 3100]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/whatsapp/templates",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-wa-templates",
      "name": "üì± Webhook - WA Templates",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 3300],
      "webhookId": "elevea-wa-templates"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: wa_get_templates (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const query = json.query || {};\n  const { siteSlug } = query;\n  \n  out.push({\n    json: {\n      siteSlug: siteSlug || 'all',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-wa-templates",
      "name": "üì± Code - WA Templates",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 3300]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "whatsapp_templates", "mode": "list"},
        "options": {}
      },
      "id": "airtable-list-wa-templates",
      "name": "üóÑÔ∏è Airtable - List WA Templates",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 3300]
    },
    {
      "parameters": {
        "jsCode": "// Formatar lista de templates\nconst out = [];\nconst templates = [];\n\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  templates.push({\n    templateId: fields.template_id,\n    name: fields.name,\n    content: fields.content,\n    category: fields.category,\n    language: fields.language,\n    status: fields.status,\n    variables: fields.variables ? JSON.parse(fields.variables) : []\n  });\n}\n\nout.push({\n  json: {\n    success: true,\n    templates: templates,\n    count: templates.length,\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-format-wa-templates",
      "name": "üì± Code - Format WA Templates",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 3300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-wa-templates",
      "name": "üì§ Respond - WA Templates",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 3300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/google/save-credentials",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-google-credentials",
      "name": "üåü Webhook - Google Save Credentials",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 3500],
      "webhookId": "elevea-google-credentials"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: gmb_save_credentials / gmbSaveCredentials_ / setup_google_credentials (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug, code, accessToken, refreshToken, expiresIn } = json.body || {};\n  \n  if (!siteSlug || (!code && !accessToken)) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug e (code ou accessToken) s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  const expiresAt = new Date(Date.now() + (expiresIn || 3600) * 1000).toISOString();\n  \n  out.push({\n    json: {\n      success: true,\n      siteSlug,\n      accessToken: accessToken || 'TOKEN_FROM_CODE',\n      refreshToken: refreshToken || 'REFRESH_TOKEN',\n      expiresAt,\n      provider: 'google',\n      status: 'active',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-google-save-credentials",
      "name": "üåü Code - Google Save Credentials",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 3500]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "google_credentials", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "access_token", "fieldValue": "={{ $json.accessToken }}"},
            {"fieldName": "refresh_token", "fieldValue": "={{ $json.refreshToken }}"},
            {"fieldName": "expires_at", "fieldValue": "={{ $json.expiresAt }}"},
            {"fieldName": "status", "fieldValue": "active"}
          ]
        }
      },
      "id": "airtable-insert-google-credentials",
      "name": "üóÑÔ∏è Airtable - Insert Google Credentials",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 3500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Credenciais Google salvas', siteSlug: $json.siteSlug, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-google-credentials",
      "name": "üì§ Respond - Google Credentials",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [860, 3500]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/google/reviews",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-google-reviews",
      "name": "üåü Webhook - Google Reviews",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 3700],
      "webhookId": "elevea-google-reviews"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: google_reviews / gmb_get_reviews / gmbGetReviews_ (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const query = json.query || {};\n  const { siteSlug } = query;\n  \n  if (!siteSlug) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      siteSlug,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-google-reviews",
      "name": "üåü Code - Google Reviews",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 3700]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "google_reviews", "mode": "list"},
        "options": {
          "sort": [
            {"field": "review_date", "direction": "desc"}
          ]
        }
      },
      "id": "airtable-list-google-reviews",
      "name": "üóÑÔ∏è Airtable - List Google Reviews",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 3700]
    },
    {
      "parameters": {
        "jsCode": "// Formatar lista de reviews\nconst out = [];\nconst reviews = [];\n\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  reviews.push({\n    reviewId: fields.review_id,\n    siteSlug: fields.site_slug,\n    rating: fields.rating,\n    comment: fields.comment,\n    authorName: fields.author_name,\n    reviewDate: fields.review_date,\n    reply: fields.reply,\n    syncedAt: fields.synced_at\n  });\n}\n\nout.push({\n  json: {\n    success: true,\n    reviews: reviews,\n    count: reviews.length,\n    averageRating: reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length || 0,\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-format-google-reviews",
      "name": "üåü Code - Format Google Reviews",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 3700]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-google-reviews",
      "name": "üì§ Respond - Google Reviews",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 3700]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/feedback/submit",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-feedback-submit",
      "name": "üí¨ Webhook - Feedback Submit",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 3900],
      "webhookId": "elevea-feedback-submit"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: feedback (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug, clientName, clientEmail, rating, comment } = json.body || {};\n  \n  if (!siteSlug || !clientName || !rating) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug, clientName e rating s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  if (rating < 1 || rating > 5) {\n    out.push({\n      json: {\n        success: false,\n        error: 'rating deve ser entre 1 e 5',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      siteSlug,\n      clientName,\n      clientEmail: clientEmail || null,\n      rating,\n      comment: comment || '',\n      status: 'pending',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-feedback-submit",
      "name": "üí¨ Code - Feedback Submit",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 3900]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "feedbacks", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "client_name", "fieldValue": "={{ $json.clientName }}"},
            {"fieldName": "client_email", "fieldValue": "={{ $json.clientEmail }}"},
            {"fieldName": "rating", "fieldValue": "={{ $json.rating }}"},
            {"fieldName": "comment", "fieldValue": "={{ $json.comment }}"},
            {"fieldName": "status", "fieldValue": "pending"}
          ]
        }
      },
      "id": "airtable-insert-feedback",
      "name": "üóÑÔ∏è Airtable - Insert Feedback",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 3900]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Feedback enviado com sucesso! Obrigado pela avalia√ß√£o.', timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-feedback-submit",
      "name": "üì§ Respond - Feedback Submit",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [860, 3900]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/feedback/list",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-feedback-list",
      "name": "üí¨ Webhook - Feedback List",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 4100],
      "webhookId": "elevea-feedback-list"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: list_feedbacks_secure (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const query = json.query || {};\n  const { siteSlug, status } = query;\n  \n  out.push({\n    json: {\n      siteSlug: siteSlug || 'all',\n      status: status || 'all',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-feedback-list",
      "name": "üí¨ Code - Feedback List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 4100]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "feedbacks", "mode": "list"},
        "options": {
          "sort": [
            {"field": "created_at", "direction": "desc"}
          ]
        }
      },
      "id": "airtable-list-feedbacks",
      "name": "üóÑÔ∏è Airtable - List Feedbacks",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 4100]
    },
    {
      "parameters": {
        "jsCode": "// Formatar lista de feedbacks\nconst out = [];\nconst feedbacks = [];\n\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  feedbacks.push({\n    feedbackId: json.id,\n    siteSlug: fields.site_slug,\n    clientName: fields.client_name,\n    clientEmail: fields.client_email,\n    rating: fields.rating,\n    comment: fields.comment,\n    status: fields.status,\n    approvedBy: fields.approved_by,\n    approvedAt: fields.approved_at,\n    published: fields.published,\n    createdAt: fields.created_at\n  });\n}\n\nout.push({\n  json: {\n    success: true,\n    feedbacks: feedbacks,\n    count: feedbacks.length,\n    averageRating: feedbacks.reduce((sum, f) => sum + f.rating, 0) / feedbacks.length || 0,\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-format-feedbacks-list",
      "name": "üí¨ Code - Format Feedbacks List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 4100]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-feedback-list",
      "name": "üì§ Respond - Feedback List",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 4100]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/feedback/approve",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-feedback-approve",
      "name": "üí¨ Webhook - Feedback Approve",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 4300],
      "webhookId": "elevea-feedback-approve"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: feedback_set_approval (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { feedbackId, approve, adminEmail } = json.body || {};\n  \n  if (!feedbackId) {\n    out.push({\n      json: {\n        success: false,\n        error: 'feedbackId √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  const newStatus = approve ? 'approved' : 'rejected';\n  \n  out.push({\n    json: {\n      feedbackId,\n      newStatus,\n      approvedBy: adminEmail || 'admin@elevea.com',\n      approvedAt: new Date().toISOString(),\n      shouldPublish: approve,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-feedback-approve",
      "name": "üí¨ Code - Feedback Approve",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 4300]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "feedbacks", "mode": "list"},
        "id": "={{ $json.feedbackId }}",
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "status", "fieldValue": "={{ $json.newStatus }}"},
            {"fieldName": "approved_by", "fieldValue": "={{ $json.approvedBy }}"},
            {"fieldName": "approved_at", "fieldValue": "={{ $json.approvedAt }}"},
            {"fieldName": "published", "fieldValue": "={{ $json.shouldPublish }}"}
          ]
        }
      },
      "id": "airtable-update-feedback-approval",
      "name": "üóÑÔ∏è Airtable - Update Feedback Approval",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 4300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {"value1": "={{ $json.shouldPublish }}", "value2": true}
          ]
        }
      },
      "id": "if-should-publish-feedback",
      "name": "üîÄ IF - Should Publish Feedback",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [860, 4300]
    },
    {
      "parameters": {
        "url": "https://api.netlify.com/build_hooks/{{ $env.NETLIFY_BUILD_HOOK }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"trigger_title\": \"Feedback aprovado e publicado\",\n  \"trigger_branch\": \"main\"\n} }}",
        "options": {}
      },
      "id": "http-netlify-publish-feedback",
      "name": "üèóÔ∏è HTTP - Netlify Publish Feedback",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1060, 4200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Feedback aprovado', feedbackId: $json.feedbackId, published: $json.shouldPublish, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-feedback-approve",
      "name": "üì§ Respond - Feedback Approve",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1260, 4300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/leads/capture",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-leads-capture",
      "name": "üéØ Webhook - Leads Capture",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 4500],
      "webhookId": "elevea-leads-capture"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: lead_new (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug, name, email, phone, message, source } = json.body || {};\n  \n  if (!siteSlug || !name) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug e name s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  // Calcular lead score (VIP feature)\n  let score = 0;\n  if (email) score += 30;\n  if (phone) score += 30;\n  if (message && message.length > 50) score += 20;\n  if (source === 'google') score += 20;\n  \n  out.push({\n    json: {\n      siteSlug,\n      name,\n      email: email || null,\n      phone: phone || null,\n      message: message || '',\n      source: source || 'website',\n      status: 'new',\n      score: score,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-leads-capture",
      "name": "üéØ Code - Leads Capture",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 4500]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "leads", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "name", "fieldValue": "={{ $json.name }}"},
            {"fieldName": "email", "fieldValue": "={{ $json.email }}"},
            {"fieldName": "phone", "fieldValue": "={{ $json.phone }}"},
            {"fieldName": "message", "fieldValue": "={{ $json.message }}"},
            {"fieldName": "source", "fieldValue": "={{ $json.source }}"},
            {"fieldName": "status", "fieldValue": "new"},
            {"fieldName": "score", "fieldValue": "={{ $json.score }}"}
          ]
        }
      },
      "id": "airtable-insert-lead",
      "name": "üóÑÔ∏è Airtable - Insert Lead",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 4500]
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: recordEvent_ (do GAS) - Registrar evento analytics\nconst out = [];\nfor (const { json } of items) {\n  out.push({\n    json: {\n      siteSlug: json.siteSlug,\n      eventType: 'lead_captured',\n      eventData: JSON.stringify({\n        name: json.name,\n        email: json.email,\n        phone: json.phone,\n        source: json.source,\n        score: json.score\n      }),\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-analytics-lead-captured",
      "name": "üìä Code - Analytics Lead Captured",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 4500]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "analytics_events", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "event_type", "fieldValue": "lead_captured"},
            {"fieldName": "event_data", "fieldValue": "={{ $json.eventData }}"}
          ]
        }
      },
      "id": "airtable-insert-analytics-lead",
      "name": "üóÑÔ∏è Airtable - Insert Analytics Lead",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1060, 4500]
    },
    {
      "parameters": {
        "url": "https://api.telegram.org/bot{{ $env.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"chat_id\": $env.TELEGRAM_CHAT_ID,\n  \"text\": \"üéØ NOVO LEAD!\\n\\n\" +\n    \"Site: \" + $json.siteSlug + \"\\n\" +\n    \"Nome: \" + $json.name + \"\\n\" +\n    \"Email: \" + ($json.email || 'N/A') + \"\\n\" +\n    \"Telefone: \" + ($json.phone || 'N/A') + \"\\n\" +\n    \"Fonte: \" + $json.source + \"\\n\" +\n    \"Score: \" + $json.score + \"/100\\n\" +\n    \"Mensagem: \" + ($json.message || 'N/A'),\n  \"parse_mode\": \"HTML\"\n} }}",
        "options": {}
      },
      "id": "http-telegram-lead-alert",
      "name": "üì± HTTP - Telegram Lead Alert",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1260, 4500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Lead capturado com sucesso!', leadId: $json.id, score: $json.score, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-leads-capture",
      "name": "üì§ Respond - Leads Capture",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1460, 4500]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/leads/list",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-leads-list",
      "name": "üéØ Webhook - Leads List",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 4700],
      "webhookId": "elevea-leads-list"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: list_leads (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const query = json.query || {};\n  const { siteSlug, status, limit } = query;\n  \n  out.push({\n    json: {\n      siteSlug: siteSlug || 'all',\n      status: status || 'all',\n      limit: parseInt(limit) || 100,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-leads-list",
      "name": "üéØ Code - Leads List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 4700]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "leads", "mode": "list"},
        "limit": "={{ $json.limit }}",
        "options": {
          "sort": [
            {"field": "created_at", "direction": "desc"}
          ]
        }
      },
      "id": "airtable-list-leads",
      "name": "üóÑÔ∏è Airtable - List Leads",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 4700]
    },
    {
      "parameters": {
        "jsCode": "// Formatar lista de leads\nconst out = [];\nconst leads = [];\n\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  leads.push({\n    leadId: json.id,\n    siteSlug: fields.site_slug,\n    name: fields.name,\n    email: fields.email,\n    phone: fields.phone,\n    message: fields.message,\n    source: fields.source,\n    status: fields.status,\n    score: fields.score,\n    createdAt: fields.created_at\n  });\n}\n\nout.push({\n  json: {\n    success: true,\n    leads: leads,\n    count: leads.length,\n    averageScore: leads.reduce((sum, l) => sum + (l.score || 0), 0) / leads.length || 0,\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-format-leads-list",
      "name": "üéØ Code - Format Leads List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 4700]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-leads-list",
      "name": "üì§ Respond - Leads List",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 4700]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/analytics/track",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-analytics-track",
      "name": "üìä Webhook - Analytics Track",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 4900],
      "webhookId": "elevea-analytics-track"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: record_hit / recordHit_ / recordEvent_ (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug, eventType, eventData, pageUrl, referrer, ipAddress, userAgent } = json.body || {};\n  \n  if (!siteSlug || !eventType) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug e eventType s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  // Detectar tipo de dispositivo\n  const ua = userAgent || '';\n  let deviceType = 'desktop';\n  if (ua.includes('Mobile') || ua.includes('Android')) deviceType = 'mobile';\n  if (ua.includes('Tablet') || ua.includes('iPad')) deviceType = 'tablet';\n  \n  // Detectar navegador\n  let browser = 'unknown';\n  if (ua.includes('Chrome')) browser = 'chrome';\n  else if (ua.includes('Firefox')) browser = 'firefox';\n  else if (ua.includes('Safari')) browser = 'safari';\n  else if (ua.includes('Edge')) browser = 'edge';\n  \n  out.push({\n    json: {\n      siteSlug,\n      eventType,\n      eventData: JSON.stringify(eventData || {}),\n      pageUrl: pageUrl || '',\n      referrer: referrer || '',\n      ipAddress: ipAddress || '',\n      userAgent: userAgent || '',\n      deviceType,\n      browser,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-analytics-track",
      "name": "üìä Code - Analytics Track",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 4900]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "analytics_events", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "event_type", "fieldValue": "={{ $json.eventType }}"},
            {"fieldName": "event_data", "fieldValue": "={{ $json.eventData }}"},
            {"fieldName": "page_url", "fieldValue": "={{ $json.pageUrl }}"},
            {"fieldName": "referrer", "fieldValue": "={{ $json.referrer }}"},
            {"fieldName": "ip_address", "fieldValue": "={{ $json.ipAddress }}"},
            {"fieldName": "user_agent", "fieldValue": "={{ $json.userAgent }}"},
            {"fieldName": "device_type", "fieldValue": "={{ $json.deviceType }}"},
            {"fieldName": "browser", "fieldValue": "={{ $json.browser }}"}
          ]
        }
      },
      "id": "airtable-insert-analytics-event",
      "name": "üóÑÔ∏è Airtable - Insert Analytics Event",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 4900]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Evento rastreado', timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-analytics-track",
      "name": "üì§ Respond - Analytics Track",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [860, 4900]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/analytics/dashboard",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-analytics-dashboard",
      "name": "üìä Webhook - Analytics Dashboard",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 5100],
      "webhookId": "elevea-analytics-dashboard"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: get_analytics / get_traffic (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const query = json.query || {};\n  const { siteSlug, startDate, endDate } = query;\n  \n  out.push({\n    json: {\n      siteSlug: siteSlug || 'all',\n      startDate: startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n      endDate: endDate || new Date().toISOString(),\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-analytics-dashboard",
      "name": "üìä Code - Analytics Dashboard",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 5100]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "analytics_events", "mode": "list"},
        "options": {}
      },
      "id": "airtable-list-analytics",
      "name": "üóÑÔ∏è Airtable - List Analytics",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 5100]
    },
    {
      "parameters": {
        "jsCode": "// Processar e agregar analytics\nconst out = [];\nconst events = items.map(i => i.json.fields || {});\n\n// Contar por tipo de evento\nconst eventCounts = {};\nevents.forEach(e => {\n  const type = e.event_type || 'unknown';\n  eventCounts[type] = (eventCounts[type] || 0) + 1;\n});\n\n// Contar por dispositivo\nconst deviceCounts = {};\nevents.forEach(e => {\n  const device = e.device_type || 'unknown';\n  deviceCounts[device] = (deviceCounts[device] || 0) + 1;\n});\n\n// Contar por navegador\nconst browserCounts = {};\nevents.forEach(e => {\n  const browser = e.browser || 'unknown';\n  browserCounts[browser] = (browserCounts[browser] || 0) + 1;\n});\n\nout.push({\n  json: {\n    success: true,\n    analytics: {\n      totalEvents: events.length,\n      eventsByType: eventCounts,\n      deviceBreakdown: deviceCounts,\n      browserBreakdown: browserCounts,\n      topEvents: Object.entries(eventCounts).sort((a, b) => b[1] - a[1]).slice(0, 5)\n    },\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-process-analytics",
      "name": "üìä Code - Process Analytics",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 5100]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-analytics-dashboard",
      "name": "üì§ Respond - Analytics Dashboard",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 5100]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/onboarding/save",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-onboarding-save",
      "name": "üìù Webhook - Onboarding Save",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 5300],
      "webhookId": "elevea-onboarding-save"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: save_onboarding / onboarding / cadastro (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug, businessName, businessType, description, targetAudience, colors, logoUrl, imagesUrls, socialLinks, contactInfo } = json.body || {};\n  \n  if (!siteSlug || !businessName || !businessType) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug, businessName e businessType s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      siteSlug,\n      businessName,\n      businessType,\n      businessDescription: description || '',\n      targetAudience: targetAudience || '',\n      colors: JSON.stringify(colors || ['#007bff', '#28a745']),\n      logoUrl: logoUrl || '',\n      imagesUrls: JSON.stringify(imagesUrls || []),\n      socialLinks: JSON.stringify(socialLinks || {}),\n      contactInfo: JSON.stringify(contactInfo || {}),\n      status: 'pending',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-onboarding-save",
      "name": "üìù Code - Onboarding Save",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 5300]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "onboardings", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "business_name", "fieldValue": "={{ $json.businessName }}"},
            {"fieldName": "business_type", "fieldValue": "={{ $json.businessType }}"},
            {"fieldName": "business_description", "fieldValue": "={{ $json.businessDescription }}"},
            {"fieldName": "target_audience", "fieldValue": "={{ $json.targetAudience }}"},
            {"fieldName": "colors", "fieldValue": "={{ $json.colors }}"},
            {"fieldName": "logo_url", "fieldValue": "={{ $json.logoUrl }}"},
            {"fieldName": "images_urls", "fieldValue": "={{ $json.imagesUrls }}"},
            {"fieldName": "social_links", "fieldValue": "={{ $json.socialLinks }}"},
            {"fieldName": "contact_info", "fieldValue": "={{ $json.contactInfo }}"},
            {"fieldName": "status", "fieldValue": "pending"}
          ]
        }
      },
      "id": "airtable-insert-onboarding",
      "name": "üóÑÔ∏è Airtable - Insert Onboarding",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 5300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Onboarding salvo com sucesso!', siteSlug: $json.siteSlug, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-onboarding-save",
      "name": "üì§ Respond - Onboarding Save",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [860, 5300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/onboarding/prompt",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-onboarding-prompt",
      "name": "üìù Webhook - Onboarding Prompt",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 5500],
      "webhookId": "elevea-onboarding-prompt"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: generate_prompt (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug } = json.body || {};\n  \n  if (!siteSlug) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({ json: { siteSlug, timestamp: new Date().toISOString() } });\n}\nreturn out;"
      },
      "id": "code-onboarding-prompt",
      "name": "üìù Code - Onboarding Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 5500]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "onboardings", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-search-onboarding",
      "name": "üóÑÔ∏è Airtable - Search Onboarding",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 5500]
    },
    {
      "parameters": {
        "jsCode": "// Gerar prompt para Lovable AI\nconst out = [];\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  const colors = JSON.parse(fields.colors || '[\"#007bff\", \"#28a745\"]');\n  const socialLinks = JSON.parse(fields.social_links || '{}');\n  const contactInfo = JSON.parse(fields.contact_info || '{}');\n  \n  const prompt = `Crie um site moderno, responsivo e profissional para ${fields.business_name}.\n\n**Tipo de neg√≥cio:** ${fields.business_type}\n**Descri√ß√£o:** ${fields.business_description}\n**P√∫blico-alvo:** ${fields.target_audience}\n**Cores principais:** ${colors.join(', ')}\n\nO site deve incluir:\n\n1. **Hero Section**\n   - T√≠tulo impactante sobre o neg√≥cio\n   - Subt√≠tulo descritivo\n   - CTA (Call-to-Action) claro\n   - Imagem de destaque\n\n2. **Se√ß√£o Sobre**\n   - Hist√≥ria do neg√≥cio\n   - Miss√£o e valores\n   - Diferenciais\n\n3. **Servi√ßos/Produtos**\n   - Grid com cards\n   - Descri√ß√µes claras\n   - Imagens relevantes\n\n4. **Depoimentos**\n   - Reviews de clientes\n   - Sistema de avalia√ß√£o por estrelas\n\n5. **Contato**\n   - Formul√°rio de contato\n   - Informa√ß√µes de contato: ${JSON.stringify(contactInfo)}\n   - Mapa (se endere√ßo fornecido)\n   - Bot√£o WhatsApp flutuante\n\n6. **Redes Sociais**\n   - Links: ${JSON.stringify(socialLinks)}\n\n7. **SEO**\n   - Meta tags otimizadas\n   - Sitemap\n   - Schema.org markup\n\n8. **Integra√ß√µes**\n   - Google My Business\n   - Google Analytics\n   - WhatsApp\n   - Formul√°rio de feedback\n\n**Estilo:**\n- Design limpo e moderno\n- Mobile-first\n- Acess√≠vel (WCAG 2.1)\n- Performance otimizada\n- Cores: ${colors[0]} (primary), ${colors[1]} (secondary)\n\nUse React, Vite, Tailwind CSS e shadcn/ui.`;\n\n  out.push({\n    json: {\n      success: true,\n      siteSlug: fields.site_slug,\n      prompt: prompt,\n      promptGenerated: true,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-generate-prompt",
      "name": "üìù Code - Generate Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 5500]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "onboardings", "mode": "list"},
        "id": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "prompt_generated", "fieldValue": "={{ $json.prompt }}"},
            {"fieldName": "status", "fieldValue": "in_progress"}
          ]
        }
      },
      "id": "airtable-update-onboarding-prompt",
      "name": "üóÑÔ∏è Airtable - Update Onboarding Prompt",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1060, 5500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, prompt: $json.prompt, siteSlug: $json.siteSlug, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-onboarding-prompt",
      "name": "üì§ Respond - Onboarding Prompt",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1260, 5500]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "*/50 * * * *"
            }
          ]
        }
      },
      "id": "cron-token-refresh",
      "name": "‚è∞ Cron - Token Refresh (50 min)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [260, 5700]
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: refreshGoogleToken_ (do GAS) - Iniciar processo de refresh\nconst out = [];\nout.push({\n  json: {\n    action: 'token_refresh',\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-start-token-refresh",
      "name": "üîÑ Code - Start Token Refresh",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 5700]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "google_credentials", "mode": "list"},
        "options": {}
      },
      "id": "airtable-list-google-tokens",
      "name": "üóÑÔ∏è Airtable - List Google Tokens",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 5700]
    },
    {
      "parameters": {
        "jsCode": "// Filtrar tokens expirando em 24h\nconst out = [];\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  const expiresAt = new Date(fields.expires_at);\n  const now = new Date();\n  const hoursUntilExpiry = (expiresAt - now) / (1000 * 60 * 60);\n  \n  if (hoursUntilExpiry < 24) {\n    out.push({\n      json: {\n        recordId: json.id,\n        siteSlug: fields.site_slug,\n        refreshToken: fields.refresh_token,\n        expiresAt: fields.expires_at,\n        hoursUntilExpiry,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n}\nreturn out;"
      },
      "id": "code-filter-expiring-tokens",
      "name": "üîç Code - Filter Expiring Tokens",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 5700]
    },
    {
      "parameters": {
        "url": "https://oauth2.googleapis.com/token",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"client_id\": $env.GOOGLE_CLIENT_ID,\n  \"client_secret\": $env.GOOGLE_CLIENT_SECRET,\n  \"refresh_token\": $json.refreshToken,\n  \"grant_type\": \"refresh_token\"\n} }}",
        "options": {}
      },
      "id": "http-google-refresh-token",
      "name": "üîÑ HTTP - Google Refresh Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1060, 5700]
    },
    {
      "parameters": {
        "jsCode": "// Preparar novo token para update\nconst out = [];\nfor (const { json } of items) {\n  const newExpiresAt = new Date(Date.now() + (json.expires_in || 3600) * 1000).toISOString();\n  out.push({\n    json: {\n      recordId: json.recordId,\n      siteSlug: json.siteSlug,\n      accessToken: json.access_token,\n      expiresAt: newExpiresAt,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-prepare-token-update",
      "name": "üìù Code - Prepare Token Update",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1260, 5700]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "google_credentials", "mode": "list"},
        "id": "={{ $json.recordId }}",
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "access_token", "fieldValue": "={{ $json.accessToken }}"},
            {"fieldName": "expires_at", "fieldValue": "={{ $json.expiresAt }}"},
            {"fieldName": "updated_at", "fieldValue": "={{ new Date().toISOString() }}"}
          ]
        }
      },
      "id": "airtable-update-google-token",
      "name": "üóÑÔ∏è Airtable - Update Google Token",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1460, 5700]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 0 * * *"
            }
          ]
        }
      },
      "id": "cron-billing-check",
      "name": "‚è∞ Cron - Billing Check Daily (00:00)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [260, 5900]
    },
    {
      "parameters": {
        "jsCode": "// Iniciar verifica√ß√£o de billing di√°ria\nconst out = [];\nout.push({\n  json: {\n    action: 'billing_check',\n    checkDate: new Date().toISOString(),\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-start-billing-check",
      "name": "üí∞ Code - Start Billing Check",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 5900]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "clients", "mode": "list"},
        "options": {}
      },
      "id": "airtable-list-all-clients-billing",
      "name": "üóÑÔ∏è Airtable - List All Clients Billing",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 5900]
    },
    {
      "parameters": {
        "jsCode": "// Filtrar clientes VIP ativos\nconst out = [];\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  if (fields.plan === 'vip' && fields.status === 'active') {\n    out.push({\n      json: {\n        recordId: json.id,\n        siteSlug: fields.siteSlug,\n        email: fields.email,\n        name: fields.name,\n        lastPayment: fields.last_payment,\n        preapprovalId: fields.preapproval_id,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n}\nreturn out;"
      },
      "id": "code-filter-vip-clients",
      "name": "üîç Code - Filter VIP Clients",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 5900]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "billing", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-search-billing-check",
      "name": "üóÑÔ∏è Airtable - Search Billing Check",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1060, 5900]
    },
    {
      "parameters": {
        "jsCode": "// Verificar se pagamento est√° atrasado (>7 dias)\nconst out = [];\nfor (const { json } of items) {\n  const billing = json.fields || {};\n  const lastPayment = new Date(billing.payment_date || 0);\n  const daysSincePayment = Math.floor((new Date() - lastPayment) / (1000 * 60 * 60 * 24));\n  const shouldBlock = daysSincePayment > 7 && billing.status !== 'authorized';\n  \n  if (shouldBlock) {\n    out.push({\n      json: {\n        siteSlug: json.siteSlug,\n        recordId: json.recordId,\n        email: json.email,\n        name: json.name,\n        daysSincePayment,\n        shouldBlock: true,\n        reason: `Pagamento atrasado h√° ${daysSincePayment} dias`,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n}\nreturn out;"
      },
      "id": "code-check-payment-delay",
      "name": "‚ö†Ô∏è Code - Check Payment Delay",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1260, 5900]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "clients", "mode": "list"},
        "id": "={{ $json.recordId }}",
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "status", "fieldValue": "blocked"},
            {"fieldName": "plan", "fieldValue": "essential"},
            {"fieldName": "block_reason", "fieldValue": "={{ $json.reason }}"},
            {"fieldName": "updated_at", "fieldValue": "={{ new Date().toISOString() }}"}
          ]
        }
      },
      "id": "airtable-block-client-billing",
      "name": "üóÑÔ∏è Airtable - Block Client Billing",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1460, 5900]
    },
    {
      "parameters": {
        "url": "https://api.resend.com/emails",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"from\": \"noreply@elevea.com\",\n  \"to\": [ $json.email ],\n  \"subject\": \"‚ö†Ô∏è Assinatura Suspensa - ELEVEA\",\n  \"html\": \"<div style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;'>\" +\n    \"<h2 style='color: #dc3545; text-align: center;'>‚ö†Ô∏è Assinatura Suspensa</h2>\" +\n    \"<p>Ol√° \" + ($json.name || 'Cliente') + \"!</p>\" +\n    \"<p>Identificamos que seu pagamento est√° atrasado h√° \" + $json.daysSincePayment + \" dias.</p>\" +\n    \"<p>Seu site foi temporariamente bloqueado e voc√™ foi movido para o plano Essential.</p>\" +\n    \"<div style='text-align: center; margin: 30px 0;'>\" +\n      \"<a href='https://agenciaelevea.netlify.app/upgrade' style='background: #28a745; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;'>Regularizar Pagamento</a>\" +\n    \"</div>\" +\n    \"<p>Entre em contato conosco para resolver esta situa√ß√£o.</p>\" +\n    \"<hr style='margin: 30px 0; border: none; border-top: 1px solid #eee;'>\" +\n    \"<p style='color: #666; font-size: 12px; text-align: center;'>Equipe ELEVEA</p>\" +\n    \"</div>\"\n} }}",
        "options": {}
      },
      "id": "http-resend-billing-warning",
      "name": "üìß HTTP - Resend Billing Warning",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1660, 5900]
    },
    {
      "parameters": {
        "url": "https://api.telegram.org/bot{{ $env.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"chat_id\": $env.TELEGRAM_CHAT_ID,\n  \"text\": \"‚ö†Ô∏è CLIENTE BLOQUEADO - BILLING\\n\\n\" +\n    \"Site: \" + $json.siteSlug + \"\\n\" +\n    \"Nome: \" + $json.name + \"\\n\" +\n    \"Email: \" + $json.email + \"\\n\" +\n    \"Dias desde √∫ltimo pagamento: \" + $json.daysSincePayment + \"\\n\" +\n    \"Motivo: \" + $json.reason,\n  \"parse_mode\": \"HTML\"\n} }}",
        "options": {}
      },
      "id": "http-telegram-billing-alert",
      "name": "üì± HTTP - Telegram Billing Alert",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1860, 5900]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 6 * * *"
            }
          ]
        }
      },
      "id": "cron-reviews-sync",
      "name": "‚è∞ Cron - Reviews Sync Daily (06:00)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [260, 6100]
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: getGoogleReviews_ - Iniciar sincroniza√ß√£o de reviews\nconst out = [];\nout.push({\n  json: {\n    action: 'reviews_sync',\n    syncDate: new Date().toISOString(),\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-start-reviews-sync",
      "name": "üîÑ Code - Start Reviews Sync",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 6100]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "google_credentials", "mode": "list"},
        "options": {}
      },
      "id": "airtable-list-google-credentials-sync",
      "name": "üóÑÔ∏è Airtable - List Google Credentials Sync",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 6100]
    },
    {
      "parameters": {
        "jsCode": "// Filtrar credenciais ativas\nconst out = [];\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  if (fields.status === 'active' && fields.business_id && fields.location_id) {\n    out.push({\n      json: {\n        siteSlug: fields.site_slug,\n        accessToken: fields.access_token,\n        businessId: fields.business_id,\n        locationId: fields.location_id,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n}\nreturn out;"
      },
      "id": "code-filter-active-gmb",
      "name": "üîç Code - Filter Active GMB",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 6100]
    },
    {
      "parameters": {
        "url": "https://mybusiness.googleapis.com/v4/accounts/{{ $json.businessId }}/locations/{{ $json.locationId }}/reviews",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "headers": {
            "entries": [
              {"name": "Authorization", "value": "Bearer {{ $json.accessToken }}"}
            ]
          }
        }
      },
      "id": "http-google-get-reviews",
      "name": "üåü HTTP - Google Get Reviews",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1060, 6100]
    },
    {
      "parameters": {
        "jsCode": "// Processar reviews do Google e salvar\nconst out = [];\nconst reviews = json.reviews || [];\n\nfor (const review of reviews) {\n  out.push({\n    json: {\n      reviewId: review.reviewId || review.name,\n      siteSlug: json.siteSlug,\n      rating: review.starRating === 'FIVE' ? 5 : review.starRating === 'FOUR' ? 4 : review.starRating === 'THREE' ? 3 : review.starRating === 'TWO' ? 2 : 1,\n      comment: review.comment || '',\n      authorName: review.reviewer?.displayName || 'An√¥nimo',\n      authorPhoto: review.reviewer?.profilePhotoUrl || '',\n      reviewDate: review.createTime || new Date().toISOString(),\n      reply: review.reviewReply?.comment || null,\n      replyDate: review.reviewReply?.updateTime || null,\n      syncedAt: new Date().toISOString(),\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-process-google-reviews",
      "name": "üåü Code - Process Google Reviews",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1260, 6100]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "google_reviews", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "review_id", "fieldValue": "={{ $json.reviewId }}"},
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "rating", "fieldValue": "={{ $json.rating }}"},
            {"fieldName": "comment", "fieldValue": "={{ $json.comment }}"},
            {"fieldName": "author_name", "fieldValue": "={{ $json.authorName }}"},
            {"fieldName": "author_photo", "fieldValue": "={{ $json.authorPhoto }}"},
            {"fieldName": "review_date", "fieldValue": "={{ $json.reviewDate }}"},
            {"fieldName": "reply", "fieldValue": "={{ $json.reply }}"},
            {"fieldName": "reply_date", "fieldValue": "={{ $json.replyDate }}"},
            {"fieldName": "synced_at", "fieldValue": "={{ $json.syncedAt }}"}
          ]
        }
      },
      "id": "airtable-insert-google-review",
      "name": "üóÑÔ∏è Airtable - Insert Google Review",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1460, 6100]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 2 * * *"
            }
          ]
        }
      },
      "id": "cron-backup",
      "name": "‚è∞ Cron - Backup Daily (02:00)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [260, 6300]
    },
    {
      "parameters": {
        "jsCode": "// Preparar mensagem de backup\nconst out = [];\nconst timestamp = new Date().toISOString();\nconst tables = ['users', 'clients', 'tokens', 'whatsapp_messages', 'whatsapp_contacts', 'whatsapp_templates', 'billing', 'payments', 'google_credentials', 'google_reviews', 'feedbacks', 'leads', 'analytics_events', 'onboardings', 'audit_logs'];\n\nout.push({\n  json: {\n    action: 'backup',\n    backupDate: timestamp,\n    tables: tables,\n    count: tables.length,\n    message: `üîÑ Backup autom√°tico iniciado em ${timestamp}\\n\\nTabelas: ${tables.length}\\n${tables.join(', ')}`,\n    timestamp\n  }\n});\nreturn out;"
      },
      "id": "code-prepare-backup",
      "name": "üíæ Code - Prepare Backup",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 6300]
    },
    {
      "parameters": {
        "url": "https://api.telegram.org/bot{{ $env.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"chat_id\": $env.TELEGRAM_CHAT_ID,\n  \"text\": $json.message,\n  \"parse_mode\": \"HTML\"\n} }}",
        "options": {}
      },
      "id": "http-telegram-backup-notification",
      "name": "üì± HTTP - Telegram Backup Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [660, 6300]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/site/structure",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-site-structure",
      "name": "üèóÔ∏è Webhook - Site Structure",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 6500],
      "webhookId": "elevea-site-structure"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: get_site_structure (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const query = json.query || {};\n  const { siteSlug } = query;\n  \n  if (!siteSlug) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({ json: { siteSlug, timestamp: new Date().toISOString() } });\n}\nreturn out;"
      },
      "id": "code-site-structure",
      "name": "üèóÔ∏è Code - Site Structure",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 6500]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_structures", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-search-site-structure",
      "name": "üóÑÔ∏è Airtable - Search Site Structure",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 6500]
    },
    {
      "parameters": {
        "jsCode": "// Formatar estrutura do site\nconst out = [];\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  const sections = JSON.parse(fields.sections || '[]');\n  const pages = JSON.parse(fields.pages || '[]');\n  \n  out.push({\n    json: {\n      success: true,\n      siteSlug: fields.site_slug,\n      structure: {\n        sections: sections,\n        pages: pages,\n        theme: fields.theme || 'default',\n        layout: fields.layout || 'standard',\n        navigation: JSON.parse(fields.navigation || '{}'),\n        footer: JSON.parse(fields.footer || '{}')\n      },\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-format-site-structure",
      "name": "üèóÔ∏è Code - Format Site Structure",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 6500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-site-structure",
      "name": "üì§ Respond - Site Structure",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 6500]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/site/structure/save",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-save-site-structure",
      "name": "üèóÔ∏è Webhook - Save Site Structure",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 6700],
      "webhookId": "elevea-save-site-structure"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: save_site_structure (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug, sections, pages, theme, layout, navigation, footer } = json.body || {};\n  \n  if (!siteSlug || !sections) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug e sections s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      siteSlug,\n      sections: JSON.stringify(sections),\n      pages: JSON.stringify(pages || []),\n      theme: theme || 'default',\n      layout: layout || 'standard',\n      navigation: JSON.stringify(navigation || {}),\n      footer: JSON.stringify(footer || {}),\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-save-site-structure",
      "name": "üèóÔ∏è Code - Save Site Structure",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 6700]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_structures", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-check-site-exists",
      "name": "üóÑÔ∏è Airtable - Check Site Exists",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 6700]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {"value1": "={{ $json.id ? true : false }}", "value2": true}
          ]
        }
      },
      "id": "if-site-exists",
      "name": "üîÄ IF - Site Exists",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [860, 6700]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_structures", "mode": "list"},
        "id": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "sections", "fieldValue": "={{ $json.sections }}"},
            {"fieldName": "pages", "fieldValue": "={{ $json.pages }}"},
            {"fieldName": "theme", "fieldValue": "={{ $json.theme }}"},
            {"fieldName": "layout", "fieldValue": "={{ $json.layout }}"},
            {"fieldName": "navigation", "fieldValue": "={{ $json.navigation }}"},
            {"fieldName": "footer", "fieldValue": "={{ $json.footer }}"},
            {"fieldName": "updated_at", "fieldValue": "={{ new Date().toISOString() }}"}
          ]
        }
      },
      "id": "airtable-update-site-structure",
      "name": "üóÑÔ∏è Airtable - Update Site Structure",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1060, 6600]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_structures", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "sections", "fieldValue": "={{ $json.sections }}"},
            {"fieldName": "pages", "fieldValue": "={{ $json.pages }}"},
            {"fieldName": "theme", "fieldValue": "={{ $json.theme }}"},
            {"fieldName": "layout", "fieldValue": "={{ $json.layout }}"},
            {"fieldName": "navigation", "fieldValue": "={{ $json.navigation }}"},
            {"fieldName": "footer", "fieldValue": "={{ $json.footer }}"}
          ]
        }
      },
      "id": "airtable-insert-site-structure",
      "name": "üóÑÔ∏è Airtable - Insert Site Structure",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1060, 6800]
    },
    {
      "parameters": {
        "url": "https://api.netlify.com/build_hooks/{{ $env.NETLIFY_BUILD_HOOK }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"trigger_title\": \"Estrutura do site atualizada: \" + $json.siteSlug,\n  \"trigger_branch\": \"main\"\n} }}",
        "options": {}
      },
      "id": "http-netlify-rebuild-structure",
      "name": "üèóÔ∏è HTTP - Netlify Rebuild Structure",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1260, 6700]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Estrutura do site salva', siteSlug: $json.siteSlug, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-save-site-structure",
      "name": "üì§ Respond - Save Site Structure",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1460, 6700]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/site/settings",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-site-settings",
      "name": "‚öôÔ∏è Webhook - Site Settings",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 6900],
      "webhookId": "elevea-site-settings"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: get_settings / kvGetSettingsBySite_ (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const query = json.query || {};\n  const { siteSlug } = query;\n  \n  if (!siteSlug) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({ json: { siteSlug, timestamp: new Date().toISOString() } });\n}\nreturn out;"
      },
      "id": "code-site-settings",
      "name": "‚öôÔ∏è Code - Site Settings",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 6900]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_settings", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-search-site-settings",
      "name": "üóÑÔ∏è Airtable - Search Site Settings",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 6900]
    },
    {
      "parameters": {
        "jsCode": "// Formatar configura√ß√µes do site\nconst out = [];\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  \n  out.push({\n    json: {\n      success: true,\n      siteSlug: fields.site_slug,\n      settings: {\n        seo: JSON.parse(fields.seo || '{}'),\n        analytics: JSON.parse(fields.analytics || '{}'),\n        social: JSON.parse(fields.social || '{}'),\n        contact: JSON.parse(fields.contact || '{}'),\n        features: JSON.parse(fields.features || '{}'),\n        branding: JSON.parse(fields.branding || '{}'),\n        integrations: JSON.parse(fields.integrations || '{}')\n      },\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-format-site-settings",
      "name": "‚öôÔ∏è Code - Format Site Settings",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 6900]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-site-settings",
      "name": "üì§ Respond - Site Settings",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 6900]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/site/settings/save",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-save-site-settings",
      "name": "‚öôÔ∏è Webhook - Save Site Settings",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 7100],
      "webhookId": "elevea-save-site-settings"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: save_settings / saveSettings_ (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug, seo, analytics, social, contact, features, branding, integrations } = json.body || {};\n  \n  if (!siteSlug) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      siteSlug,\n      seo: JSON.stringify(seo || {}),\n      analytics: JSON.stringify(analytics || {}),\n      social: JSON.stringify(social || {}),\n      contact: JSON.stringify(contact || {}),\n      features: JSON.stringify(features || {}),\n      branding: JSON.stringify(branding || {}),\n      integrations: JSON.stringify(integrations || {}),\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-save-site-settings",
      "name": "‚öôÔ∏è Code - Save Site Settings",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 7100]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_settings", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-check-settings-exists",
      "name": "üóÑÔ∏è Airtable - Check Settings Exists",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 7100]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {"value1": "={{ $json.id ? true : false }}", "value2": true}
          ]
        }
      },
      "id": "if-settings-exists",
      "name": "üîÄ IF - Settings Exists",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [860, 7100]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_settings", "mode": "list"},
        "id": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "seo", "fieldValue": "={{ $json.seo }}"},
            {"fieldName": "analytics", "fieldValue": "={{ $json.analytics }}"},
            {"fieldName": "social", "fieldValue": "={{ $json.social }}"},
            {"fieldName": "contact", "fieldValue": "={{ $json.contact }}"},
            {"fieldName": "features", "fieldValue": "={{ $json.features }}"},
            {"fieldName": "branding", "fieldValue": "={{ $json.branding }}"},
            {"fieldName": "integrations", "fieldValue": "={{ $json.integrations }}"},
            {"fieldName": "updated_at", "fieldValue": "={{ new Date().toISOString() }}"}
          ]
        }
      },
      "id": "airtable-update-site-settings",
      "name": "üóÑÔ∏è Airtable - Update Site Settings",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1060, 7000]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_settings", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "seo", "fieldValue": "={{ $json.seo }}"},
            {"fieldName": "analytics", "fieldValue": "={{ $json.analytics }}"},
            {"fieldName": "social", "fieldValue": "={{ $json.social }}"},
            {"fieldName": "contact", "fieldValue": "={{ $json.contact }}"},
            {"fieldName": "features", "fieldValue": "={{ $json.features }}"},
            {"fieldName": "branding", "fieldValue": "={{ $json.branding }}"},
            {"fieldName": "integrations", "fieldValue": "={{ $json.integrations }}"}
          ]
        }
      },
      "id": "airtable-insert-site-settings",
      "name": "üóÑÔ∏è Airtable - Insert Site Settings",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1060, 7200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Configura√ß√µes do site salvas', siteSlug: $json.siteSlug, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-save-site-settings",
      "name": "üì§ Respond - Save Site Settings",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1260, 7100]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/site/content/update",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-update-site-content",
      "name": "üìù Webhook - Update Site Content",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 7300],
      "webhookId": "elevea-update-site-content"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: update_site_content (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug, sectionId, content, adminEmail } = json.body || {};\n  \n  if (!siteSlug || !sectionId || !content) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug, sectionId e content s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      siteSlug,\n      sectionId,\n      content: JSON.stringify(content),\n      updatedBy: adminEmail || 'admin@elevea.com',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-update-site-content",
      "name": "üìù Code - Update Site Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 7300]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_structures", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-search-site-for-update",
      "name": "üóÑÔ∏è Airtable - Search Site For Update",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 7300]
    },
    {
      "parameters": {
        "jsCode": "// Atualizar se√ß√£o espec√≠fica\nconst out = [];\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  const sections = JSON.parse(fields.sections || '[]');\n  \n  // Atualizar se√ß√£o espec√≠fica\n  const updatedSections = sections.map(s => {\n    if (s.id === json.sectionId) {\n      return { ...s, content: JSON.parse(json.content), updatedAt: new Date().toISOString() };\n    }\n    return s;\n  });\n  \n  out.push({\n    json: {\n      recordId: json.id,\n      siteSlug: json.siteSlug,\n      sections: JSON.stringify(updatedSections),\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-process-content-update",
      "name": "üìù Code - Process Content Update",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 7300]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_structures", "mode": "list"},
        "id": "={{ $json.recordId }}",
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "sections", "fieldValue": "={{ $json.sections }}"},
            {"fieldName": "updated_at", "fieldValue": "={{ new Date().toISOString() }}"}
          ]
        }
      },
      "id": "airtable-update-site-content",
      "name": "üóÑÔ∏è Airtable - Update Site Content",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1060, 7300]
    },
    {
      "parameters": {
        "url": "https://api.netlify.com/build_hooks/{{ $env.NETLIFY_BUILD_HOOK }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"trigger_title\": \"Conte√∫do atualizado: \" + $json.siteSlug,\n  \"trigger_branch\": \"main\"\n} }}",
        "options": {}
      },
      "id": "http-netlify-rebuild-content",
      "name": "üèóÔ∏è HTTP - Netlify Rebuild Content",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1260, 7300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Conte√∫do do site atualizado', siteSlug: $json.siteSlug, sectionId: $json.sectionId, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-update-site-content",
      "name": "üì§ Respond - Update Site Content",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1460, 7300]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/site/sections",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-site-sections",
      "name": "üìë Webhook - Site Sections",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 7500],
      "webhookId": "elevea-site-sections"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: get_site_sections (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const query = json.query || {};\n  const { siteSlug } = query;\n  \n  if (!siteSlug) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({ json: { siteSlug, timestamp: new Date().toISOString() } });\n}\nreturn out;"
      },
      "id": "code-site-sections",
      "name": "üìë Code - Site Sections",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 7500]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_structures", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-search-site-sections",
      "name": "üóÑÔ∏è Airtable - Search Site Sections",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 7500]
    },
    {
      "parameters": {
        "jsCode": "// Extrair e formatar se√ß√µes\nconst out = [];\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  const sections = JSON.parse(fields.sections || '[]');\n  \n  out.push({\n    json: {\n      success: true,\n      siteSlug: fields.site_slug,\n      sections: sections.map(s => ({\n        id: s.id,\n        type: s.type,\n        name: s.name,\n        visible: s.visible !== false,\n        order: s.order || 0,\n        content: s.content || {}\n      })),\n      count: sections.length,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-format-site-sections",
      "name": "üìë Code - Format Site Sections",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 7500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-site-sections",
      "name": "üì§ Respond - Site Sections",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 7500]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/site/sections/upsert",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-sections-upsert",
      "name": "üìë Webhook - Sections Upsert",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 7700],
      "webhookId": "elevea-sections-upsert"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: sections_upsert_defs (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug, sectionDefs } = json.body || {};\n  \n  if (!siteSlug || !sectionDefs) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug e sectionDefs s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      siteSlug,\n      sectionDefs: JSON.stringify(sectionDefs),\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-sections-upsert",
      "name": "üìë Code - Sections Upsert",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 7700]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_structures", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-search-site-for-sections",
      "name": "üóÑÔ∏è Airtable - Search Site For Sections",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 7700]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_structures", "mode": "list"},
        "id": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "sections", "fieldValue": "={{ $json.sectionDefs }}"},
            {"fieldName": "updated_at", "fieldValue": "={{ new Date().toISOString() }}"}
          ]
        }
      },
      "id": "airtable-update-sections",
      "name": "üóÑÔ∏è Airtable - Update Sections",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [860, 7700]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Se√ß√µes atualizadas', siteSlug: $json.siteSlug, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-sections-upsert",
      "name": "üì§ Respond - Sections Upsert",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 7700]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/site/sections/bootstrap",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-sections-bootstrap",
      "name": "üìë Webhook - Sections Bootstrap",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 7900],
      "webhookId": "elevea-sections-bootstrap"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: sections_bootstrap_from_onboarding (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug } = json.body || {};\n  \n  if (!siteSlug) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({ json: { siteSlug, timestamp: new Date().toISOString() } });\n}\nreturn out;"
      },
      "id": "code-sections-bootstrap",
      "name": "üìë Code - Sections Bootstrap",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 7900]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "onboardings", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-search-onboarding-for-bootstrap",
      "name": "üóÑÔ∏è Airtable - Search Onboarding For Bootstrap",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 7900]
    },
    {
      "parameters": {
        "jsCode": "// Criar se√ß√µes padr√£o a partir do onboarding\nconst out = [];\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  const colors = JSON.parse(fields.colors || '[\"#007bff\", \"#28a745\"]');\n  const socialLinks = JSON.parse(fields.social_links || '{}');\n  const contactInfo = JSON.parse(fields.contact_info || '{}');\n  \n  const defaultSections = [\n    {\n      id: 'hero',\n      type: 'hero',\n      name: 'Hero Section',\n      visible: true,\n      order: 0,\n      content: {\n        title: fields.business_name,\n        subtitle: fields.business_description,\n        cta: 'Saiba mais',\n        image: fields.logo_url\n      }\n    },\n    {\n      id: 'about',\n      type: 'about',\n      name: 'Sobre',\n      visible: true,\n      order: 1,\n      content: {\n        title: 'Sobre ' + fields.business_name,\n        description: fields.business_description,\n        targetAudience: fields.target_audience\n      }\n    },\n    {\n      id: 'services',\n      type: 'services',\n      name: 'Servi√ßos',\n      visible: true,\n      order: 2,\n      content: {\n        title: 'Nossos Servi√ßos',\n        items: []\n      }\n    },\n    {\n      id: 'testimonials',\n      type: 'testimonials',\n      name: 'Depoimentos',\n      visible: true,\n      order: 3,\n      content: {\n        title: 'O que dizem nossos clientes',\n        items: []\n      }\n    },\n    {\n      id: 'contact',\n      type: 'contact',\n      name: 'Contato',\n      visible: true,\n      order: 4,\n      content: contactInfo\n    }\n  ];\n  \n  out.push({\n    json: {\n      siteSlug: fields.site_slug,\n      sections: JSON.stringify(defaultSections),\n      theme: 'default',\n      layout: 'standard',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-generate-default-sections",
      "name": "üìë Code - Generate Default Sections",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 7900]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_structures", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "sections", "fieldValue": "={{ $json.sections }}"},
            {"fieldName": "theme", "fieldValue": "default"},
            {"fieldName": "layout", "fieldValue": "standard"}
          ]
        }
      },
      "id": "airtable-insert-bootstrapped-sections",
      "name": "üóÑÔ∏è Airtable - Insert Bootstrapped Sections",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1060, 7900]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Se√ß√µes iniciais criadas', siteSlug: $json.siteSlug, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-sections-bootstrap",
      "name": "üì§ Respond - Sections Bootstrap",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1260, 7900]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/modules/list",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-modules-list",
      "name": "üß© Webhook - Modules List",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 8100],
      "webhookId": "elevea-modules-list"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: list_modules / get_active_modules (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const query = json.query || {};\n  const { siteSlug } = query;\n  \n  if (!siteSlug) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({ json: { siteSlug, timestamp: new Date().toISOString() } });\n}\nreturn out;"
      },
      "id": "code-modules-list",
      "name": "üß© Code - Modules List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 8100]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "clients", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-search-client-modules",
      "name": "üóÑÔ∏è Airtable - Search Client Modules",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 8100]
    },
    {
      "parameters": {
        "jsCode": "// Retornar m√≥dulos dispon√≠veis baseado no plano\nconst out = [];\nfor (const { json } of items) {\n  const client = json.fields || {};\n  const plan = client.plan || 'essential';\n  const isVip = plan === 'vip';\n  \n  const allModules = [\n    { id: 'basic-website', name: 'Site B√°sico', enabled: true, requiredPlan: 'essential' },\n    { id: 'google-my-business', name: 'Google Meu Neg√≥cio', enabled: true, requiredPlan: 'essential' },\n    { id: 'ai-copywriter', name: 'IA Copywriter', enabled: isVip, requiredPlan: 'vip' },\n    { id: 'auto-seo', name: 'SEO Autom√°tico', enabled: isVip, requiredPlan: 'vip' },\n    { id: 'lead-scoring', name: 'Lead Scoring', enabled: isVip, requiredPlan: 'vip' },\n    { id: 'whatsapp-chatbot', name: 'Chatbot WhatsApp', enabled: isVip, requiredPlan: 'vip' },\n    { id: 'appointment-scheduling', name: 'Agendamentos', enabled: isVip, requiredPlan: 'vip' },\n    { id: 'multi-language', name: 'Multi-idioma', enabled: isVip, requiredPlan: 'vip' },\n    { id: 'ecommerce', name: 'E-commerce', enabled: isVip, requiredPlan: 'vip' },\n    { id: 'premium-templates', name: 'Templates Premium', enabled: isVip, requiredPlan: 'vip' },\n    { id: 'white-label', name: 'White Label', enabled: isVip, requiredPlan: 'vip' },\n    { id: 'audit-logs', name: 'Logs de Auditoria', enabled: isVip, requiredPlan: 'vip' },\n    { id: 'feedback-system', name: 'Sistema de Feedback', enabled: isVip, requiredPlan: 'vip' }\n  ];\n  \n  out.push({\n    json: {\n      success: true,\n      siteSlug: client.siteSlug,\n      plan: plan,\n      modules: allModules,\n      enabledCount: allModules.filter(m => m.enabled).length,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-format-modules-list",
      "name": "üß© Code - Format Modules List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 8100]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-modules-list",
      "name": "üì§ Respond - Modules List",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 8100]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/modules/toggle",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-modules-toggle",
      "name": "üß© Webhook - Modules Toggle",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 8300],
      "webhookId": "elevea-modules-toggle"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: toggle_module (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug, moduleId, enabled } = json.body || {};\n  \n  if (!siteSlug || !moduleId) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug e moduleId s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      siteSlug,\n      moduleId,\n      enabled: enabled !== false,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-modules-toggle",
      "name": "üß© Code - Modules Toggle",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 8300]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "clients", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-check-client-modules-toggle",
      "name": "üóÑÔ∏è Airtable - Check Client Modules Toggle",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 8300]
    },
    {
      "parameters": {
        "jsCode": "// Validar se cliente pode ativar m√≥dulo (VIP)\nconst out = [];\nfor (const { json } of items) {\n  const client = json.fields || {};\n  const plan = client.plan || 'essential';\n  const isVip = plan === 'vip';\n  \n  const vipModules = ['ai-copywriter', 'auto-seo', 'lead-scoring', 'whatsapp-chatbot', 'appointment-scheduling', 'multi-language', 'ecommerce', 'premium-templates', 'white-label', 'audit-logs', 'feedback-system'];\n  const isVipModule = vipModules.includes(json.moduleId);\n  \n  if (isVipModule && !isVip) {\n    out.push({\n      json: {\n        success: false,\n        error: 'M√≥dulo VIP requer plano VIP',\n        moduleId: json.moduleId,\n        currentPlan: plan,\n        timestamp: new Date().toISOString()\n      }\n    });\n  } else {\n    out.push({\n      json: {\n        success: true,\n        siteSlug: client.siteSlug,\n        moduleId: json.moduleId,\n        enabled: json.enabled,\n        canToggle: true,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n}\nreturn out;"
      },
      "id": "code-validate-module-toggle",
      "name": "‚úÖ Code - Validate Module Toggle",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 8300]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_settings", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-search-settings-for-module",
      "name": "üóÑÔ∏è Airtable - Search Settings For Module",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1060, 8300]
    },
    {
      "parameters": {
        "jsCode": "// Atualizar m√≥dulos nas features\nconst out = [];\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  const features = JSON.parse(fields.features || '{}');\n  features[json.moduleId] = json.enabled;\n  \n  out.push({\n    json: {\n      recordId: json.id,\n      siteSlug: json.siteSlug,\n      features: JSON.stringify(features),\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-update-module-in-settings",
      "name": "üìù Code - Update Module In Settings",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1260, 8300]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_settings", "mode": "list"},
        "id": "={{ $json.recordId }}",
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "features", "fieldValue": "={{ $json.features }}"},
            {"fieldName": "updated_at", "fieldValue": "={{ new Date().toISOString() }}"}
          ]
        }
      },
      "id": "airtable-update-module-toggle",
      "name": "üóÑÔ∏è Airtable - Update Module Toggle",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1460, 8300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'M√≥dulo atualizado', siteSlug: $json.siteSlug, moduleId: $json.moduleId, enabled: $json.enabled, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-modules-toggle",
      "name": "üì§ Respond - Modules Toggle",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1660, 8300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/upload/base64",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-upload-base64",
      "name": "üì§ Webhook - Upload Base64",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 8500],
      "webhookId": "elevea-upload-base64"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: upload_base64 (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug, fileName, fileData, mimeType } = json.body || {};\n  \n  if (!siteSlug || !fileName || !fileData) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug, fileName e fileData s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  // Gerar URL tempor√°ria (em produ√ß√£o, fazer upload real)\n  const fileUrl = `https://storage.elevea.com/${siteSlug}/${fileName}`;\n  const fileId = 'file_' + Date.now();\n  \n  out.push({\n    json: {\n      success: true,\n      fileId,\n      fileName,\n      fileUrl,\n      siteSlug,\n      mimeType: mimeType || 'application/octet-stream',\n      size: Math.floor(fileData.length * 0.75),\n      uploadedAt: new Date().toISOString(),\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-upload-base64",
      "name": "üì§ Code - Upload Base64",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 8500]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "uploaded_files", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "file_id", "fieldValue": "={{ $json.fileId }}"},
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "file_name", "fieldValue": "={{ $json.fileName }}"},
            {"fieldName": "file_url", "fieldValue": "={{ $json.fileUrl }}"},
            {"fieldName": "mime_type", "fieldValue": "={{ $json.mimeType }}"},
            {"fieldName": "file_size", "fieldValue": "={{ $json.size }}"}
          ]
        }
      },
      "id": "airtable-insert-uploaded-file",
      "name": "üóÑÔ∏è Airtable - Insert Uploaded File",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 8500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Arquivo enviado com sucesso', fileId: $json.fileId, fileUrl: $json.fileUrl, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-upload-base64",
      "name": "üì§ Respond - Upload Base64",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [860, 8500]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/templates/list",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-templates-list",
      "name": "üé® Webhook - Templates List",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 8700],
      "webhookId": "elevea-templates-list"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: marketplace_templates (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const query = json.query || {};\n  const { category, plan } = query;\n  \n  out.push({\n    json: {\n      category: category || 'all',\n      plan: plan || 'all',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-templates-list",
      "name": "üé® Code - Templates List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 8700]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_templates", "mode": "list"},
        "options": {
          "sort": [
            {"field": "popularity", "direction": "desc"}
          ]
        }
      },
      "id": "airtable-list-templates",
      "name": "üóÑÔ∏è Airtable - List Templates",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 8700]
    },
    {
      "parameters": {
        "jsCode": "// Formatar lista de templates\nconst out = [];\nconst templates = [];\n\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  templates.push({\n    templateId: json.id,\n    name: fields.name,\n    description: fields.description,\n    category: fields.category,\n    previewUrl: fields.preview_url,\n    thumbnailUrl: fields.thumbnail_url,\n    requiredPlan: fields.required_plan || 'essential',\n    price: fields.price || 0,\n    isVipOnly: fields.required_plan === 'vip',\n    popularity: fields.popularity || 0,\n    tags: JSON.parse(fields.tags || '[]')\n  });\n}\n\nout.push({\n  json: {\n    success: true,\n    templates: templates,\n    count: templates.length,\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-format-templates-list",
      "name": "üé® Code - Format Templates List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 8700]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-templates-list",
      "name": "üì§ Respond - Templates List",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 8700]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/templates/apply",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-template-apply",
      "name": "üé® Webhook - Template Apply",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 8900],
      "webhookId": "elevea-template-apply"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: template_purchases (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug, templateId } = json.body || {};\n  \n  if (!siteSlug || !templateId) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug e templateId s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({ json: { siteSlug, templateId, timestamp: new Date().toISOString() } });\n}\nreturn out;"
      },
      "id": "code-template-apply",
      "name": "üé® Code - Template Apply",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 8900]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_templates", "mode": "list"},
        "filterByFormula": "=AND({id}='{{ $json.templateId }}')",
        "options": {}
      },
      "id": "airtable-search-template",
      "name": "üóÑÔ∏è Airtable - Search Template",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 8900]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "clients", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-check-client-template",
      "name": "üóÑÔ∏è Airtable - Check Client Template",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [860, 8900]
    },
    {
      "parameters": {
        "jsCode": "// Validar se cliente pode aplicar template\nconst out = [];\nfor (const { json } of items) {\n  const client = json.fields || {};\n  const template = json.template?.fields || {};\n  const plan = client.plan || 'essential';\n  const isVip = plan === 'vip';\n  const requiredPlan = template.required_plan || 'essential';\n  \n  if (requiredPlan === 'vip' && !isVip) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Template VIP requer plano VIP',\n        requiredPlan: requiredPlan,\n        currentPlan: plan,\n        timestamp: new Date().toISOString()\n      }\n    });\n  } else {\n    out.push({\n      json: {\n        success: true,\n        siteSlug: client.siteSlug,\n        templateId: json.templateId,\n        templateData: template,\n        canApply: true,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n}\nreturn out;"
      },
      "id": "code-validate-template-apply",
      "name": "‚úÖ Code - Validate Template Apply",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, 8900]
    },
    {
      "parameters": {
        "jsCode": "// Aplicar template ao site (copiar estrutura)\nconst out = [];\nfor (const { json } of items) {\n  const template = json.templateData || {};\n  \n  out.push({\n    json: {\n      siteSlug: json.siteSlug,\n      sections: template.sections || '[]',\n      pages: template.pages || '[]',\n      theme: template.theme || 'default',\n      layout: template.layout || 'standard',\n      navigation: template.navigation || '{}',\n      footer: template.footer || '{}',\n      templateApplied: json.templateId,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-apply-template-to-site",
      "name": "üé® Code - Apply Template To Site",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1260, 8900]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_structures", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-search-site-for-template",
      "name": "üóÑÔ∏è Airtable - Search Site For Template",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1460, 8900]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_structures", "mode": "list"},
        "id": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "sections", "fieldValue": "={{ $json.sections }}"},
            {"fieldName": "pages", "fieldValue": "={{ $json.pages }}"},
            {"fieldName": "theme", "fieldValue": "={{ $json.theme }}"},
            {"fieldName": "layout", "fieldValue": "={{ $json.layout }}"},
            {"fieldName": "template_applied", "fieldValue": "={{ $json.templateApplied }}"},
            {"fieldName": "updated_at", "fieldValue": "={{ new Date().toISOString() }}"}
          ]
        }
      },
      "id": "airtable-apply-template",
      "name": "üóÑÔ∏è Airtable - Apply Template",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1660, 8900]
    },
    {
      "parameters": {
        "url": "https://api.netlify.com/build_hooks/{{ $env.NETLIFY_BUILD_HOOK }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"trigger_title\": \"Template aplicado: \" + $json.siteSlug,\n  \"trigger_branch\": \"main\"\n} }}",
        "options": {}
      },
      "id": "http-netlify-rebuild-template",
      "name": "üèóÔ∏è HTTP - Netlify Rebuild Template",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1860, 8900]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Template aplicado com sucesso', siteSlug: $json.siteSlug, templateId: $json.templateApplied, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-template-apply",
      "name": "üì§ Respond - Template Apply",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [2060, 8900]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/admin/dashboard",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-admin-dashboard",
      "name": "üë®‚Äçüíº Webhook - Admin Dashboard",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 9100],
      "webhookId": "elevea-admin-dashboard"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: admin_dashboard / getDashboardStats_ (do GAS)\nconst out = [];\nout.push({\n  json: {\n    needsStats: true,\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-admin-dashboard",
      "name": "üë®‚Äçüíº Code - Admin Dashboard",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 9100]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "clients", "mode": "list"},
        "options": {}
      },
      "id": "airtable-list-all-clients-dashboard",
      "name": "üóÑÔ∏è Airtable - List All Clients Dashboard",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 9100]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "leads", "mode": "list"},
        "limit": 50,
        "options": {
          "sort": [
            {"field": "created_at", "direction": "desc"}
          ]
        }
      },
      "id": "airtable-list-recent-leads",
      "name": "üóÑÔ∏è Airtable - List Recent Leads",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [860, 9100]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "billing", "mode": "list"},
        "options": {
          "sort": [
            {"field": "payment_date", "direction": "desc"}
          ]
        }
      },
      "id": "airtable-list-billing-dashboard",
      "name": "üóÑÔ∏è Airtable - List Billing Dashboard",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1060, 9100]
    },
    {
      "parameters": {
        "jsCode": "// Processar estat√≠sticas do dashboard admin\nconst out = [];\n\nconst clients = items.filter(i => i.json.table === 'clients').map(i => i.json.fields || {});\nconst leads = items.filter(i => i.json.table === 'leads').map(i => i.json.fields || {});\nconst billings = items.filter(i => i.json.table === 'billing').map(i => i.json.fields || {});\n\nconst totalClients = clients.length;\nconst vipClients = clients.filter(c => c.plan === 'vip').length;\nconst activeClients = clients.filter(c => c.status === 'active').length;\nconst blockedClients = clients.filter(c => c.status === 'blocked').length;\n\nconst totalLeads = leads.length;\nconst newLeads = leads.filter(l => l.status === 'new').length;\nconst avgLeadScore = leads.reduce((sum, l) => sum + (l.score || 0), 0) / totalLeads || 0;\n\nconst totalRevenue = billings.reduce((sum, b) => sum + (b.amount || 0), 0);\nconst monthlyRevenue = billings.filter(b => {\n  const paymentDate = new Date(b.payment_date);\n  const now = new Date();\n  return paymentDate.getMonth() === now.getMonth() && paymentDate.getFullYear() === now.getFullYear();\n}).reduce((sum, b) => sum + (b.amount || 0), 0);\n\nout.push({\n  json: {\n    success: true,\n    stats: {\n      clients: {\n        total: totalClients,\n        vip: vipClients,\n        essential: totalClients - vipClients,\n        active: activeClients,\n        blocked: blockedClients\n      },\n      leads: {\n        total: totalLeads,\n        new: newLeads,\n        averageScore: Math.round(avgLeadScore)\n      },\n      revenue: {\n        total: totalRevenue,\n        monthly: monthlyRevenue,\n        mrr: vipClients * 97\n      }\n    },\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-process-admin-dashboard",
      "name": "üë®‚Äçüíº Code - Process Admin Dashboard",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1260, 9100]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-admin-dashboard",
      "name": "üì§ Respond - Admin Dashboard",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1460, 9100]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/admin/clients",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-admin-clients",
      "name": "üë®‚Äçüíº Webhook - Admin Clients",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 9300],
      "webhookId": "elevea-admin-clients"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: list_all_clients_admin (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const query = json.query || {};\n  const { status, plan, limit } = query;\n  \n  out.push({\n    json: {\n      status: status || 'all',\n      plan: plan || 'all',\n      limit: parseInt(limit) || 100,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-admin-clients",
      "name": "üë®‚Äçüíº Code - Admin Clients",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 9300]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "clients", "mode": "list"},
        "limit": "={{ $json.limit }}",
        "options": {
          "sort": [
            {"field": "created_at", "direction": "desc"}
          ]
        }
      },
      "id": "airtable-list-admin-clients",
      "name": "üóÑÔ∏è Airtable - List Admin Clients",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 9300]
    },
    {
      "parameters": {
        "jsCode": "// Formatar lista de clientes com billing\nconst out = [];\nconst clients = [];\n\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  clients.push({\n    clientId: json.id,\n    siteSlug: fields.siteSlug,\n    email: fields.email,\n    name: fields.name,\n    plan: fields.plan,\n    status: fields.status,\n    lastPayment: fields.last_payment,\n    preapprovalId: fields.preapproval_id,\n    createdAt: fields.created_at,\n    updatedAt: fields.updated_at\n  });\n}\n\nout.push({\n  json: {\n    success: true,\n    clients: clients,\n    count: clients.length,\n    vipCount: clients.filter(c => c.plan === 'vip').length,\n    activeCount: clients.filter(c => c.status === 'active').length,\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-format-admin-clients",
      "name": "üë®‚Äçüíº Code - Format Admin Clients",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 9300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-admin-clients",
      "name": "üì§ Respond - Admin Clients",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 9300]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/audit/logs",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-audit-logs",
      "name": "üìù Webhook - Audit Logs",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 9500],
      "webhookId": "elevea-audit-logs"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: get_audit_logs (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const query = json.query || {};\n  const { siteSlug, severity, limit } = query;\n  \n  out.push({\n    json: {\n      siteSlug: siteSlug || 'all',\n      severity: severity || 'all',\n      limit: parseInt(limit) || 100,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-audit-logs",
      "name": "üìù Code - Audit Logs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 9500]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "audit_logs", "mode": "list"},
        "limit": "={{ $json.limit }}",
        "options": {
          "sort": [
            {"field": "created_at", "direction": "desc"}
          ]
        }
      },
      "id": "airtable-list-audit-logs",
      "name": "üóÑÔ∏è Airtable - List Audit Logs",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 9500]
    },
    {
      "parameters": {
        "jsCode": "// Formatar logs de auditoria\nconst out = [];\nconst logs = [];\n\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  logs.push({\n    logId: json.id,\n    siteSlug: fields.site_slug,\n    action: fields.action,\n    userEmail: fields.user_email,\n    userRole: fields.user_role,\n    details: fields.details,\n    severity: fields.severity,\n    createdAt: fields.created_at\n  });\n}\n\nconst severityCounts = {};\nlogs.forEach(l => {\n  severityCounts[l.severity] = (severityCounts[l.severity] || 0) + 1;\n});\n\nout.push({\n  json: {\n    success: true,\n    logs: logs,\n    count: logs.length,\n    severityBreakdown: severityCounts,\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-format-audit-logs",
      "name": "üìù Code - Format Audit Logs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 9500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-audit-logs",
      "name": "üì§ Respond - Audit Logs",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 9500]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/sites/list",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-sites-list",
      "name": "üåê Webhook - Sites List",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 9700],
      "webhookId": "elevea-sites-list"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: sites (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const query = json.query || {};\n  const { adminEmail } = query;\n  \n  out.push({\n    json: {\n      adminEmail: adminEmail || 'all',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-sites-list",
      "name": "üåê Code - Sites List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 9700]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "site_structures", "mode": "list"},
        "options": {}
      },
      "id": "airtable-list-all-sites",
      "name": "üóÑÔ∏è Airtable - List All Sites",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 9700]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "clients", "mode": "list"},
        "options": {}
      },
      "id": "airtable-list-clients-for-sites",
      "name": "üóÑÔ∏è Airtable - List Clients For Sites",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [860, 9700]
    },
    {
      "parameters": {
        "jsCode": "// Mesclar sites com clientes\nconst out = [];\nconst sites = items.filter(i => i.json.table === 'site_structures').map(i => ({ id: i.json.id, ...i.json.fields }));\nconst clients = items.filter(i => i.json.table === 'clients').map(i => ({ id: i.json.id, ...i.json.fields }));\n\nconst clientsMap = {};\nclients.forEach(c => {\n  clientsMap[c.siteSlug] = c;\n});\n\nconst sitesList = sites.map(site => {\n  const client = clientsMap[site.site_slug] || {};\n  return {\n    siteId: site.id,\n    siteSlug: site.site_slug,\n    theme: site.theme,\n    layout: site.layout,\n    templateApplied: site.template_applied,\n    clientInfo: {\n      name: client.name,\n      email: client.email,\n      plan: client.plan,\n      status: client.status\n    },\n    createdAt: site.created_at,\n    updatedAt: site.updated_at\n  };\n});\n\nout.push({\n  json: {\n    success: true,\n    sites: sitesList,\n    count: sitesList.length,\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-format-sites-list",
      "name": "üåê Code - Format Sites List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, 9700]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-sites-list",
      "name": "üì§ Respond - Sites List",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1260, 9700]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/ecommerce/products",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-products-list",
      "name": "üõí Webhook - Products List",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 9900],
      "webhookId": "elevea-products-list"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: get_products (do GAS) - VIP ONLY\nconst out = [];\nfor (const { json } of items) {\n  const query = json.query || {};\n  const { siteSlug, category, status } = query;\n  \n  if (!siteSlug) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      siteSlug,\n      category: category || 'all',\n      status: status || 'active',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-products-list",
      "name": "üõí Code - Products List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 9900]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "clients", "mode": "list"},
        "filterByFormula": "=AND({siteSlug}='{{ $json.siteSlug }}')",
        "options": {}
      },
      "id": "airtable-check-client-ecommerce",
      "name": "üóÑÔ∏è Airtable - Check Client Ecommerce",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 9900]
    },
    {
      "parameters": {
        "jsCode": "// Validar se cliente √© VIP (ecommerce √© VIP only)\nconst out = [];\nfor (const { json } of items) {\n  const client = json.fields || {};\n  const isVip = (client.plan || 'essential') === 'vip';\n  \n  if (!isVip) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Ecommerce requer plano VIP',\n        currentPlan: client.plan,\n        timestamp: new Date().toISOString()\n      }\n    });\n  } else {\n    out.push({\n      json: {\n        success: true,\n        siteSlug: client.siteSlug,\n        canUseEcommerce: true,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n}\nreturn out;"
      },
      "id": "code-validate-ecommerce-access",
      "name": "‚úÖ Code - Validate Ecommerce Access",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 9900]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "products", "mode": "list"},
        "options": {
          "sort": [
            {"field": "created_at", "direction": "desc"}
          ]
        }
      },
      "id": "airtable-list-products",
      "name": "üóÑÔ∏è Airtable - List Products",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1060, 9900]
    },
    {
      "parameters": {
        "jsCode": "// Formatar lista de produtos\nconst out = [];\nconst products = [];\n\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  products.push({\n    productId: json.id,\n    siteSlug: fields.site_slug,\n    name: fields.name,\n    description: fields.description,\n    price: fields.price,\n    comparePrice: fields.compare_price,\n    sku: fields.sku,\n    category: fields.category,\n    images: JSON.parse(fields.images || '[]'),\n    stock: fields.stock || 0,\n    status: fields.status || 'active',\n    createdAt: fields.created_at\n  });\n}\n\nout.push({\n  json: {\n    success: true,\n    products: products,\n    count: products.length,\n    totalValue: products.reduce((sum, p) => sum + (p.price * p.stock), 0),\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-format-products",
      "name": "üõí Code - Format Products",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1260, 9900]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-products-list",
      "name": "üì§ Respond - Products List",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1460, 9900]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/ecommerce/products/create",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-product-create",
      "name": "üõí Webhook - Product Create",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 10100],
      "webhookId": "elevea-product-create"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: create_product (do GAS) - VIP ONLY\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug, name, description, price, comparePrice, sku, category, images, stock } = json.body || {};\n  \n  if (!siteSlug || !name || !price) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug, name e price s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  const productId = 'prod_' + Date.now() + '_' + Math.random().toString(36).slice(2, 9);\n  \n  out.push({\n    json: {\n      productId,\n      siteSlug,\n      name,\n      description: description || '',\n      price: parseFloat(price),\n      comparePrice: comparePrice ? parseFloat(comparePrice) : null,\n      sku: sku || productId,\n      category: category || 'uncategorized',\n      images: JSON.stringify(images || []),\n      stock: parseInt(stock) || 0,\n      status: 'active',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-product-create",
      "name": "üõí Code - Product Create",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 10100]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "products", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "product_id", "fieldValue": "={{ $json.productId }}"},
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "name", "fieldValue": "={{ $json.name }}"},
            {"fieldName": "description", "fieldValue": "={{ $json.description }}"},
            {"fieldName": "price", "fieldValue": "={{ $json.price }}"},
            {"fieldName": "compare_price", "fieldValue": "={{ $json.comparePrice }}"},
            {"fieldName": "sku", "fieldValue": "={{ $json.sku }}"},
            {"fieldName": "category", "fieldValue": "={{ $json.category }}"},
            {"fieldName": "images", "fieldValue": "={{ $json.images }}"},
            {"fieldName": "stock", "fieldValue": "={{ $json.stock }}"},
            {"fieldName": "status", "fieldValue": "active"}
          ]
        }
      },
      "id": "airtable-insert-product",
      "name": "üóÑÔ∏è Airtable - Insert Product",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 10100]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Produto criado com sucesso', productId: $json.productId, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-product-create",
      "name": "üì§ Respond - Product Create",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [860, 10100]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/ecommerce/orders/create",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-order-create",
      "name": "üõçÔ∏è Webhook - Order Create",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 10300],
      "webhookId": "elevea-order-create"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: create_order (do GAS) - VIP ONLY\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug, customerEmail, customerName, customerPhone, items, shippingAddress, paymentMethod } = json.body || {};\n  \n  if (!siteSlug || !customerEmail || !items || items.length === 0) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug, customerEmail e items s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  const orderId = 'ORD-' + Date.now();\n  const totalAmount = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n  \n  out.push({\n    json: {\n      orderId,\n      siteSlug,\n      customerEmail,\n      customerName: customerName || '',\n      customerPhone: customerPhone || '',\n      items: JSON.stringify(items),\n      totalAmount,\n      shippingAddress: JSON.stringify(shippingAddress || {}),\n      paymentMethod: paymentMethod || 'mercadopago',\n      status: 'pending',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-order-create",
      "name": "üõçÔ∏è Code - Order Create",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 10300]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "orders", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "order_id", "fieldValue": "={{ $json.orderId }}"},
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "customer_email", "fieldValue": "={{ $json.customerEmail }}"},
            {"fieldName": "customer_name", "fieldValue": "={{ $json.customerName }}"},
            {"fieldName": "customer_phone", "fieldValue": "={{ $json.customerPhone }}"},
            {"fieldName": "items", "fieldValue": "={{ $json.items }}"},
            {"fieldName": "total_amount", "fieldValue": "={{ $json.totalAmount }}"},
            {"fieldName": "shipping_address", "fieldValue": "={{ $json.shippingAddress }}"},
            {"fieldName": "payment_method", "fieldValue": "={{ $json.paymentMethod }}"},
            {"fieldName": "status", "fieldValue": "pending"}
          ]
        }
      },
      "id": "airtable-insert-order",
      "name": "üóÑÔ∏è Airtable - Insert Order",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 10300]
    },
    {
      "parameters": {
        "jsCode": "// Registrar evento de pedido\nconst out = [];\nfor (const { json } of items) {\n  out.push({\n    json: {\n      siteSlug: json.siteSlug,\n      eventType: 'order_created',\n      eventData: JSON.stringify({\n        orderId: json.orderId,\n        customerEmail: json.customerEmail,\n        totalAmount: json.totalAmount,\n        itemsCount: JSON.parse(json.items).length\n      }),\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-analytics-order-created",
      "name": "üìä Code - Analytics Order Created",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 10300]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "analytics_events", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "event_type", "fieldValue": "order_created"},
            {"fieldName": "event_data", "fieldValue": "={{ $json.eventData }}"}
          ]
        }
      },
      "id": "airtable-insert-analytics-order",
      "name": "üóÑÔ∏è Airtable - Insert Analytics Order",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1060, 10300]
    },
    {
      "parameters": {
        "url": "https://api.telegram.org/bot{{ $env.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"chat_id\": $env.TELEGRAM_CHAT_ID,\n  \"text\": \"üõçÔ∏è NOVO PEDIDO!\\n\\n\" +\n    \"Site: \" + $json.siteSlug + \"\\n\" +\n    \"Pedido: \" + $json.orderId + \"\\n\" +\n    \"Cliente: \" + $json.customerName + \"\\n\" +\n    \"Email: \" + $json.customerEmail + \"\\n\" +\n    \"Total: R$ \" + $json.totalAmount.toFixed(2) + \"\\n\" +\n    \"M√©todo: \" + $json.paymentMethod,\n  \"parse_mode\": \"HTML\"\n} }}",
        "options": {}
      },
      "id": "http-telegram-order-alert",
      "name": "üì± HTTP - Telegram Order Alert",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1260, 10300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Pedido criado com sucesso', orderId: $json.orderId, totalAmount: $json.totalAmount, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-order-create",
      "name": "üì§ Respond - Order Create",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1460, 10300]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/ecommerce/orders",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-orders-list",
      "name": "üõçÔ∏è Webhook - Orders List",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 10500],
      "webhookId": "elevea-orders-list"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: get_orders (do GAS) - VIP ONLY\nconst out = [];\nfor (const { json } of items) {\n  const query = json.query || {};\n  const { siteSlug, status, limit } = query;\n  \n  if (!siteSlug) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      siteSlug,\n      status: status || 'all',\n      limit: parseInt(limit) || 50,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-orders-list",
      "name": "üõçÔ∏è Code - Orders List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 10500]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "orders", "mode": "list"},
        "limit": "={{ $json.limit }}",
        "options": {
          "sort": [
            {"field": "created_at", "direction": "desc"}
          ]
        }
      },
      "id": "airtable-list-orders",
      "name": "üóÑÔ∏è Airtable - List Orders",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 10500]
    },
    {
      "parameters": {
        "jsCode": "// Formatar lista de pedidos\nconst out = [];\nconst orders = [];\n\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  orders.push({\n    orderId: fields.order_id,\n    siteSlug: fields.site_slug,\n    customerEmail: fields.customer_email,\n    customerName: fields.customer_name,\n    totalAmount: fields.total_amount,\n    status: fields.status,\n    paymentMethod: fields.payment_method,\n    createdAt: fields.created_at\n  });\n}\n\nconst totalRevenue = orders.reduce((sum, o) => sum + (o.totalAmount || 0), 0);\nconst statusCounts = {};\norders.forEach(o => {\n  statusCounts[o.status] = (statusCounts[o.status] || 0) + 1;\n});\n\nout.push({\n  json: {\n    success: true,\n    orders: orders,\n    count: orders.length,\n    totalRevenue: totalRevenue,\n    statusBreakdown: statusCounts,\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-format-orders",
      "name": "üõçÔ∏è Code - Format Orders",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 10500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-orders-list",
      "name": "üì§ Respond - Orders List",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 10500]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/ecommerce/orders/update",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-order-update",
      "name": "üõçÔ∏è Webhook - Order Update",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 10700],
      "webhookId": "elevea-order-update"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: update_order (do GAS) - Atualizar status do pedido\nconst out = [];\nfor (const { json } of items) {\n  const { orderId, status, trackingCode, notes } = json.body || {};\n  \n  if (!orderId || !status) {\n    out.push({\n      json: {\n        success: false,\n        error: 'orderId e status s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      orderId,\n      newStatus: status,\n      trackingCode: trackingCode || null,\n      notes: notes || '',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-order-update",
      "name": "üõçÔ∏è Code - Order Update",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 10700]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "orders", "mode": "list"},
        "filterByFormula": "=AND({order_id}='{{ $json.orderId }}')",
        "options": {}
      },
      "id": "airtable-search-order",
      "name": "üóÑÔ∏è Airtable - Search Order",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 10700]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "orders", "mode": "list"},
        "id": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "status", "fieldValue": "={{ $json.newStatus }}"},
            {"fieldName": "tracking_code", "fieldValue": "={{ $json.trackingCode }}"},
            {"fieldName": "notes", "fieldValue": "={{ $json.notes }}"},
            {"fieldName": "updated_at", "fieldValue": "={{ new Date().toISOString() }}"}
          ]
        }
      },
      "id": "airtable-update-order",
      "name": "üóÑÔ∏è Airtable - Update Order",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [860, 10700]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {"value1": "={{ $json.newStatus }}", "operation": "equals", "value2": "shipped"}
          ]
        }
      },
      "id": "if-order-shipped",
      "name": "üîÄ IF - Order Shipped",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1060, 10700]
    },
    {
      "parameters": {
        "url": "https://api.resend.com/emails",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"from\": \"noreply@elevea.com\",\n  \"to\": [ $json.fields?.customer_email ],\n  \"subject\": \"üì¶ Seu pedido foi enviado!\",\n  \"html\": \"<div style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;'>\" +\n    \"<h2 style='color: #28a745; text-align: center;'>üì¶ Pedido Enviado!</h2>\" +\n    \"<p>Ol√° \" + ($json.fields?.customer_name || 'Cliente') + \"!</p>\" +\n    \"<p>Seu pedido <strong>\" + $json.orderId + \"</strong> foi enviado!</p>\" +\n    \"<div style='background: #f8f9fa; padding: 20px; margin: 20px 0; border-radius: 5px;'>\" +\n      \"<p><strong>C√≥digo de rastreamento:</strong></p>\" +\n      \"<p style='font-size: 18px; font-weight: bold; color: #007bff;'>\" + ($json.trackingCode || 'Em breve') + \"</p>\" +\n    \"</div>\" +\n    \"<p>Obrigado pela compra!</p>\" +\n    \"<hr style='margin: 30px 0; border: none; border-top: 1px solid #eee;'>\" +\n    \"<p style='color: #666; font-size: 12px; text-align: center;'>Equipe ELEVEA</p>\" +\n    \"</div>\"\n} }}",
        "options": {}
      },
      "id": "http-resend-order-shipped",
      "name": "üìß HTTP - Resend Order Shipped",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1260, 10600]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Pedido atualizado', orderId: $json.orderId, status: $json.newStatus, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-order-update",
      "name": "üì§ Respond - Order Update",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1460, 10700]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "api/appointments/list",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-appointments-list",
      "name": "üìÖ Webhook - Appointments List",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 10900],
      "webhookId": "elevea-appointments-list"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: list_appointments (do GAS) - VIP ONLY\nconst out = [];\nfor (const { json } of items) {\n  const query = json.query || {};\n  const { siteSlug, date, status } = query;\n  \n  if (!siteSlug) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      siteSlug,\n      date: date || null,\n      status: status || 'all',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-appointments-list",
      "name": "üìÖ Code - Appointments List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 10900]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "appointments", "mode": "list"},
        "options": {
          "sort": [
            {"field": "appointment_date", "direction": "asc"}
          ]
        }
      },
      "id": "airtable-list-appointments",
      "name": "üóÑÔ∏è Airtable - List Appointments",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 10900]
    },
    {
      "parameters": {
        "jsCode": "// Formatar lista de agendamentos\nconst out = [];\nconst appointments = [];\n\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  appointments.push({\n    appointmentId: json.id,\n    siteSlug: fields.site_slug,\n    customerName: fields.customer_name,\n    customerEmail: fields.customer_email,\n    customerPhone: fields.customer_phone,\n    appointmentDate: fields.appointment_date,\n    appointmentTime: fields.appointment_time,\n    service: fields.service,\n    duration: fields.duration,\n    status: fields.status,\n    notes: fields.notes,\n    createdAt: fields.created_at\n  });\n}\n\nout.push({\n  json: {\n    success: true,\n    appointments: appointments,\n    count: appointments.length,\n    upcoming: appointments.filter(a => new Date(a.appointmentDate) > new Date()).length,\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-format-appointments",
      "name": "üìÖ Code - Format Appointments",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 10900]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-appointments-list",
      "name": "üì§ Respond - Appointments List",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 10900]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/appointments/create",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-appointment-create",
      "name": "üìÖ Webhook - Appointment Create",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 11100],
      "webhookId": "elevea-appointment-create"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: create_appointment / checkAppointmentAvailability_ (do GAS) - VIP ONLY\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug, customerName, customerEmail, customerPhone, appointmentDate, appointmentTime, service, duration, notes } = json.body || {};\n  \n  if (!siteSlug || !customerEmail || !appointmentDate || !appointmentTime) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug, customerEmail, appointmentDate e appointmentTime s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  const appointmentId = 'APT-' + Date.now();\n  \n  out.push({\n    json: {\n      appointmentId,\n      siteSlug,\n      customerName: customerName || '',\n      customerEmail,\n      customerPhone: customerPhone || '',\n      appointmentDate,\n      appointmentTime,\n      service: service || 'Consulta',\n      duration: parseInt(duration) || 60,\n      notes: notes || '',\n      status: 'confirmed',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-appointment-create",
      "name": "üìÖ Code - Appointment Create",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 11100]
    },
    {
      "parameters": {
        "operation": "append",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "appointments", "mode": "list"},
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "appointment_id", "fieldValue": "={{ $json.appointmentId }}"},
            {"fieldName": "site_slug", "fieldValue": "={{ $json.siteSlug }}"},
            {"fieldName": "customer_name", "fieldValue": "={{ $json.customerName }}"},
            {"fieldName": "customer_email", "fieldValue": "={{ $json.customerEmail }}"},
            {"fieldName": "customer_phone", "fieldValue": "={{ $json.customerPhone }}"},
            {"fieldName": "appointment_date", "fieldValue": "={{ $json.appointmentDate }}"},
            {"fieldName": "appointment_time", "fieldValue": "={{ $json.appointmentTime }}"},
            {"fieldName": "service", "fieldValue": "={{ $json.service }}"},
            {"fieldName": "duration", "fieldValue": "={{ $json.duration }}"},
            {"fieldName": "notes", "fieldValue": "={{ $json.notes }}"},
            {"fieldName": "status", "fieldValue": "confirmed"}
          ]
        }
      },
      "id": "airtable-insert-appointment",
      "name": "üóÑÔ∏è Airtable - Insert Appointment",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 11100]
    },
    {
      "parameters": {
        "jsCode": "// Preparar mensagem WhatsApp de confirma√ß√£o\nconst out = [];\nfor (const { json } of items) {\n  const phone = json.customerPhone;\n  const message = `‚úÖ Agendamento confirmado!\\n\\n` +\n    `üìÖ Data: ${json.appointmentDate}\\n` +\n    `üïê Hor√°rio: ${json.appointmentTime}\\n` +\n    `üìã Servi√ßo: ${json.service}\\n` +\n    `‚è±Ô∏è Dura√ß√£o: ${json.duration} min\\n\\n` +\n    `Qualquer d√∫vida, entre em contato!`;\n  \n  // Normalizar telefone\n  const digits = phone.replace(/\\D/g, '');\n  const normalizedPhone = digits.startsWith('55') ? digits : '55' + digits;\n  \n  out.push({\n    json: {\n      siteSlug: json.siteSlug,\n      phone: normalizedPhone,\n      message: message,\n      appointmentId: json.appointmentId,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-prepare-appointment-whatsapp",
      "name": "üì± Code - Prepare Appointment WhatsApp",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 11100]
    },
    {
      "parameters": {
        "url": "https://graph.facebook.com/v18.0/{{ $env.WHATSAPP_PHONE_NUMBER_ID }}/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"messaging_product\": \"whatsapp\",\n  \"to\": $json.phone,\n  \"type\": \"text\",\n  \"text\": { \"body\": $json.message }\n} }}",
        "options": {}
      },
      "id": "http-wa-send-appointment-confirmation",
      "name": "üì± HTTP - WA Send Appointment Confirmation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1060, 11100]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Agendamento criado com sucesso', appointmentId: $json.appointmentId, timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-appointment-create",
      "name": "üì§ Respond - Appointment Create",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1260, 11100]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/helpers/generate-id",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-generate-id",
      "name": "üîß Webhook - Generate ID",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 11300],
      "webhookId": "elevea-generate-id"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: generateUniqueId_ / generateOrderNumber_ / generateLicenseKey_ (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { type, prefix } = json.body || {};\n  \n  const timestamp = Date.now();\n  const random = Math.random().toString(36).slice(2, 9).toUpperCase();\n  \n  let generatedId = '';\n  \n  switch(type) {\n    case 'order':\n      generatedId = `ORD-${timestamp}`;\n      break;\n    case 'license':\n      const parts = [];\n      for (let i = 0; i < 4; i++) {\n        parts.push(Math.random().toString(36).slice(2, 6).toUpperCase());\n      }\n      generatedId = parts.join('-');\n      break;\n    case 'unique':\n    default:\n      generatedId = `${prefix || 'ID'}_${timestamp}_${random}`;\n  }\n  \n  out.push({\n    json: {\n      success: true,\n      id: generatedId,\n      type: type || 'unique',\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-generate-id",
      "name": "üîß Code - Generate ID",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 11300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-generate-id",
      "name": "üì§ Respond - Generate ID",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [660, 11300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/helpers/consolidate-contacts",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-consolidate-contacts",
      "name": "üìá Webhook - Consolidate Contacts",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 11500],
      "webhookId": "elevea-consolidate-contacts"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: consolidateContacts_ (do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { siteSlug } = json.body || {};\n  \n  if (!siteSlug) {\n    out.push({\n      json: {\n        success: false,\n        error: 'siteSlug √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({ json: { siteSlug, timestamp: new Date().toISOString() } });\n}\nreturn out;"
      },
      "id": "code-consolidate-contacts",
      "name": "üìá Code - Consolidate Contacts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 11500]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "whatsapp_messages", "mode": "list"},
        "options": {}
      },
      "id": "airtable-list-wa-messages-consolidate",
      "name": "üóÑÔ∏è Airtable - List WA Messages Consolidate",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 11500]
    },
    {
      "parameters": {
        "jsCode": "// Consolidar contatos √∫nicos de mensagens\nconst out = [];\nconst uniqueContacts = {};\n\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  const phone = fields.phone_number;\n  \n  if (phone && !uniqueContacts[phone]) {\n    uniqueContacts[phone] = {\n      phone: phone,\n      siteSlug: fields.site_slug,\n      lastMessage: fields.message_text,\n      lastContact: fields.created_at,\n      messageCount: 1\n    };\n  } else if (phone) {\n    uniqueContacts[phone].messageCount++;\n  }\n}\n\nconst contacts = Object.values(uniqueContacts);\n\nout.push({\n  json: {\n    success: true,\n    contacts: contacts,\n    count: contacts.length,\n    timestamp: new Date().toISOString()\n  }\n});\nreturn out;"
      },
      "id": "code-process-consolidate-contacts",
      "name": "üìá Code - Process Consolidate Contacts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 11500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-consolidate-contacts",
      "name": "üì§ Respond - Consolidate Contacts",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1060, 11500]
    }
  ],
  "connections": {
    "webhook-ping": {
      "main": [[{"node": "respond-ping", "type": "main", "index": 0}]]
    },
    "webhook-options": {
      "main": [[{"node": "respond-options", "type": "main", "index": 0}]]
    },
    "webhook-auth-login": {
      "main": [[{"node": "code-user-login", "type": "main", "index": 0}]]
    },
    "code-user-login": {
      "main": [[{"node": "airtable-search-user", "type": "main", "index": 0}]]
    },
    "airtable-search-user": {
      "main": [[{"node": "code-prepare-user-update", "type": "main", "index": 0}]]
    },
    "code-prepare-user-update": {
      "main": [[{"node": "airtable-update-user-login", "type": "main", "index": 0}]]
    },
    "airtable-update-user-login": {
      "main": [[{"node": "respond-login", "type": "main", "index": 0}]]
    },
    "webhook-set-password": {
      "main": [[{"node": "code-set-password", "type": "main", "index": 0}]]
    },
    "code-set-password": {
      "main": [[{"node": "airtable-search-user-password", "type": "main", "index": 0}]]
    },
    "airtable-search-user-password": {
      "main": [[{"node": "airtable-update-password", "type": "main", "index": 0}]]
    },
    "airtable-update-password": {
      "main": [[{"node": "respond-set-password", "type": "main", "index": 0}]]
    },
    "webhook-user-me": {
      "main": [[{"node": "code-user-me", "type": "main", "index": 0}]]
    },
    "code-user-me": {
      "main": [[{"node": "airtable-search-user-me", "type": "main", "index": 0}]]
    },
    "airtable-search-user-me": {
      "main": [[{"node": "airtable-search-client-me", "type": "main", "index": 0}]]
    },
    "airtable-search-client-me": {
      "main": [[{"node": "code-merge-user-data", "type": "main", "index": 0}]]
    },
    "code-merge-user-data": {
      "main": [[{"node": "respond-user-me", "type": "main", "index": 0}]]
    },
    "webhook-password-reset-request": {
      "main": [[{"node": "code-password-reset-request", "type": "main", "index": 0}]]
    },
    "code-password-reset-request": {
      "main": [[{"node": "http-resend-reset-email", "type": "main", "index": 0}]]
    },
    "http-resend-reset-email": {
      "main": [[{"node": "respond-password-reset-request", "type": "main", "index": 0}]]
    },
    "webhook-password-reset-confirm": {
      "main": [[{"node": "code-password-reset-confirm", "type": "main", "index": 0}]]
    },
    "code-password-reset-confirm": {
      "main": [[{"node": "respond-password-reset-confirm", "type": "main", "index": 0}]]
    },
    "webhook-client-plan": {
      "main": [[{"node": "code-client-plan", "type": "main", "index": 0}]]
    },
    "code-client-plan": {
      "main": [[{"node": "airtable-search-client-plan", "type": "main", "index": 0}]]
    },
    "airtable-search-client-plan": {
      "main": [[{"node": "airtable-search-billing", "type": "main", "index": 0}]]
    },
    "airtable-search-billing": {
      "main": [[{"node": "code-process-client-plan", "type": "main", "index": 0}]]
    },
    "code-process-client-plan": {
      "main": [[{"node": "respond-client-plan", "type": "main", "index": 0}]]
    },
    "webhook-client-status": {
      "main": [[{"node": "code-client-status", "type": "main", "index": 0}]]
    },
    "code-client-status": {
      "main": [[{"node": "airtable-search-client-status", "type": "main", "index": 0}]]
    },
    "airtable-search-client-status": {
      "main": [[{"node": "code-format-client-status", "type": "main", "index": 0}]]
    },
    "code-format-client-status": {
      "main": [[{"node": "respond-client-status", "type": "main", "index": 0}]]
    },
    "webhook-admin-toggle": {
      "main": [[{"node": "code-admin-toggle", "type": "main", "index": 0}]]
    },
    "code-admin-toggle": {
      "main": [[{"node": "airtable-search-client-toggle", "type": "main", "index": 0}]]
    },
    "airtable-search-client-toggle": {
      "main": [[{"node": "airtable-update-client-toggle", "type": "main", "index": 0}]]
    },
    "airtable-update-client-toggle": {
      "main": [[{"node": "code-audit-admin-toggle", "type": "main", "index": 0}]]
    },
    "code-audit-admin-toggle": {
      "main": [[{"node": "airtable-insert-audit-log", "type": "main", "index": 0}]]
    },
    "airtable-insert-audit-log": {
      "main": [[{"node": "respond-admin-toggle", "type": "main", "index": 0}]]
    },
    "webhook-mercadopago": {
      "main": [[{"node": "code-process-mercadopago", "type": "main", "index": 0}]]
    },
    "code-process-mercadopago": {
      "main": [[{"node": "if-mp-action", "type": "main", "index": 0}]]
    },
    "if-mp-action": {
      "main": [
        [{"node": "airtable-search-billing-mp", "type": "main", "index": 0}],
        [{"node": "respond-mercadopago", "type": "main", "index": 0}]
      ]
    },
    "airtable-search-billing-mp": {
      "main": [[{"node": "code-prepare-billing-update", "type": "main", "index": 0}]]
    },
    "code-prepare-billing-update": {
      "main": [[{"node": "if-billing-exists", "type": "main", "index": 0}]]
    },
    "if-billing-exists": {
      "main": [
        [{"node": "airtable-update-billing", "type": "main", "index": 0}],
        [{"node": "airtable-insert-billing", "type": "main", "index": 0}]
      ]
    },
    "airtable-update-billing": {
      "main": [[{"node": "airtable-search-client-mp", "type": "main", "index": 0}]]
    },
    "airtable-insert-billing": {
      "main": [[{"node": "airtable-search-client-mp", "type": "main", "index": 0}]]
    },
    "airtable-search-client-mp": {
      "main": [[{"node": "airtable-update-client-mp", "type": "main", "index": 0}]]
    },
    "airtable-update-client-mp": {
      "main": [[{"node": "code-prepare-mp-notification", "type": "main", "index": 0}]]
    },
    "code-prepare-mp-notification": {
      "main": [[{"node": "http-resend-mp-notification", "type": "main", "index": 0}]]
    },
    "http-resend-mp-notification": {
      "main": [[{"node": "http-telegram-mp-alert", "type": "main", "index": 0}]]
    },
    "http-telegram-mp-alert": {
      "main": [[{"node": "if-mp-activation", "type": "main", "index": 0}]]
    },
    "if-mp-activation": {
      "main": [
        [{"node": "http-netlify-rebuild-activate", "type": "main", "index": 0}],
        [{"node": "code-audit-site-blocked", "type": "main", "index": 0}]
      ]
    },
    "http-netlify-rebuild-activate": {
      "main": [[{"node": "airtable-insert-audit-mp", "type": "main", "index": 0}]]
    },
    "code-audit-site-blocked": {
      "main": [[{"node": "airtable-insert-audit-mp", "type": "main", "index": 0}]]
    },
    "airtable-insert-audit-mp": {
      "main": [[{"node": "respond-mercadopago", "type": "main", "index": 0}]]
    },
    "webhook-wa-verify": {
      "main": [[{"node": "code-wa-verify", "type": "main", "index": 0}]]
    },
    "code-wa-verify": {
      "main": [[{"node": "respond-wa-verify", "type": "main", "index": 0}]]
    },
    "webhook-wa-send-bulk": {
      "main": [[{"node": "code-wa-send-bulk", "type": "main", "index": 0}]]
    },
    "code-wa-send-bulk": {
      "main": [[{"node": "airtable-check-client-wa-bulk", "type": "main", "index": 0}]]
    },
    "airtable-check-client-wa-bulk": {
      "main": [[{"node": "code-validate-wa-limits", "type": "main", "index": 0}]]
    },
    "code-validate-wa-limits": {
      "main": [[{"node": "if-can-send-wa", "type": "main", "index": 0}]]
    },
    "if-can-send-wa": {
      "main": [
        [{"node": "code-split-wa-messages", "type": "main", "index": 0}],
        [{"node": "respond-wa-send-bulk", "type": "main", "index": 0}]
      ]
    },
    "code-split-wa-messages": {
      "main": [[{"node": "http-wa-send-official", "type": "main", "index": 0}]]
    },
    "http-wa-send-official": {
      "main": [[{"node": "code-prepare-wa-save", "type": "main", "index": 0}]]
    },
    "code-prepare-wa-save": {
      "main": [[{"node": "airtable-insert-wa-message", "type": "main", "index": 0}]]
    },
    "airtable-insert-wa-message": {
      "main": [[{"node": "respond-wa-send-bulk", "type": "main", "index": 0}]]
    },
    "webhook-wa-send-ai": {
      "main": [[{"node": "code-wa-send-ai", "type": "main", "index": 0}]]
    },
    "code-wa-send-ai": {
      "main": [[{"node": "airtable-check-client-wa-ai", "type": "main", "index": 0}]]
    },
    "airtable-check-client-wa-ai": {
      "main": [[{"node": "code-validate-wa-ai", "type": "main", "index": 0}]]
    },
    "code-validate-wa-ai": {
      "main": [[{"node": "if-use-ai", "type": "main", "index": 0}]]
    },
    "if-use-ai": {
      "main": [
        [{"node": "http-openai-chat", "type": "main", "index": 0}],
        [{"node": "http-evolution-send-direct", "type": "main", "index": 0}]
      ]
    },
    "http-openai-chat": {
      "main": [[{"node": "code-format-ai-response", "type": "main", "index": 0}]]
    },
    "code-format-ai-response": {
      "main": [[{"node": "http-evolution-send-ai", "type": "main", "index": 0}]]
    },
    "http-evolution-send-ai": {
      "main": [[{"node": "code-prepare-wa-evolution-save", "type": "main", "index": 0}]]
    },
    "http-evolution-send-direct": {
      "main": [[{"node": "code-prepare-wa-evolution-save", "type": "main", "index": 0}]]
    },
    "code-prepare-wa-evolution-save": {
      "main": [[{"node": "airtable-insert-wa-evolution", "type": "main", "index": 0}]]
    },
    "airtable-insert-wa-evolution": {
      "main": [[{"node": "respond-wa-send-ai", "type": "main", "index": 0}]]
    },
    "webhook-wa-evolution-incoming": {
      "main": [[{"node": "code-wa-incoming", "type": "main", "index": 0}]]
    },
    "code-wa-incoming": {
      "main": [[{"node": "code-resolve-site-from-phone", "type": "main", "index": 0}]]
    },
    "code-resolve-site-from-phone": {
      "main": [[{"node": "airtable-check-client-wa-incoming", "type": "main", "index": 0}]]
    },
    "airtable-check-client-wa-incoming": {
      "main": [[{"node": "code-check-ai-permission", "type": "main", "index": 0}]]
    },
    "code-check-ai-permission": {
      "main": [[{"node": "if-can-use-ai", "type": "main", "index": 0}]]
    },
    "if-can-use-ai": {
      "main": [
        [{"node": "http-openai-incoming", "type": "main", "index": 0}],
        [{"node": "code-default-response", "type": "main", "index": 0}]
      ]
    },
    "http-openai-incoming": {
      "main": [[{"node": "code-format-ai-incoming", "type": "main", "index": 0}]]
    },
    "code-format-ai-incoming": {
      "main": [[{"node": "http-evolution-send-response", "type": "main", "index": 0}]]
    },
    "code-default-response": {
      "main": [[{"node": "http-evolution-send-response", "type": "main", "index": 0}]]
    },
    "http-evolution-send-response": {
      "main": [[{"node": "code-prepare-wa-conversation-save", "type": "main", "index": 0}]]
    },
    "code-prepare-wa-conversation-save": {
      "main": [[{"node": "airtable-insert-wa-conversation", "type": "main", "index": 0}]]
    },
    "airtable-insert-wa-conversation": {
      "main": [[{"node": "respond-wa-evolution-incoming", "type": "main", "index": 0}]]
    },
    "webhook-wa-list-messages": {
      "main": [[{"node": "code-wa-list-messages", "type": "main", "index": 0}]]
    },
    "code-wa-list-messages": {
      "main": [[{"node": "airtable-list-wa-messages", "type": "main", "index": 0}]]
    },
    "airtable-list-wa-messages": {
      "main": [[{"node": "code-format-wa-messages-list", "type": "main", "index": 0}]]
    },
    "code-format-wa-messages-list": {
      "main": [[{"node": "respond-wa-list-messages", "type": "main", "index": 0}]]
    },
    "webhook-wa-templates": {
      "main": [[{"node": "code-wa-templates", "type": "main", "index": 0}]]
    },
    "code-wa-templates": {
      "main": [[{"node": "airtable-list-wa-templates", "type": "main", "index": 0}]]
    },
    "airtable-list-wa-templates": {
      "main": [[{"node": "code-format-wa-templates", "type": "main", "index": 0}]]
    },
    "code-format-wa-templates": {
      "main": [[{"node": "respond-wa-templates", "type": "main", "index": 0}]]
    },
    "webhook-google-credentials": {
      "main": [[{"node": "code-google-save-credentials", "type": "main", "index": 0}]]
    },
    "code-google-save-credentials": {
      "main": [[{"node": "airtable-insert-google-credentials", "type": "main", "index": 0}]]
    },
    "airtable-insert-google-credentials": {
      "main": [[{"node": "respond-google-credentials", "type": "main", "index": 0}]]
    },
    "webhook-google-reviews": {
      "main": [[{"node": "code-google-reviews", "type": "main", "index": 0}]]
    },
    "code-google-reviews": {
      "main": [[{"node": "airtable-list-google-reviews", "type": "main", "index": 0}]]
    },
    "airtable-list-google-reviews": {
      "main": [[{"node": "code-format-google-reviews", "type": "main", "index": 0}]]
    },
    "code-format-google-reviews": {
      "main": [[{"node": "respond-google-reviews", "type": "main", "index": 0}]]
    },
    "webhook-feedback-submit": {
      "main": [[{"node": "code-feedback-submit", "type": "main", "index": 0}]]
    },
    "code-feedback-submit": {
      "main": [[{"node": "airtable-insert-feedback", "type": "main", "index": 0}]]
    },
    "airtable-insert-feedback": {
      "main": [[{"node": "respond-feedback-submit", "type": "main", "index": 0}]]
    },
    "webhook-feedback-list": {
      "main": [[{"node": "code-feedback-list", "type": "main", "index": 0}]]
    },
    "code-feedback-list": {
      "main": [[{"node": "airtable-list-feedbacks", "type": "main", "index": 0}]]
    },
    "airtable-list-feedbacks": {
      "main": [[{"node": "code-format-feedbacks-list", "type": "main", "index": 0}]]
    },
    "code-format-feedbacks-list": {
      "main": [[{"node": "respond-feedback-list", "type": "main", "index": 0}]]
    },
    "webhook-feedback-approve": {
      "main": [[{"node": "code-feedback-approve", "type": "main", "index": 0}]]
    },
    "code-feedback-approve": {
      "main": [[{"node": "airtable-update-feedback-approval", "type": "main", "index": 0}]]
    },
    "airtable-update-feedback-approval": {
      "main": [[{"node": "if-should-publish-feedback", "type": "main", "index": 0}]]
    },
    "if-should-publish-feedback": {
      "main": [
        [{"node": "http-netlify-publish-feedback", "type": "main", "index": 0}],
        [{"node": "respond-feedback-approve", "type": "main", "index": 0}]
      ]
    },
    "http-netlify-publish-feedback": {
      "main": [[{"node": "respond-feedback-approve", "type": "main", "index": 0}]]
    },
    "webhook-leads-capture": {
      "main": [[{"node": "code-leads-capture", "type": "main", "index": 0}]]
    },
    "code-leads-capture": {
      "main": [[{"node": "airtable-insert-lead", "type": "main", "index": 0}]]
    },
    "airtable-insert-lead": {
      "main": [[{"node": "code-analytics-lead-captured", "type": "main", "index": 0}]]
    },
    "code-analytics-lead-captured": {
      "main": [[{"node": "airtable-insert-analytics-lead", "type": "main", "index": 0}]]
    },
    "airtable-insert-analytics-lead": {
      "main": [[{"node": "http-telegram-lead-alert", "type": "main", "index": 0}]]
    },
    "http-telegram-lead-alert": {
      "main": [[{"node": "respond-leads-capture", "type": "main", "index": 0}]]
    },
    "webhook-leads-list": {
      "main": [[{"node": "code-leads-list", "type": "main", "index": 0}]]
    },
    "code-leads-list": {
      "main": [[{"node": "airtable-list-leads", "type": "main", "index": 0}]]
    },
    "airtable-list-leads": {
      "main": [[{"node": "code-format-leads-list", "type": "main", "index": 0}]]
    },
    "code-format-leads-list": {
      "main": [[{"node": "respond-leads-list", "type": "main", "index": 0}]]
    },
    "webhook-analytics-track": {
      "main": [[{"node": "code-analytics-track", "type": "main", "index": 0}]]
    },
    "code-analytics-track": {
      "main": [[{"node": "airtable-insert-analytics-event", "type": "main", "index": 0}]]
    },
    "airtable-insert-analytics-event": {
      "main": [[{"node": "respond-analytics-track", "type": "main", "index": 0}]]
    },
    "webhook-analytics-dashboard": {
      "main": [[{"node": "code-analytics-dashboard", "type": "main", "index": 0}]]
    },
    "code-analytics-dashboard": {
      "main": [[{"node": "airtable-list-analytics", "type": "main", "index": 0}]]
    },
    "airtable-list-analytics": {
      "main": [[{"node": "code-process-analytics", "type": "main", "index": 0}]]
    },
    "code-process-analytics": {
      "main": [[{"node": "respond-analytics-dashboard", "type": "main", "index": 0}]]
    },
    "webhook-onboarding-save": {
      "main": [[{"node": "code-onboarding-save", "type": "main", "index": 0}]]
    },
    "code-onboarding-save": {
      "main": [[{"node": "airtable-insert-onboarding", "type": "main", "index": 0}]]
    },
    "airtable-insert-onboarding": {
      "main": [[{"node": "respond-onboarding-save", "type": "main", "index": 0}]]
    },
    "webhook-onboarding-prompt": {
      "main": [[{"node": "code-onboarding-prompt", "type": "main", "index": 0}]]
    },
    "code-onboarding-prompt": {
      "main": [[{"node": "airtable-search-onboarding", "type": "main", "index": 0}]]
    },
    "airtable-search-onboarding": {
      "main": [[{"node": "code-generate-prompt", "type": "main", "index": 0}]]
    },
    "code-generate-prompt": {
      "main": [[{"node": "airtable-update-onboarding-prompt", "type": "main", "index": 0}]]
    },
    "airtable-update-onboarding-prompt": {
      "main": [[{"node": "respond-onboarding-prompt", "type": "main", "index": 0}]]
    },
    "cron-token-refresh": {
      "main": [[{"node": "code-start-token-refresh", "type": "main", "index": 0}]]
    },
    "code-start-token-refresh": {
      "main": [[{"node": "airtable-list-google-tokens", "type": "main", "index": 0}]]
    },
    "airtable-list-google-tokens": {
      "main": [[{"node": "code-filter-expiring-tokens", "type": "main", "index": 0}]]
    },
    "code-filter-expiring-tokens": {
      "main": [[{"node": "http-google-refresh-token", "type": "main", "index": 0}]]
    },
    "http-google-refresh-token": {
      "main": [[{"node": "code-prepare-token-update", "type": "main", "index": 0}]]
    },
    "code-prepare-token-update": {
      "main": [[{"node": "airtable-update-google-token", "type": "main", "index": 0}]]
    },
    "cron-billing-check": {
      "main": [[{"node": "code-start-billing-check", "type": "main", "index": 0}]]
    },
    "code-start-billing-check": {
      "main": [[{"node": "airtable-list-all-clients-billing", "type": "main", "index": 0}]]
    },
    "airtable-list-all-clients-billing": {
      "main": [[{"node": "code-filter-vip-clients", "type": "main", "index": 0}]]
    },
    "code-filter-vip-clients": {
      "main": [[{"node": "airtable-search-billing-check", "type": "main", "index": 0}]]
    },
    "airtable-search-billing-check": {
      "main": [[{"node": "code-check-payment-delay", "type": "main", "index": 0}]]
    },
    "code-check-payment-delay": {
      "main": [[{"node": "airtable-block-client-billing", "type": "main", "index": 0}]]
    },
    "airtable-block-client-billing": {
      "main": [[{"node": "http-resend-billing-warning", "type": "main", "index": 0}]]
    },
    "http-resend-billing-warning": {
      "main": [[{"node": "http-telegram-billing-alert", "type": "main", "index": 0}]]
    },
    "cron-reviews-sync": {
      "main": [[{"node": "code-start-reviews-sync", "type": "main", "index": 0}]]
    },
    "code-start-reviews-sync": {
      "main": [[{"node": "airtable-list-google-credentials-sync", "type": "main", "index": 0}]]
    },
    "airtable-list-google-credentials-sync": {
      "main": [[{"node": "code-filter-active-gmb", "type": "main", "index": 0}]]
    },
    "code-filter-active-gmb": {
      "main": [[{"node": "http-google-get-reviews", "type": "main", "index": 0}]]
    },
    "http-google-get-reviews": {
      "main": [[{"node": "code-process-google-reviews", "type": "main", "index": 0}]]
    },
    "code-process-google-reviews": {
      "main": [[{"node": "airtable-insert-google-review", "type": "main", "index": 0}]]
    },
    "cron-backup": {
      "main": [[{"node": "code-prepare-backup", "type": "main", "index": 0}]]
    },
    "code-prepare-backup": {
      "main": [[{"node": "http-telegram-backup-notification", "type": "main", "index": 0}]]
    },
    "webhook-site-structure": {
      "main": [[{"node": "code-site-structure", "type": "main", "index": 0}]]
    },
    "code-site-structure": {
      "main": [[{"node": "airtable-search-site-structure", "type": "main", "index": 0}]]
    },
    "airtable-search-site-structure": {
      "main": [[{"node": "code-format-site-structure", "type": "main", "index": 0}]]
    },
    "code-format-site-structure": {
      "main": [[{"node": "respond-site-structure", "type": "main", "index": 0}]]
    },
    "webhook-save-site-structure": {
      "main": [[{"node": "code-save-site-structure", "type": "main", "index": 0}]]
    },
    "code-save-site-structure": {
      "main": [[{"node": "airtable-check-site-exists", "type": "main", "index": 0}]]
    },
    "airtable-check-site-exists": {
      "main": [[{"node": "if-site-exists", "type": "main", "index": 0}]]
    },
    "if-site-exists": {
      "main": [
        [{"node": "airtable-update-site-structure", "type": "main", "index": 0}],
        [{"node": "airtable-insert-site-structure", "type": "main", "index": 0}]
      ]
    },
    "airtable-update-site-structure": {
      "main": [[{"node": "http-netlify-rebuild-structure", "type": "main", "index": 0}]]
    },
    "airtable-insert-site-structure": {
      "main": [[{"node": "http-netlify-rebuild-structure", "type": "main", "index": 0}]]
    },
    "http-netlify-rebuild-structure": {
      "main": [[{"node": "respond-save-site-structure", "type": "main", "index": 0}]]
    },
    "webhook-site-settings": {
      "main": [[{"node": "code-site-settings", "type": "main", "index": 0}]]
    },
    "code-site-settings": {
      "main": [[{"node": "airtable-search-site-settings", "type": "main", "index": 0}]]
    },
    "airtable-search-site-settings": {
      "main": [[{"node": "code-format-site-settings", "type": "main", "index": 0}]]
    },
    "code-format-site-settings": {
      "main": [[{"node": "respond-site-settings", "type": "main", "index": 0}]]
    },
    "webhook-save-site-settings": {
      "main": [[{"node": "code-save-site-settings", "type": "main", "index": 0}]]
    },
    "code-save-site-settings": {
      "main": [[{"node": "airtable-check-settings-exists", "type": "main", "index": 0}]]
    },
    "airtable-check-settings-exists": {
      "main": [[{"node": "if-settings-exists", "type": "main", "index": 0}]]
    },
    "if-settings-exists": {
      "main": [
        [{"node": "airtable-update-site-settings", "type": "main", "index": 0}],
        [{"node": "airtable-insert-site-settings", "type": "main", "index": 0}]
      ]
    },
    "airtable-update-site-settings": {
      "main": [[{"node": "respond-save-site-settings", "type": "main", "index": 0}]]
    },
    "airtable-insert-site-settings": {
      "main": [[{"node": "respond-save-site-settings", "type": "main", "index": 0}]]
    },
    "webhook-update-site-content": {
      "main": [[{"node": "code-update-site-content", "type": "main", "index": 0}]]
    },
    "code-update-site-content": {
      "main": [[{"node": "airtable-search-site-for-update", "type": "main", "index": 0}]]
    },
    "airtable-search-site-for-update": {
      "main": [[{"node": "code-process-content-update", "type": "main", "index": 0}]]
    },
    "code-process-content-update": {
      "main": [[{"node": "airtable-update-site-content", "type": "main", "index": 0}]]
    },
    "airtable-update-site-content": {
      "main": [[{"node": "http-netlify-rebuild-content", "type": "main", "index": 0}]]
    },
    "http-netlify-rebuild-content": {
      "main": [[{"node": "respond-update-site-content", "type": "main", "index": 0}]]
    },
    "webhook-site-sections": {
      "main": [[{"node": "code-site-sections", "type": "main", "index": 0}]]
    },
    "code-site-sections": {
      "main": [[{"node": "airtable-search-site-sections", "type": "main", "index": 0}]]
    },
    "airtable-search-site-sections": {
      "main": [[{"node": "code-format-site-sections", "type": "main", "index": 0}]]
    },
    "code-format-site-sections": {
      "main": [[{"node": "respond-site-sections", "type": "main", "index": 0}]]
    },
    "webhook-sections-upsert": {
      "main": [[{"node": "code-sections-upsert", "type": "main", "index": 0}]]
    },
    "code-sections-upsert": {
      "main": [[{"node": "airtable-search-site-for-sections", "type": "main", "index": 0}]]
    },
    "airtable-search-site-for-sections": {
      "main": [[{"node": "airtable-update-sections", "type": "main", "index": 0}]]
    },
    "airtable-update-sections": {
      "main": [[{"node": "respond-sections-upsert", "type": "main", "index": 0}]]
    },
    "webhook-sections-bootstrap": {
      "main": [[{"node": "code-sections-bootstrap", "type": "main", "index": 0}]]
    },
    "code-sections-bootstrap": {
      "main": [[{"node": "airtable-search-onboarding-for-bootstrap", "type": "main", "index": 0}]]
    },
    "airtable-search-onboarding-for-bootstrap": {
      "main": [[{"node": "code-generate-default-sections", "type": "main", "index": 0}]]
    },
    "code-generate-default-sections": {
      "main": [[{"node": "airtable-insert-bootstrapped-sections", "type": "main", "index": 0}]]
    },
    "airtable-insert-bootstrapped-sections": {
      "main": [[{"node": "respond-sections-bootstrap", "type": "main", "index": 0}]]
    },
    "webhook-modules-list": {
      "main": [[{"node": "code-modules-list", "type": "main", "index": 0}]]
    },
    "code-modules-list": {
      "main": [[{"node": "airtable-search-client-modules", "type": "main", "index": 0}]]
    },
    "airtable-search-client-modules": {
      "main": [[{"node": "code-format-modules-list", "type": "main", "index": 0}]]
    },
    "code-format-modules-list": {
      "main": [[{"node": "respond-modules-list", "type": "main", "index": 0}]]
    },
    "webhook-modules-toggle": {
      "main": [[{"node": "code-modules-toggle", "type": "main", "index": 0}]]
    },
    "code-modules-toggle": {
      "main": [[{"node": "airtable-check-client-modules-toggle", "type": "main", "index": 0}]]
    },
    "airtable-check-client-modules-toggle": {
      "main": [[{"node": "code-validate-module-toggle", "type": "main", "index": 0}]]
    },
    "code-validate-module-toggle": {
      "main": [[{"node": "airtable-search-settings-for-module", "type": "main", "index": 0}]]
    },
    "airtable-search-settings-for-module": {
      "main": [[{"node": "code-update-module-in-settings", "type": "main", "index": 0}]]
    },
    "code-update-module-in-settings": {
      "main": [[{"node": "airtable-update-module-toggle", "type": "main", "index": 0}]]
    },
    "airtable-update-module-toggle": {
      "main": [[{"node": "respond-modules-toggle", "type": "main", "index": 0}]]
    },
    "webhook-upload-base64": {
      "main": [[{"node": "code-upload-base64", "type": "main", "index": 0}]]
    },
    "code-upload-base64": {
      "main": [[{"node": "airtable-insert-uploaded-file", "type": "main", "index": 0}]]
    },
    "airtable-insert-uploaded-file": {
      "main": [[{"node": "respond-upload-base64", "type": "main", "index": 0}]]
    },
    "webhook-templates-list": {
      "main": [[{"node": "code-templates-list", "type": "main", "index": 0}]]
    },
    "code-templates-list": {
      "main": [[{"node": "airtable-list-templates", "type": "main", "index": 0}]]
    },
    "airtable-list-templates": {
      "main": [[{"node": "code-format-templates-list", "type": "main", "index": 0}]]
    },
    "code-format-templates-list": {
      "main": [[{"node": "respond-templates-list", "type": "main", "index": 0}]]
    },
    "webhook-template-apply": {
      "main": [[{"node": "code-template-apply", "type": "main", "index": 0}]]
    },
    "code-template-apply": {
      "main": [[{"node": "airtable-search-template", "type": "main", "index": 0}]]
    },
    "airtable-search-template": {
      "main": [[{"node": "airtable-check-client-template", "type": "main", "index": 0}]]
    },
    "airtable-check-client-template": {
      "main": [[{"node": "code-validate-template-apply", "type": "main", "index": 0}]]
    },
    "code-validate-template-apply": {
      "main": [[{"node": "code-apply-template-to-site", "type": "main", "index": 0}]]
    },
    "code-apply-template-to-site": {
      "main": [[{"node": "airtable-search-site-for-template", "type": "main", "index": 0}]]
    },
    "airtable-search-site-for-template": {
      "main": [[{"node": "airtable-apply-template", "type": "main", "index": 0}]]
    },
    "airtable-apply-template": {
      "main": [[{"node": "http-netlify-rebuild-template", "type": "main", "index": 0}]]
    },
    "http-netlify-rebuild-template": {
      "main": [[{"node": "respond-template-apply", "type": "main", "index": 0}]]
    },
    "webhook-admin-dashboard": {
      "main": [[{"node": "code-admin-dashboard", "type": "main", "index": 0}]]
    },
    "code-admin-dashboard": {
      "main": [[{"node": "airtable-list-all-clients-dashboard", "type": "main", "index": 0}]]
    },
    "airtable-list-all-clients-dashboard": {
      "main": [[{"node": "airtable-list-recent-leads", "type": "main", "index": 0}]]
    },
    "airtable-list-recent-leads": {
      "main": [[{"node": "airtable-list-billing-dashboard", "type": "main", "index": 0}]]
    },
    "airtable-list-billing-dashboard": {
      "main": [[{"node": "code-process-admin-dashboard", "type": "main", "index": 0}]]
    },
    "code-process-admin-dashboard": {
      "main": [[{"node": "respond-admin-dashboard", "type": "main", "index": 0}]]
    },
    "webhook-admin-clients": {
      "main": [[{"node": "code-admin-clients", "type": "main", "index": 0}]]
    },
    "code-admin-clients": {
      "main": [[{"node": "airtable-list-admin-clients", "type": "main", "index": 0}]]
    },
    "airtable-list-admin-clients": {
      "main": [[{"node": "code-format-admin-clients", "type": "main", "index": 0}]]
    },
    "code-format-admin-clients": {
      "main": [[{"node": "respond-admin-clients", "type": "main", "index": 0}]]
    },
    "webhook-audit-logs": {
      "main": [[{"node": "code-audit-logs", "type": "main", "index": 0}]]
    },
    "code-audit-logs": {
      "main": [[{"node": "airtable-list-audit-logs", "type": "main", "index": 0}]]
    },
    "airtable-list-audit-logs": {
      "main": [[{"node": "code-format-audit-logs", "type": "main", "index": 0}]]
    },
    "code-format-audit-logs": {
      "main": [[{"node": "respond-audit-logs", "type": "main", "index": 0}]]
    },
    "webhook-sites-list": {
      "main": [[{"node": "code-sites-list", "type": "main", "index": 0}]]
    },
    "code-sites-list": {
      "main": [[{"node": "airtable-list-all-sites", "type": "main", "index": 0}]]
    },
    "airtable-list-all-sites": {
      "main": [[{"node": "airtable-list-clients-for-sites", "type": "main", "index": 0}]]
    },
    "airtable-list-clients-for-sites": {
      "main": [[{"node": "code-format-sites-list", "type": "main", "index": 0}]]
    },
    "code-format-sites-list": {
      "main": [[{"node": "respond-sites-list", "type": "main", "index": 0}]]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-01-07T00:00:00.000Z",
      "updatedAt": "2025-01-07T00:00:00.000Z",
      "id": "elevea-complete-196",
      "name": "ELEVEA Complete 196 Functions"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-01-07T00:00:00.000Z",
  "versionId": "COMPLETE-ALL-FUNCTIONS-V3.0",
  "id": "elevea-n8n-complete-all-196"
}
