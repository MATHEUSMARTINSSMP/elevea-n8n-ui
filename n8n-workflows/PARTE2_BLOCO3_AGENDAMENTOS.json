{
  "name": "ELEVEA PARTE 2 - Bloco 3: Agendamentos (3 endpoints)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/appointments/cancel",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-appointment-cancel",
      "name": "üìÖ Webhook - Appointment Cancel",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 12700],
      "webhookId": "elevea-appointment-cancel"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: appointment_cancel (l√≥gica do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { appointmentId, reason } = json.body || {};\n  \n  if (!appointmentId) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Appointment ID √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      appointmentId: appointmentId,\n      reason: reason || 'Cancelado pelo cliente',\n      searchFormula: `{id}='${appointmentId}'`,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-appointment-cancel-prep",
      "name": "üìù Code - Prepare Cancel",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 12700]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "appointments", "mode": "list"},
        "filterByFormula": "={{ $json.searchFormula }}",
        "options": {}
      },
      "id": "airtable-search-appointment-cancel",
      "name": "üóÑÔ∏è Airtable - Search Appointment",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 12700]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "appointments", "mode": "list"},
        "id": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "status", "fieldValue": "cancelled"},
            {"fieldName": "cancelledAt", "fieldValue": "={{ new Date().toISOString() }}"},
            {"fieldName": "cancellationReason", "fieldValue": "={{ $json.reason }}"}
          ]
        }
      },
      "id": "airtable-cancel-appointment",
      "name": "üóÑÔ∏è Airtable - Cancel Appointment",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [860, 12700]
    },
    {
      "parameters": {
        "jsCode": "// Preparar mensagem WhatsApp de cancelamento\nconst out = [];\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  const phone = (fields.customerPhone || '').replace(/\\D/g, '');\n  const name = fields.customerName || 'Cliente';\n  const datetime = fields.datetime || '';\n  \n  const message = `Ol√° ${name}! Seu agendamento para ${datetime} foi cancelado. Entre em contato para reagendar se desejar.`;\n  \n  out.push({\n    json: {\n      to: phone.length === 11 ? '55' + phone : phone,\n      message: message,\n      customerEmail: fields.customerEmail,\n      appointmentId: fields.id,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-prep-cancel-whatsapp",
      "name": "üì± Code - Prep WhatsApp Cancel",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, 12700]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/PHONE_ID/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {"name": "Authorization", "value": "Bearer {{ $json.WHATSAPP_TOKEN }}"}
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {"name": "messaging_product", "value": "whatsapp"},
            {"name": "to", "value": "={{ $json.to }}"},
            {"name": "type", "value": "text"},
            {"name": "text", "value": "={{ { body: $json.message } }}"}
          ]
        },
        "options": {}
      },
      "id": "http-whatsapp-cancel-notif",
      "name": "üì± HTTP - WhatsApp Cancel Notif",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1260, 12700]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Agendamento cancelado e notifica√ß√£o enviada', timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-appointment-cancel",
      "name": "üì§ Respond - Appointment Cancel",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1460, 12700]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/appointments/confirm",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-appointment-confirm",
      "name": "üìÖ Webhook - Appointment Confirm",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 12900],
      "webhookId": "elevea-appointment-confirm"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: appointment_confirm (l√≥gica do GAS)\nconst out = [];\nfor (const { json } of items) {\n  const { appointmentId } = json.body || {};\n  \n  if (!appointmentId) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Appointment ID √© obrigat√≥rio',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      appointmentId: appointmentId,\n      searchFormula: `{id}='${appointmentId}'`,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-appointment-confirm-prep",
      "name": "üìù Code - Prepare Confirm",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 12900]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "appointments", "mode": "list"},
        "filterByFormula": "={{ $json.searchFormula }}",
        "options": {}
      },
      "id": "airtable-search-appointment-confirm",
      "name": "üóÑÔ∏è Airtable - Search Appointment",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 12900]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "appointments", "mode": "list"},
        "id": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {"fieldName": "status", "fieldValue": "confirmed"},
            {"fieldName": "confirmedAt", "fieldValue": "={{ new Date().toISOString() }}"}
          ]
        }
      },
      "id": "airtable-confirm-appointment",
      "name": "üóÑÔ∏è Airtable - Confirm Appointment",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [860, 12900]
    },
    {
      "parameters": {
        "jsCode": "// Preparar mensagem WhatsApp de confirma√ß√£o (usa processMessageVariables do GAS linha 7591)\nconst out = [];\nfor (const { json } of items) {\n  const fields = json.fields || {};\n  const phone = (fields.customerPhone || '').replace(/\\D/g, '');\n  const name = fields.customerName || 'Cliente';\n  const datetime = new Date(fields.datetime);\n  const data = datetime.toLocaleDateString('pt-BR');\n  const hora = datetime.toLocaleTimeString('pt-BR', {hour: '2-digit', minute: '2-digit'});\n  \n  // Sauda√ß√£o autom√°tica\n  const hour = new Date().getHours();\n  const saudacao = hour < 12 ? 'Bom dia' : hour < 18 ? 'Boa tarde' : 'Boa noite';\n  \n  const message = `${saudacao}, ${name}! ‚úÖ Seu agendamento foi CONFIRMADO para ${data} √†s ${hora}. At√© l√°!`;\n  \n  out.push({\n    json: {\n      to: phone.length === 11 ? '55' + phone : phone,\n      message: message,\n      customerEmail: fields.customerEmail,\n      appointmentId: fields.id,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-prep-confirm-whatsapp",
      "name": "üì± Code - Prep WhatsApp Confirm",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, 12900]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/PHONE_ID/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {"name": "Authorization", "value": "Bearer {{ $json.WHATSAPP_TOKEN }}"}
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {"name": "messaging_product", "value": "whatsapp"},
            {"name": "to", "value": "={{ $json.to }}"},
            {"name": "type", "value": "text"},
            {"name": "text", "value": "={{ { body: $json.message } }}"}
          ]
        },
        "options": {}
      },
      "id": "http-whatsapp-confirm-notif",
      "name": "üì± HTTP - WhatsApp Confirm Notif",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1260, 12900]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Agendamento confirmado e notifica√ß√£o enviada', timestamp: new Date().toISOString() } }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-appointment-confirm",
      "name": "üì§ Respond - Appointment Confirm",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1460, 12900]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/appointments/availability",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-appointment-availability",
      "name": "üìÖ Webhook - Appointment Availability",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [260, 13100],
      "webhookId": "elevea-appointment-availability"
    },
    {
      "parameters": {
        "jsCode": "// FUN√á√ÉO: appointment_get_availability (do GAS linha 6989)\nconst out = [];\nfor (const { json } of items) {\n  const { site, siteSlug, date, duration = 60 } = json.body || {};\n  const normalizedSite = (site || siteSlug || '').toUpperCase();\n  \n  if (!normalizedSite || !date) {\n    out.push({\n      json: {\n        success: false,\n        error: 'Site e data s√£o obrigat√≥rios',\n        timestamp: new Date().toISOString()\n      }\n    });\n    continue;\n  }\n  \n  out.push({\n    json: {\n      siteSlug: normalizedSite,\n      date: date,\n      duration: parseInt(duration),\n      searchFormula: `AND({site}='${normalizedSite}', {datetime}>='${date}T00:00:00', {datetime}<='${date}T23:59:59', {status}<>'cancelled')`,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nreturn out;"
      },
      "id": "code-availability-prep",
      "name": "üìù Code - Prepare Availability Check",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 13100]
    },
    {
      "parameters": {
        "operation": "list",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "appointments", "mode": "list"},
        "returnAll": true,
        "options": {
          "filterByFormula": "={{ $json.searchFormula }}"
        }
      },
      "id": "airtable-list-day-appointments",
      "name": "üóÑÔ∏è Airtable - List Day Appointments",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [660, 13100]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {"__rl": true, "value": "appELEVEA", "mode": "list"},
        "table": {"__rl": true, "value": "appointment_settings", "mode": "list"},
        "filterByFormula": "={site}='{{ $json.siteSlug }}'",
        "options": {}
      },
      "id": "airtable-get-appointment-settings",
      "name": "üóÑÔ∏è Airtable - Get Settings",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [860, 13100]
    },
    {
      "parameters": {
        "jsCode": "// Calcular slots dispon√≠veis (baseado no GAS linha 6989 + helper checkAppointmentAvailability_ linha 223)\nconst appointments = items[0]?.json?.appointments || [];\nconst settings = items[1]?.json?.fields || {};\nconst inputData = $node['Code - Prepare Availability Check'].json;\n\n// Working hours\nlet workingHours = { start: '09:00', end: '18:00' };\ntry {\n  workingHours = typeof settings.workingHours === 'string' \n    ? JSON.parse(settings.workingHours) \n    : (settings.workingHours || workingHours);\n} catch (e) {}\n\nconst duration = inputData.duration || 60;\nconst startHour = parseInt(workingHours.start.split(':')[0]);\nconst endHour = parseInt(workingHours.end.split(':')[0]);\n\nconst availableSlots = [];\nconst busySlots = [];\n\nfor (let hour = startHour; hour < endHour; hour++) {\n  const timeSlot = `${hour.toString().padStart(2, '0')}:00`;\n  const slotDateTime = `${inputData.date}T${timeSlot}:00`;\n  \n  // Verificar se h√° conflito (checkAppointmentAvailability logic)\n  const requestedStart = new Date(slotDateTime);\n  const requestedEnd = new Date(requestedStart.getTime() + (duration * 60000));\n  \n  let hasConflict = false;\n  for (const apt of appointments) {\n    if (apt.status === 'cancelled') continue;\n    \n    const existingStart = new Date(apt.datetime);\n    const existingEnd = new Date(existingStart.getTime() + ((apt.duration || 60) * 60000));\n    \n    if (requestedStart < existingEnd && requestedEnd > existingStart) {\n      hasConflict = true;\n      busySlots.push(timeSlot);\n      break;\n    }\n  }\n  \n  if (!hasConflict) {\n    availableSlots.push(timeSlot);\n  }\n}\n\nconst out = [{\n  json: {\n    success: true,\n    data: {\n      date: inputData.date,\n      availableSlots: availableSlots,\n      busySlots: busySlots,\n      workingHours: workingHours,\n      duration: duration\n    },\n    timestamp: new Date().toISOString()\n  }\n}];\nreturn out;"
      },
      "id": "code-calc-availability",
      "name": "üìä Code - Calculate Availability",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1060, 13100]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "headers": {
            "entries": [{"name": "Access-Control-Allow-Origin", "value": "*"}]
          }
        }
      },
      "id": "respond-appointment-availability",
      "name": "üì§ Respond - Availability",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1260, 13100]
    }
  ],
  "connections": {
    "webhook-appointment-cancel": {
      "main": [[{"node": "code-appointment-cancel-prep", "type": "main", "index": 0}]]
    },
    "code-appointment-cancel-prep": {
      "main": [[{"node": "airtable-search-appointment-cancel", "type": "main", "index": 0}]]
    },
    "airtable-search-appointment-cancel": {
      "main": [[{"node": "airtable-cancel-appointment", "type": "main", "index": 0}]]
    },
    "airtable-cancel-appointment": {
      "main": [[{"node": "code-prep-cancel-whatsapp", "type": "main", "index": 0}]]
    },
    "code-prep-cancel-whatsapp": {
      "main": [[{"node": "http-whatsapp-cancel-notif", "type": "main", "index": 0}]]
    },
    "http-whatsapp-cancel-notif": {
      "main": [[{"node": "respond-appointment-cancel", "type": "main", "index": 0}]]
    },
    "webhook-appointment-confirm": {
      "main": [[{"node": "code-appointment-confirm-prep", "type": "main", "index": 0}]]
    },
    "code-appointment-confirm-prep": {
      "main": [[{"node": "airtable-search-appointment-confirm", "type": "main", "index": 0}]]
    },
    "airtable-search-appointment-confirm": {
      "main": [[{"node": "airtable-confirm-appointment", "type": "main", "index": 0}]]
    },
    "airtable-confirm-appointment": {
      "main": [[{"node": "code-prep-confirm-whatsapp", "type": "main", "index": 0}]]
    },
    "code-prep-confirm-whatsapp": {
      "main": [[{"node": "http-whatsapp-confirm-notif", "type": "main", "index": 0}]]
    },
    "http-whatsapp-confirm-notif": {
      "main": [[{"node": "respond-appointment-confirm", "type": "main", "index": 0}]]
    },
    "webhook-appointment-availability": {
      "main": [[{"node": "code-availability-prep", "type": "main", "index": 0}]]
    },
    "code-availability-prep": {
      "main": [[{"node": "airtable-list-day-appointments", "type": "main", "index": 0}]]
    },
    "airtable-list-day-appointments": {
      "main": [[{"node": "airtable-get-appointment-settings", "type": "main", "index": 0}]]
    },
    "airtable-get-appointment-settings": {
      "main": [[{"node": "code-calc-availability", "type": "main", "index": 0}]]
    },
    "code-calc-availability": {
      "main": [[{"node": "respond-appointment-availability", "type": "main", "index": 0}]]
    }
  }
}

